export const js_start1 = {
  id: "js_start1",
  title: "Что такое программирование",
  content: `
## Что такое программирование

Программирование — это процесс написания инструкций для компьютера. Эти инструкции называются **программой**, и они сообщают компьютеру, что и как делать шаг за шагом.

Представьте рецепт приготовления блюда. Он содержит пошаговые действия: "взять 2 яйца", "взбить", "добавить муку". Программа работает точно так же — вы описываете последовательность действий, которые должен выполнить компьютер.

---

### Как компьютеры "думают"

Компьютеры не понимают человеческий язык. Они работают с простыми командами, которые интерпретирует процессор. Программирование — это способ перевести человеческие задачи на язык, понятный машине.

---

### Зачем это нужно

Программы управляют:
- сайтами и приложениями
- смартфонами
- банкоматами и кассами
- умными домами, машинами и роботами

Программист — это тот, кто "разговаривает с компьютером" и создаёт логику для всех этих систем.

---

### Языки программирования

Существует множество языков: Python, Java, C++, JavaScript и другие. У каждого — свои задачи и особенности. Мы будем изучать **JavaScript** — язык, который универсален, прост для старта и востребован в IT.
  `.trim(),
  codeExampleJS: `
// Пример простого алгоритма:
let steps = 3;
console.log("Шаг 1: включить чайник");
console.log("Шаг 2: насыпать чай");
console.log("Шаг 3: залить кипятком");
  `.trim(),
  resources: ["https://ru.wikipedia.org/wiki/Программирование"],
};
export const js_start2 = {
  id: "js_start2",
  title: "Зачем нужен JavaScript",
  content: `
## Почему стоит учить JavaScript

JavaScript — это язык, который:
- используется в **браузере**
- работает на **сервере** (через Node.js)
- применяется в **автоматизации**, **играх**, **ботах** и **мобильных приложениях**

---

### Преимущества JavaScript

- **Подходит новичкам** — прост в установке и запуске (всё есть в браузере)
- **Мгновенный результат** — можно сразу видеть, как работает код
- **Огромное сообщество** — много курсов, документации, видео
- **Востребован на рынке** — язык №1 среди веб-разработчиков

---

### Где JavaScript полезен

- автоматизация задач (боты, скрипты)
- решение логических задач и головоломок
- подготовка к другим языкам
- backend и frontend разработка

---

### Вывод

JavaScript — универсальный язык, который поможет вам понять программирование в целом и откроет путь к другим направлениям: frontend, backend, data science, автоматизация.
  `.trim(),
  codeExampleJS: `
// Простая программа на JS:
console.log("Привет, JavaScript!");
  `.trim(),
  resources: ["https://learn.javascript.ru/intro"],
};
export const js_start3 = {
  id: "js_start3",
  title: "Где используется JavaScript",
  content: `
## Где применяется JavaScript

JavaScript — один из самых универсальных языков. Его используют в:

---

### Веб-разработке
- Поведение кнопок, форм, меню
- Анимации, валидации, интерактивность
- SPA (одностраничные приложения: Gmail, Notion и др.)

---

### Серверной разработке (Node.js)
- Обработка запросов и данных
- Создание REST API и backend-сервисов
- Боты, утилиты, инструменты

---

### Мобильные приложения
- С помощью React Native можно писать приложения под iOS и Android

---

### Автоматизация и скрипты
- Боты Telegram
- Скрипты парсинга сайтов
- Утилиты в командной строке

---

### Образование и обучение
- Популярен в школах и колледжах как первый язык
- Прост в изучении и позволяет быстро видеть результат

---

### Вывод

JavaScript — это язык, который работает **везде**, где есть логика, ввод-вывод и взаимодействие с данными. Один язык — десятки направлений.
  `.trim(),
  codeExampleJS: `
// Node.js: сервер, отвечающий "Привет"
const http = require("http");

http.createServer((req, res) => {
  res.end("Привет с сервера на JS");
}).listen(3000);
  `.trim(),
  resources: [
    "https://nodejs.org/ru/",
    "https://developer.mozilla.org/ru/docs/Web/JavaScript",
  ],
};
export const js_start4 = {
  id: "js_start4",
  title: "Как запускать JavaScript-код",
  content: `
## Где можно запускать JavaScript-код

После настройки среды разработки вы можете запускать JavaScript-код тремя способами:

---

### В консоли браузера

Это самый быстрый способ проверить работу кода:

1. Откройте любую веб-страницу
2. Нажмите **F12** или **ПКМ → Просмотреть код → Вкладка Console**
3. Введите:

\`\`\`js
console.log("Привет из браузера!");
\`\`\`

Этот способ удобен для простых экспериментов и первых шагов.

---

### В редакторе VS Code

Можно писать полноценные программы в отдельных .js -файлах:

1. Создайте новый файл, например \`script.js\`
2. Напишите код:

\`\`\`js
console.log("Код запускается через VS Code");
\`\`\`

3. Запустите файл с помощью установленного интерпретатора (например, через Node.js)

---

### Через Node.js

Благодаря Node.js можно выполнять JS-файлы прямо в терминале:

1. Откройте терминал
2. Перейдите в папку с файлом
3. Выполните:

\`\`\`bash
node script.js
\`\`\`

---

### Вывод

Вы можете запускать JavaScript-код разными способами — от встроенной консоли браузера до внешних инструментов. На курсе мы будем использовать редактор VS Code для написания и запуска программ.
  `.trim(),
  codeExampleJS: `
console.log("Я запустил свой первый JS-код!");
  `.trim(),
};
export const js_start5 = {
  id: "js_start5",
  title: "Что такое выражения, переменные и объекты",
  content: `
## Выражения

**Выражение (expression)** — это любой фрагмент кода, который возвращает значение.

Примеры:
- \`2 + 2\`         // выражение — результат 4
- \`"Привет"\`      // выражение — строка
- \`true && false\` // выражение — результат false

Почти всё, что ты пишешь в JavaScript — это выражения: они что-то вычисляют и возвращают результат.

---

## Переменные

**Переменная** — это имя (метка), к которому можно "прикрепить" значение, чтобы использовать его позже.

\`\`\`js
let name = "Анна";
let sum = 2 + 2;
\`\`\`

---

## Объекты

**Объекты** — это структуры для хранения значений в виде пар "ключ: значение".

\`\`\`js
let user = {
  name: "Игорь",
  age: 25
};
\`\`\`

JavaScript — объектно-ориентированный язык, и многое в нём — объекты:

- **Массивы** — это тоже объекты.
- **Функции** — тоже объекты.
- Даже строки и числа ведут себя как объекты: у них есть методы (например, \`.toUpperCase()\` или \`.toFixed()\`), хотя технически они примитивы.

---

## Почему это важно

- **Выражения** нужны для всех операций: они возвращают значения, которые используются в программах.
- **Переменные** позволяют сохранять и переиспользовать результаты вычислений.
- **Объекты** — основа хранения и организации данных в JavaScript.

Практически вся работа с JS строится на этих трёх понятиях.
  `,
  codeExampleJS: `
let x = 10 + 5;           // выражение (10 + 5), результат присваивается переменной x
let isActive = true;      // переменная isActive хранит значение true

let car = { brand: "Toyota", year: 2024 }; // объект с двумя свойствами

console.log(car.brand.toUpperCase());      // обращение к свойству + вызов метода у строки
  `,
  resources: [
    "https://learn.javascript.ru/first-steps",
    "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Grammar_and_types",
  ],
};
