export const js_variablesAndTypes_5 = {
  id: "js_variablesAndTypes_5",
  title: "Как правильно называть переменные",
  content: `
## Основные правила именования переменных

- Имя должно начинаться с буквы, \$ или \_  
  \`let name, \$price, _count;\`
- Нельзя начинать с цифры  
  \`let 1value; // ошибка\`
- Имя переменной чувствительно к регистру  
  \`let user = "Аня";\`  
  \`let User = "Игорь"; // это другая переменная\`
- Нельзя использовать зарезервированные слова  
  Примеры: \`let, const, if, while, class\` и др.

---

## Стили написания имён

| Стиль        | Пример        | Где используется                             |
| ------------ | ------------- | -------------------------------------------- |
| camelCase    | userName      | переменные, функции                          |
| PascalCase   | UserProfile   | названия классов, компонентов                |
| snake_case   | user_name     | редко используется в JS (чаще — в БД)        |
| kebab-case   | user-name     | нельзя использовать в JS (только в CSS/HTML) |

**Важно:** для JavaScript кода используем \`camelCase\`.

---

## Примеры хороших имён

\`\`\`js
let userName = "Мария";
let productPrice = 199;
let isLoggedIn = true;
\`\`\`

---

## Примеры плохих имён

\`\`\`js
let a = 5;           // ничего не понятно
let data = "текст";  // слишком общее
let n = "имя";       // неинформативно
\`\`\`

---

**Вывод:**  
Понятные и точные имена переменных делают код читаемым и удобным для поддержки.
  `,
  codeExampleJS: `
let $totalCount = 5;         // допустимо, но не злоупотребляйте $
let _isAvailable = true;     // часто используется для внутренних переменных

let userName = "Аня";        // хорошо
let UserName = "Игорь";      // не принято для переменных (лучше для классов)
let 2beOrNot2be = false;     // ошибка: имя не может начинаться с цифры
let let = 10;                // ошибка: нельзя использовать зарезервированные слова
  `,
  resources: [
    "https://learn.javascript.ru/variables",
    "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Grammar_and_types",
  ],
};

export const js_variablesAndTypes_1 = {
  id: "js_variablesAndTypes_1",
  title: "Что такое переменная",
  content: `
## Что такое переменная

Переменная — это **именованная область памяти**, в которой хранится значение. Можно представить, что переменная — это коробка с наклейкой. На наклейке написано имя (например, \`age\`), а внутри лежит значение (например, \`25\`).

\`\`\`js
let age = 25;
\`\`\`

Теперь в коробке под названием \`age\` хранится число 25. Переменные позволяют **сохранять, изменять и использовать данные** в любой части программы.

---

### Почему это важно

Представьте программу, которая рассчитывает стоимость доставки. Вам нужно знать:

- расстояние до клиента
- вес посылки
- цену за километр

Каждое из этих значений можно сохранить в переменные, чтобы затем использовать их в вычислениях.

\`\`\`js
let distance = 100;
let weight = 5;
let pricePerKm = 2;
let total = distance * pricePerKm;
\`\`\`

---

### Именование переменных

Правила:

- Имя не может начинаться с цифры
- Можно использовать только латинские буквы, цифры, символы \`$\` и \`_\`
- Регистр имеет значение: \`age\` и \`Age\` — разные переменные
- Используйте понятные имена: \`userName\`, \`totalPrice\`, а не \`a1\`, \`x\`

---

### Вывод

Переменные — основа любого кода. Они позволяют делать программу гибкой и адаптивной, работать с пользовательскими данными и строить сложную логику.
  `.trim(),
  resources: [
    "https://learn.javascript.ru/variables",
    "https://developer.mozilla.org/ru/docs/Learn/JavaScript/First_steps/Variables",
  ],
};
export const js_variablesAndTypes_2 = {
  id: "js_variablesAndTypes_2",
  title: "Ключевые слова: let, const и var",
  content: `
## Что такое ключевые слова let, const и var

В JavaScript для создания переменных используются три ключевых слова: \`let\`, \`const\` и \`var\`. Они определяют **как и где** переменная "живёт" в программе.

---

### let — переменная, которую можно менять

\`let\` создаёт переменную, значение которой можно изменить позже.

\`\`\`js
let name = "Иван";
name = "Мария"; // работает
\`\`\`

Она существует **только внутри блока**, в котором объявлена (например, внутри фигурных скобок \`{}\`).

---

### const — переменная, которую нельзя менять

\`const\` создаёт переменную, которую **нельзя переназначить**.

\`\`\`js
const city = "Москва";
city = "Казань"; // Ошибка!
\`\`\`

Такая переменная тоже **живёт только внутри блока**.

---

### var — старый способ

\`var\` — это устаревший способ объявления переменной. Он работает **по-другому**, чем \`let\` и \`const\`.

- Не имеет блочной области видимости — виден вне \`{}\`.
- "Поднимается" вверх (hoisting) — переменная как бы объявляется заранее, до исполнения кода.

---

### Пример из жизни: громкий голос и шёпот

> Представьте школу. Учитель заходит в класс и говорит:

- Если он **шепчет**, его слышат только в этом классе — как \`let\` и \`const\`, переменные работают **только в блоке**.
- Если он **кричит в коридоре**, его слышат во всей школе — как \`var\`, переменная "просачивается" наружу.

---

### Пример с var:

\`\`\`js
  if (true) {
    var subject = "Математика"; // объявлено внутри блока
  }
  console.log(subject); // работает! "Математика"
\`\`\`

Аналогичный код с \`let\` или \`const\` вызовет ошибку, так как вне блока мы ничего не знаем про эту переменную:

\`\`\`js
  if (true) {
    let subject = "Математика";
  }
  console.log(subject); // Ошибка: subject не определён
\`\`\`

---

### Какую переменную использовать?

- Всегда начинайте с \`const\`
- Если значение будет изменяться — используйте \`let\`
- Не используйте \`var\`, если только это не требуется по старому коду

---

### Вывод

\`let\` и \`const\` — современные способы объявления переменных. Они надёжнее и безопаснее. \`var\` ведёт себя непредсказуемо и может привести к багам — используйте его только в исключительных случаях.
`.trim(),

  codeExampleJS: `
const greeting = "Привет";
let age = 25;
var city = "Москва";

age = 26;        // Можно
greeting = "Hi"; // Ошибка!
`.trim(),

  resources: [
    "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/let",
    "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/const",
    "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/var",
  ],
};
export const js_variablesAndTypes_3 = {
  id: "js_variablesAndTypes_3",
  title: "Типы данных в JavaScript",
  content: `
JavaScript поддерживает разные типы данных, которые можно условно разделить на две группы:

**Примитивные типы**

**Ссылочные (объектные) типы**

---

## Примитивные типы

Это простые и неделимые значения, которые хранятся непосредственно в переменной.

К ним относятся:

| Тип         | Пример                                     |
| ----------- | ------------------------------------------ |
| number      | 42, 3.14                                   |
| string      | "текст", 'js'                              |
| boolean     | true, false                                |
| null        | null (явное отсутствие значения)           |
| undefined   | переменная объявлена, но не инициализирована |
| symbol      | уникальные идентификаторы                  |
| bigint      | большие числа (например, 123n)             |

---

## Ссылочные типы (объекты)

Это сложные структуры данных, которые хранятся по ссылке. Сами данные находятся в памяти, а переменная содержит ссылку на них.

К ссылочным типам относятся:

- Объекты
- Массивы
- Функции
- Date, Map, Set и другие встроенные структуры

---

## Разница между примитивами и ссылочными типами

**Примитив копируется по значению:**

\`\`\`js
let a = 5;
let b = a;
b = 10;

console.log(a); // 5 — не изменилось
\`\`\`

**Объекты копируются по ссылке:**

\`\`\`js
let obj1 = { name: "Игорь" };
let obj2 = obj1;

obj2.name = "Мария";

console.log(obj1.name); // "Мария" — изменилась, потому что obj1 и obj2 ссылаются на один и тот же объект
\`\`\`

---

## Что такое тип данных

Тип данных определяет **вид значения**, с которым работает программа: это может быть текст, число, правда или ложь и т.д. JavaScript — **динамически типизированный** язык: переменная может менять тип в процессе выполнения.

---

## Основные типы данных

В JavaScript 7 **примитивных** типов данных:

1. **string** — строка (текст)
2. **number** — число (включая Infinity и NaN)
3. **boolean** — логическое значение (true / false)
4. **null** — отсутствие значения
5. **undefined** — значение не задано
6. **symbol** — уникальный идентификатор
7. **bigint** — большие числа (например, для криптовалют и финансов)

---

### Строка (string)

Строка — это любой текст, заключённый в кавычки:

\`\`\`js
let name = "Анна";
let greeting = 'Привет';
let phrase = \`Имя: \${name}\`; // Шаблонные строки
\`\`\`

**Из жизни:** строка — это как надпись на бейджике: «Привет, я Анна».

---

### Число (number)

JavaScript работает с числами: целыми, дробными, положительными, отрицательными.

\`\`\`js
let age = 30;
let temperature = -4.5;
let pi = 3.14;
\`\`\`

---

#### Особые значения

- \`Infinity\` — бесконечность. Получается, например, при делении на 0:

  \`\`\`js
  let result = 10 / 0; // Infinity
  \`\`\`

- \`-Infinity\` — отрицательная бесконечность:

  \`\`\`js
  let result = -10 / 0; // -Infinity
  \`\`\`

- \`NaN\` — Not-a-Number: результат некорректной математической операции

  \`\`\`js
  let result = "abc" / 3; // NaN
  \`\`\`

**Из жизни:** попытка посчитать «яблоко / 2» — не сработает, получится "не число".

---

### Логический тип (boolean)

Значения: \`true\` (истина) и \`false\` (ложь). Используются в условиях и проверках.

\`\`\`js
let isAdult = true;
let hasMoney = false;
\`\`\`

**Из жизни:** как ответ на вопрос: «Ты включил свет?» — Да (true) или Нет (false).

---

### null

\`null\` — это **намеренное отсутствие значения**. Разработчик сам указывает: здесь ничего нет.

\`\`\`js
let selectedItem = null;
\`\`\`

**Из жизни:** как пустое место за столом — оно зарезервировано, но пока никого нет.

---

### undefined

\`undefined\` — переменной **не было присвоено значение**.

\`\`\`js
let user;
console.log(user); // undefined
\`\`\`

**Из жизни:** как пустая ячейка в таблице — она есть, но туда ничего не записали.

---

### symbol

\`Symbol\` — это уникальный идентификатор. Обычно используется в сложных приложениях для создания «скрытых» ключей объекта.

\`\`\`js
const id = Symbol("userId");
\`\`\`

**Из жизни:** символ — это как скрытый тег в одежде, который не виден снаружи, но несёт уникальную информацию.

---

### bigint

\`BigInt\` позволяет работать с очень большими числами:

\`\`\`js
const big = 1234567890123456789012345678901234567890n;
\`\`\`

Добавляется суффикс \`n\`. Используется, например, в криптографии или банковских расчётах.

---

### Вывод

JavaScript работает с 7 базовыми типами данных. Понимание этих типов помогает избежать ошибок и точно управлять информацией в программах.

| Тип         | Пример                | Описание                         |
|-------------|------------------------|----------------------------------|
| string      | "Привет"              | Текстовая строка                 |
| number      | 42, -3.14, Infinity   | Число                            |
| boolean     | true / false          | Логика (да/нет)                  |
| null        | null                  | Нет значения, пусто              |
| undefined   | undefined             | Значение не присвоено            |
| symbol      | Symbol("id")          | Уникальный идентификатор         |
| bigint      | 1234567890123n        | Очень большое число              |

  `.trim(),

  codeExampleJS: `
let name = "Анна"; // строка
let age = 25; // число
let isStudent = true; // логический тип

let selectedProduct = null; // намеренно ничего
let discount; // undefined — ещё не задано

const uniqueKey = Symbol("ключ");
const bigValue = 999999999999999999999n;

// Различие копирования примитива и объекта
let a = 5;
let b = a;
b = 10;
console.log(a); // 5

let obj1 = { name: "Игорь" };
let obj2 = obj1;
obj2.name = "Мария";
console.log(obj1.name); // "Мария"
  `.trim(),

  resources: [
    "https://developer.mozilla.org/ru/docs/Web/JavaScript/Data_structures",
    "https://learn.javascript.ru/types",
  ],
};

export const js_variablesAndTypes_4 = {
  id: "js_variablesAndTypes_4",
  title: "typeof и преобразование типов",
  content: `
JavaScript — язык с **динамической типизацией**. Это значит, что тип переменной определяется автоматически во время выполнения программы, и его можно изменить:

\`\`\`js
let value = 10;      // number
value = "текст";     // теперь string
value = true;        // теперь boolean
\`\`\`

Ты можешь присвоить переменной любое значение — тип будет подстраиваться. Это удобно, но требует аккуратности: ошибки возможны, если не следить за ожидаемыми типами.

---

## Что такое typeof

Оператор \`typeof\` позволяет узнать **тип значения**. Это удобно для отладки и понимания, с чем вы работаете.

\`\`\`js
typeof "Привет"; // "string"
typeof 42;       // "number"
typeof true;     // "boolean"
typeof null;     // "object" (!)
typeof undefined;// "undefined"
\`\`\`

> Важно: \`typeof null\` возвращает \`"object"\` — это историческая ошибка в языке.

---

## Преобразование типов (type conversion)

JavaScript автоматически **преобразует значения** при необходимости — это называется **неявное преобразование**.

\`\`\`js
"5" + 2;  // "52" — 2 преобразуется в строку
"5" - 2;  // 3   — "5" преобразуется в число
\`\`\`

> JavaScript «подстраивается», и иногда результат может удивить.

---

## Boolean: как значения становятся true или false

Функция \`Boolean()\` помогает узнать, какое значение считается **истинным** (truthy), а какое — **ложным** (falsy).

**Ложными значениями (false) считаются:**

- \`false\` — само по себе
- \`0\` — как отсутствие количества
- \`""\` — пустая строка
- \`null\` — "ничего"
- \`undefined\` — значение не задано
- \`NaN\` — "не число"

**Истинные значения (true):**

- Все, что не falsy. Например: \`1\`, \`"текст"\`, \`[]\`, \`{}\`, \`true\`

### Почему так?

- \`0\` — как пустое значение, отсутствие количества → false
- \`1\` — есть значение, не ноль → true
- \`NaN\` — результат ошибки → false (нельзя положиться на это значение)
- \`undefined\` — переменная существует, но без значения → false
- \`null\` — специально задано как "ничего" → false

\`\`\`js
Boolean(0);         // false
Boolean(1);         // true
Boolean("");        // false
Boolean("hi");      // true
Boolean(undefined); // false
Boolean(null);      // false
Boolean(NaN);       // false
\`\`\`

---

## typeof и преобразование вручную

#### Проверка типа:

\`\`\`js
let x = 5;
console.log(typeof x); // number
\`\`\`

#### Преобразование в строку:

\`\`\`js
String(123);     // "123"
true.toString(); // "true"
\`\`\`

#### Преобразование в число:

\`\`\`js
Number("42");    // 42
Number(true);    // 1
Number("abc");   // NaN
\`\`\`

---

## Пример из жизни

Представьте магазин. Вы спрашиваете: «Сколько у вас товара?»  
- Если ответ **0**, значит товара **нет** → \`false\`
- Если **1** или больше — товар **есть** → \`true\`

Или так:  
- \`null\` — "не заказано"  
- \`undefined\` — "не заполнено"  
- \`NaN\` — "ошибка в заказе"

---

## Таблица: тип и логическое значение

| Значение      | typeof     | Boolean() |
|---------------|------------|-----------|
| "Привет"      | "string"   | true      |
| ""            | "string"   | false     |
| 0             | "number"   | false     |
| 42            | "number"   | true      |
| null          | "object"   | false     |
| undefined     | "undefined"| false     |
| NaN           | "number"   | false     |
| true / false  | "boolean"  | true/false |

---

## Вывод

JavaScript — гибкий язык, и он сам преобразует типы значений. Чтобы не было путаницы, важно понимать:

- какие значения считаются "пустыми" или "ложными"
- как использовать \`typeof\` для проверки
- когда выполнять преобразование вручную

  `.trim(),

  codeExampleJS: `
console.log(typeof "hello");    // string
console.log(typeof 100);        // number
console.log(typeof false);      // boolean
console.log(typeof null);       // object
console.log(typeof undefined);  // undefined

console.log(String(true));      // "true"
console.log(Number("123"));     // 123
console.log(Boolean(""));       // false
console.log(Boolean("text"));   // true
console.log(Boolean(NaN));      // false
console.log(Boolean(undefined));// false
  `.trim(),

  resources: [
    "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/typeof",
    "https://learn.javascript.ru/type-conversions",
  ],
};
export const js_variablesAndTypes_6 = {
  id: "js_variablesAndTypes_6",
  title: "Почему у строк и чисел есть методы?",
  content: `
В JavaScript строки (\`string\`) и числа (\`number\`) — это **примитивные типы**. Но они ведут себя **как объекты**: у них есть методы и свойства.

Почему так происходит?
Когда ты обращаешься к методу, например:
\`\`\`js
"текст".toUpperCase()
\`\`\`
JavaScript **временно оборачивает примитив** во "встроенный объект-обёртку" (String или Number) — и вызывает нужный метод. После этого объект-обёртка удаляется, а результат возвращается.

---

## Методы строк (string)

Наиболее часто используемые методы:

| Метод               | Описание                        | Пример                                 |
|---------------------|---------------------------------|----------------------------------------|
| \`length\`            | Длина строки                    | \`"привет".length → 6\`                |
| \`toUpperCase()\`     | В верхний регистр               | \`"привет".toUpperCase() → "ПРИВЕТ"\`  |
| \`toLowerCase()\`     | В нижний регистр                | \`"HELLO".toLowerCase() → "hello"\`    |
| \`includes()\`        | Содержит ли подстроку           | \`"привет".includes("ви") → true\`     |
| \`indexOf()\`         | Позиция подстроки               | \`"привет".indexOf("в") → 3\`          |
| \`slice(start, end)\` | Извлечь подстроку               | \`"привет".slice(1, 4) → "рив"\`       |
| \`trim()\`            | Удалить пробелы по краям        | \`"  текст  ".trim() → "текст"\`       |
| \`replace(a, b)\`     | Заменить часть строки           | \`"кот".replace("к", "п") → "пот"\`    |
| \`split()\`           | Разбить строку в массив         | \`"a,b,c".split(",") → ["a","b","c"]\` |
| \`charAt(index)\`     | Символ по индексу               | \`"abc".charAt(1) → "b"\`              |

---

## Методы чисел (number)

Часто используемые методы и свойства:

| Метод / Свойство            | Описание                                      | Пример                           |
|-----------------------------|-----------------------------------------------|----------------------------------|
| \`toFixed(n)\`                | Округление с \`n\` знаками после запятой        | \`3.1415.toFixed(2) → "3.14"\`   |
| \`toString()\`                | Преобразование числа в строку                 | \`(42).toString() → "42"\`       |
| \`parseInt()\` *(глобальная)* | Преобразует строку в целое число              | \`parseInt("42px") → 42\`        |
| \`parseFloat()\` *(глобальная)*| Преобразует строку в число с точкой           | \`parseFloat("3.14м") → 3.14\`   |
| \`isNaN()\` *(глобальная)*    | Проверяет, является ли значение NaN           | \`isNaN("abc") → true\`          |
| \`Number.isInteger()\`        | Проверка: целое ли число                      | \`Number.isInteger(5) → true\`   |

> \`parseInt\`, \`parseFloat\`, \`isNaN\` — это глобальные функции, но очень часто используются с числами.

---

## Примеры из жизни

**Подсчёт баллов:**
\`\`\`js
let score = 99.678;
console.log(score.toFixed(1)); // "99.7"
\`\`\`

**Обработка форм:**
\`\`\`js
let price = "199.50";
let result = parseFloat(price) + 10;
console.log(result); // 209.5
\`\`\`

**Работа с текстом:**
\`\`\`js
let name = "  Алексей ";
console.log(name.trim().toUpperCase()); // "АЛЕКСЕЙ"
\`\`\`

---

## Вывод

Хотя строки и числа — **примитивные типы**, у них есть множество удобных методов для работы с текстом и числами. Это достигается благодаря временным объектам-обёрткам, что делает JavaScript очень гибким и удобным для обработки данных.
  `.trim(),

  codeExampleJS: `
console.log("hello".toUpperCase());    // "HELLO"
console.log("  abc  ".trim());         // "abc"
console.log("abc,def".split(","));     // ["abc", "def"]

console.log((3.1415).toFixed(2));      // "3.14"
console.log(parseInt("123abc"));       // 123
console.log(Number.isInteger(10.5));   // false
  `.trim(),

  resources: [
    "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String",
    "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "https://learn.javascript.ru/string",
    "https://learn.javascript.ru/number",
  ],
};
