export const js_cycles_1 = {
  id: "js_cycles_1",
  title: "Цикл while",
  content: `
## Что такое цикл

В программировании цикл — это способ повторять действия много раз, пока выполняется определённое условие.

Вместо того чтобы копировать один и тот же код 10 раз — можно написать его один раз в теле цикла, и программа будет запускать его снова и снова.

---

### Зачем нужен цикл

Допустим, тебе нужно 5 раз вывести «Привет»:

\`\`\`js
console.log("Привет");
console.log("Привет");
console.log("Привет");
console.log("Привет");
console.log("Привет");
\`\`\`

Это неудобно. Вместо этого можно использовать цикл \`while\`, чтобы повторить одно и то же действие несколько раз.

---

### Синтаксис while

\`\`\`js
while (условие) {
  // тело цикла: код, который будет повторяться
}
\`\`\`

**Как работает:**
- Проверяется условие
- Если оно true — выполняется тело цикла
- Потом снова проверяется условие
- Если снова true — тело выполняется ещё раз
- Если условие становится false — цикл останавливается

---

\`\`\`js
let count = 1;

while (count <= 5) {
  console.log("Привет", count);
  count = count + 1;
}
\`\`\`

**Результат:**
Привет 1  
Привет 2  
Привет 3  
Привет 4  
Привет 5

**Объяснение:**
- Переменная count начинается с 1
- Пока count <= 5 — цикл продолжается
- В теле цикла мы выводим текст и увеличиваем счётчик
- Как только count становится больше 5 — цикл останавливается

---

### Важно: условие и обновление переменной

Если ты забудешь обновлять переменную, то условие никогда не станет ложным, и цикл будет вечным:

\`\`\`js
let i = 1;

while (i <= 5) {
  console.log(i); // бесконечный цикл, если забыть i++
}
\`\`\`

Это приведёт к зависанию программы. Всегда убедись, что переменная меняется и условие может стать false.

---

### Пример: обратный отсчёт

\`\`\`js
let seconds = 5;

while (seconds > 0) {
  console.log("Осталось секунд:", seconds);
  seconds = seconds - 1;
}
\`\`\`

**Результат:**
Осталось секунд: 5  
Осталось секунд: 4  
Осталось секунд: 3  
Осталось секунд: 2  
Осталось секунд: 1

---

### Практический пример: сумма чисел

Суммируем числа от 1 до 5:

\`\`\`js
let sum = 0;
let num = 1;

while (num <= 5) {
  sum = sum + num;
  num = num + 1;
}

console.log("Сумма:", sum); // 15
\`\`\`

**Разберём этот код пошагово:**
- \`let sum = 0;\`   // начальное значение суммы
- \`let num = 1;\`   // начальное число, с которого начинаем счёт

\`\`\`js
while (num <= 5) {
  sum = sum + num; // прибавляем текущее число к сумме
  num = num + 1;   // увеличиваем число на 1
}

console.log("Сумма:", sum);
\`\`\`

**Что происходит:**

| Итерация | num | sum = sum + num                     |
| -------- | --- | ----------------------------------- |
| 1        | 1   | 0 + 1 = 1                           |
| 2        | 2   | 1 + 2 = 3                           |
| 3        | 3   | 3 + 3 = 6                           |
| 4        | 4   | 6 + 4 = 10                          |
| 5        | 5   | 10 + 5 = 15                         |
| 6        | 6   | num <= 5 → false → выход из цикла   |

Далее в консоли мы видим "Сумма: 15", так как наш цикл каждый раз перезаписывал sum.

---

### Когда использовать while

Цикл while удобен, когда:
- ты не знаешь заранее, сколько раз нужно повторять;
- условие зависит от чего-то, что может измениться в процессе (например, ввод пользователя, состояние игры и т.п.).

---

### Заключение

- while повторяет действия пока условие истинно
- Не забудь менять переменные внутри цикла, иначе будет бесконечный цикл
- Часто используется для простых и неизвестных заранее повторений
  `,
  codeExampleJS: `
let count = 1;
while (count <= 5) {
  console.log("Привет", count);
  count = count + 1;
}

let seconds = 5;
while (seconds > 0) {
  console.log("Осталось секунд:", seconds);
  seconds = seconds - 1;
}

let sum = 0;
let num = 1;
while (num <= 5) {
  sum = sum + num;
  num = num + 1;
}
console.log("Сумма:", sum); // 15
  `,
  resources: [
    "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/while",
    "https://learn.javascript.ru/while-for#tsikl-while",
  ],
};
export const js_cycles_2 = {
  id: "js_cycles_2",
  title: "Цикл do...while",
  content: `
## Что такое do...while

Цикл **do...while** — это вариант цикла, который:

- сначала выполняет тело цикла
- а потом проверяет условие

То есть, действие произойдёт хотя бы один раз, даже если условие с самого начала ложно.

---

### Синтаксис

\`\`\`js
do {
  // действия (тело цикла)
} while (условие);
\`\`\`

---

### Отличие от while

- В \`while\` сначала проверяется условие, потом выполняется тело.
- В \`do...while\` сначала выполняется тело, потом проверяется условие.

---

### Пример: вывод чисел от 1 до 5

\`\`\`js
let num = 1;

do {
  console.log("Число:", num);
  num = num + 1;
} while (num <= 5);
\`\`\`

**Результат:**
Число: 1  
Число: 2  
Число: 3  
Число: 4  
Число: 5

---

### Пример: условие ложное с самого начала

\`\`\`js
let count = 10;

do {
  console.log("Сработало");
} while (count < 5);
\`\`\`

**Результат:**
Сработало

**Почему?**

Даже если \`count < 5\` — это \`false\`, тело цикла сначала выполнится один раз.  
Только потом произойдёт проверка.

---

### Где может пригодиться

Цикл do...while полезен там, где:

- ты всегда хочешь выполнить действие хотя бы один раз (например, показать меню, спросить ввод)
- но не уверен, нужно ли повторять его снова — это решается условием

---

### Сравнение: while и do...while

| Особенность                | while | do...while       |
| -------------------------- | ------- | ------------------ |
| Проверка перед выполнением | Да      | Нет                |
| Гарантированное выполнение | Нет     | Да (хотя бы 1 раз) |
  `,
  codeExampleJS: `
let num = 1;

do {
  console.log("Число:", num);
  num = num + 1;
} while (num <= 5);

let count = 10;

do {
  console.log("Сработало");
} while (count < 5);
  `,
  resources: [
    "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/do...while",
    "https://learn.javascript.ru/while-for#do-while",
  ],
};
export const js_cycles_3 = {
  id: "js_cycles_3",
  title: "Цикл for",
  content: `
## Что такое for

\`for\` — это цикл со счётчиком.  
Он позволяет повторять блок кода определённое количество раз, обычно с переменной, которая увеличивается на каждом шаге.

Он чаще используется, чем \`while\`, потому что вся логика цикла записывается в одной строке.

---

### Синтаксис цикла for

\`\`\`js
for (начало; условие; шаг) {
  // тело цикла
}
\`\`\`

- **начало** — создаётся переменная-счётчик (например, let i = 0)
- **условие** — пока оно true, цикл продолжается
- **шаг** — изменение переменной (обычно i++)

---

### Простой пример: вывести числа от 1 до 5

\`\`\`js
for (let i = 1; i <= 5; i++) {
  console.log("Число:", i);
}
\`\`\`

**Результат:**
Число: 1  
Число: 2  
Число: 3  
Число: 4  
Число: 5

---

### Как работает по шагам

1. \`let i = 1\` — создаётся переменная
2. \`i <= 5\` — проверяется условие
3. Если true, выполняется тело цикла
4. Потом срабатывает \`i++\` — счётчик увеличивается
5. Снова проверяется условие
6. Если условие false, цикл заканчивается

---

### Пример: сумма чисел от 1 до 5

\`\`\`js
let sum = 0;

for (let i = 1; i <= 5; i++) {
  sum = sum + i;
}

console.log("Сумма:", sum); // 15
\`\`\`

---

### Вывод чётных чисел от 2 до 10

\`\`\`js
for (let i = 2; i <= 10; i += 2) {
  console.log(i);
}
\`\`\`

---

### Сравнение с while

Тот же цикл можно написать так:

\`\`\`js
let i = 1;
while (i <= 5) {
  console.log(i);
  i++;
}
\`\`\`

Но \`for\` — короче и читабельнее, если ты точно знаешь, сколько шагов будет.

---

### Пример из жизни: проверка 3 попыток входа

\`\`\`js
for (let attempt = 1; attempt <= 3; attempt++) {
  console.log("Попытка входа №", attempt);
}
\`\`\`

---

### Переменная i

Обычно используют \`i\` как имя счётчика (\`i = index\`),  
но можно назвать переменную как угодно: \`let count\`, \`let step\`, \`let page\`.

---

### Вложенный пример: таблица умножения на 3

\`\`\`js
for (let i = 1; i <= 10; i++) {
  console.log("3 ×", i, "=", 3 * i);
}
\`\`\`

---

### Итог

- \`for\` — цикл со счётчиком
- Вся логика (начало, условие, шаг) пишется в одной строке
- Удобен, когда точно знаешь, сколько раз повторять
- Читается легко, часто используется в реальных проектах

---

### Таблица сравнения: while vs do...while vs for

| Критерий                              | while                              | do...while                         | for                                          |
| -------------------------------------- | ---------------------------------- | ---------------------------------- | -------------------------------------------- |
| Когда проверяется условие              | До входа в цикл                    | После первого выполнения           | До каждой итерации                           |
| Минимальное количество выполнений      | 0 (если условие сразу false)       | 1 (всегда хотя бы один раз)        | 0 (если условие сразу false)                 |
| Типичная задача                        | Повторять, пока не выполнено условие | Запросить ввод, как минимум один раз | Перебор счётчика, точное количество итераций |
| Где объявляется счётчик                | Вне цикла                          | Вне цикла                          | Внутри объявления цикла                      |
| Контроль выполнения                    | Условие + ручное обновление счётчика | Условие + ручное обновление счётчика | Всё в одной строке (счётчик, условие, шаг)   |
| Удобство чтения                        | Среднее (разбито на части)         | Ниже среднего (мало используется)  | Высокое (всё видно сразу)                    |
| Часто используется в                   | Неопределённое число повторений    | Ввод пользователя, форматы меню    | Массивы, индексы, фиксированное число повторов |
  `,
  codeExampleJS: `
for (let i = 1; i <= 5; i++) {
  console.log("Число:", i);
}

let sum = 0;
for (let i = 1; i <= 5; i++) {
  sum = sum + i;
}
console.log("Сумма:", sum); // 15

for (let i = 2; i <= 10; i += 2) {
  console.log(i);
}

for (let attempt = 1; attempt <= 3; attempt++) {
  console.log("Попытка входа №", attempt);
}

for (let i = 1; i <= 10; i++) {
  console.log("3 ×", i, "=", 3 * i);
}
  `,
  resources: [
    "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/for",
    "https://learn.javascript.ru/while-for#tsikl-for",
  ],
};
export const js_cycles_4 = {
  id: "js_cycles_4",
  title: "Операторы break и continue",
  content: `
## Что такое break и continue

В JavaScript можно управлять выполнением цикла не только через условие, но и с помощью специальных операторов:

| Оператор   | Что делает                                            |
| ---------- | ----------------------------------------------------- |
| break      | Полностью останавливает выполнение цикла              |
| continue   | Прерывает текущую итерацию и переходит к следующей    |

---

### 1. break

Его мы уже встречали в теме "Оператор switch".  
\`break\` используется, когда нужно выйти из цикла досрочно.  
Цикл прерывается сразу, даже если условие всё ещё \`true\`.

**Пример: найти первое число, делящееся на 7**

\`\`\`js
for (let i = 1; i <= 100; i++) {
  if (i % 7 === 0) {
    console.log("Нашли число:", i);
    break; // прекращаем цикл после первого найденного
  }
}
\`\`\`

Цикл завершится после первого числа, делящегося на 7 — это будет 7.

---

**Пример с while**

\`\`\`js
let number = 0;

while (true) {
  if (number === 3) {
    break;
  }
  console.log(number);
  number++;
}
\`\`\`

\`0\`  
\`1\`  
\`2\`

Когда number становится равным 3, условие if срабатывает, и break выходит из цикла.

---

### 2. continue

\`continue\` пропускает текущую итерацию и сразу переходит к следующей, не выполняя остальной код внутри тела цикла.

**Пример: вывести только нечётные числа от 1 до 5**

\`\`\`js
for (let i = 1; i <= 5; i++) {
  if (i % 2 === 0) {
    continue; // если число чётное — пропускаем вывод
  }
  console.log(i);
}
\`\`\`

\`1\`  
\`3\`  
\`5\`

---

### Как работает continue

\`\`\`js
for (let i = 0; i < 3; i++) {
  console.log("Начало итерации", i);
  if (i === 1) {
    continue;
  }
  console.log("Конец итерации", i);
}
\`\`\`

Начало итерации 0  
Конец итерации 0  
Начало итерации 1  
Начало итерации 2  
Конец итерации 2

На i === 1 сработал continue, и строка "Конец итерации" не выполнилась.

---

### Когда использовать

| Задача                           | Оператор   |
| -------------------------------- | ---------- |
| Найти первое подходящее значение | break      |
| Пропустить ненужные значения     | continue   |
| Прервать бесконечный цикл        | break      |

---

### Важно

- Оба оператора работают только внутри цикла
- \`break\` выводит из цикла полностью
- \`continue\` только пропускает текущий шаг

---

### Заключение

- Используй \`break\`, когда нужно досрочно остановить цикл
- Используй \`continue\`, когда нужно пропустить итерацию

Это мощные инструменты для гибкого управления логикой.
  `,
  codeExampleJS: `
for (let i = 1; i <= 100; i++) {
  if (i % 7 === 0) {
    console.log("Нашли число:", i);
    break;
  }
}

let number = 0;
while (true) {
  if (number === 3) {
    break;
  }
  console.log(number);
  number++;
}

for (let i = 1; i <= 5; i++) {
  if (i % 2 === 0) {
    continue;
  }
  console.log(i);
}

for (let i = 0; i < 3; i++) {
  console.log("Начало итерации", i);
  if (i === 1) {
    continue;
  }
  console.log("Конец итерации", i);
}
  `,
  resources: [
    "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/break",
    "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/continue",
    "https://learn.javascript.ru/while-for#break-i-continue",
  ],
};
export const js_cycles_5 = {
  id: "js_cycles_5",
  title: "Вложенные циклы",
  content: `
## Что такое вложенные циклы

**Вложенные циклы** — это ситуация, когда один цикл находится внутри другого.  
Такой подход используется, когда нужно выполнить повторение внутри повторения.

**Например:**
- рисовать таблицу: строки и ячейки
- создавать комбинации значений
- проверять все пары элементов

---

### Пример: таблица из чисел (2 строки по 3 столбца)

\`\`\`js
for (let row = 1; row <= 2; row++) {
  for (let col = 1; col <= 3; col++) {
    console.log("Строка:", row, "Колонка:", col);
  }
}
\`\`\`

**Результат:**
Строка: 1 Колонка: 1  
Строка: 1 Колонка: 2  
Строка: 1 Колонка: 3  
Строка: 2 Колонка: 1  
Строка: 2 Колонка: 2  
Строка: 2 Колонка: 3

---

### Как это работает

- Внешний цикл (\`row\`) запускается → row = 1
- Внутренний цикл (\`col\`) выполняется полностью (col = 1 → 2 → 3)
- Внешний цикл делает следующий шаг → row = 2
- Внутренний снова выполняется с col = 1 → 2 → 3

---

### Вложенные while тоже возможны

\`\`\`js
let i = 1;
while (i <= 2) {
  let j = 1;
  while (j <= 3) {
    console.log("i =", i, "j =", j);
    j++;
  }
  i++;
}
\`\`\`

---

### Как представить: "цикл внутри цикла"

Представь:  
Ты делаешь каждую строку таблицы, а в каждой строке — печатаешь ячейки.

---

### Где используется на практике

- генерация таблиц
- работа с координатами (x, y)
- анализ всех возможных пар (вложенный поиск)
- алгоритмы сортировки, сравнения

---

### Важно

- У каждого цикла должны быть свои переменные (например, i, j)
- Следи, чтобы внутренний цикл корректно завершался, иначе может быть бесконечный цикл
- Можно использовать break и continue в любом уровне цикла, но они влияют только на ближайший цикл

---

### Пример с continue во вложенных циклах

\`\`\`js
for (let i = 1; i <= 3; i++) {
  for (let j = 1; j <= 3; j++) {
    if (j === 2) continue;
    console.log(i, j);
  }
}
\`\`\`

Пропускается j = 2 внутри каждого внешнего цикла.

---

### Заключение

- Вложенные циклы позволяют создавать многомерные структуры
- Самое важное — понимать, как один цикл выполняется полностью внутри другого
- Это основа многих алгоритмов и задач
  `,
  codeExampleJS: `
for (let row = 1; row <= 2; row++) {
  for (let col = 1; col <= 3; col++) {
    console.log("Строка:", row, "Колонка:", col);
  }
}

let i = 1;
while (i <= 2) {
  let j = 1;
  while (j <= 3) {
    console.log("i =", i, "j =", j);
    j++;
  }
  i++;
}

for (let i = 1; i <= 3; i++) {
  for (let j = 1; j <= 3; j++) {
    if (j === 2) continue;
    console.log(i, j);
  }
}
  `,
  resources: [
    "https://learn.javascript.ru/while-for#vlozhennye-tsikly",
    "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Loops_and_iteration",
  ],
};
