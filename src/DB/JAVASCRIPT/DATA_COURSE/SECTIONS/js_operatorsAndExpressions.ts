export const js_operatorsAndExpressions_1 = {
  id: "js_operators_1",
  title: "Арифметические операторы",
  content: `
## Что такое арифметические операторы

Арифметические операторы — это символы, с помощью которых можно выполнять математические действия над числами. Такие действия как сложение, вычитание, умножение и деление называются арифметическими операциями, а числа, с которыми мы работаем, называются операндами.

**Оператор** — это знак, который указывает, что нужно сделать с операндами.  
**Операнд** — это значение (обычно число), над которым выполняется операция.

---

### Основные арифметические операторы в JavaScript

| Оператор | Название             | Пример   | Результат |
| -------- | -------------------- | -------- | --------- |
| +        | Сложение             | 5 + 2     | 7         |
| -        | Вычитание            | 5 - 2     | 3         |
| *        | Умножение            | 5 * 2     | 10        |
| /        | Деление              | 10 / 2    | 5         |
| %        | Остаток деления      | 7 % 3     | 1         |
| **       | Возведение в степень | 2 ** 3    | 8         |

---

### Примеры:

\`\`\`js
let a = 10;
let b = 3;

console.log(a + b); // 13
console.log(a - b); // 7
console.log(a * b); // 30
console.log(a / b); // 3.333...
console.log(a % b); // 1
console.log(2 ** 4); // 16
\`\`\`

---

### Важные замечания

#### Деление на ноль (/ 0) даёт специальное значение Infinity или -Infinity.

#### Остаток может быть полезен, например, для определения чётных и нечётных чисел:

\`\`\`js
let number = 7;
let isEven = number % 2 === 0; // false — число нечётное
\`\`\`

---

### Подводные камни при работе с арифметическими операторами

#### 1. Сложение строк и чисел (+ — перегруженный оператор)

В JavaScript оператор + может выполнять не только сложение чисел, но и конкатенацию строк. Это может привести к неожиданным результатам.

\`\`\`js
console.log(2 + 3);       // 5 — обычное сложение чисел
console.log("2" + 3);     // "23" — строка, потому что "2" — строка
console.log(2 + "3");     // "23" — тоже строка
\`\`\`

> **Важно:** если хотя бы один из операндов — строка, + превращает второй операнд в строку и "склеивает" их.

#### 2. Другие операторы (-, *, /, %) работают только с числами

Если попытаться вычитать строку, JavaScript попытается привести строку к числу:

\`\`\`js
console.log("10" - 5);  // 5 — строка "10" преобразована в число
console.log("10" * "2"); // 20 — обе строки преобразованы в числа
console.log("abc" - 1); // NaN — строка "abc" не может быть преобразована
\`\`\`

#### 3. Деление на ноль

\`\`\`js
console.log(10 / 0);   // Infinity
console.log(-10 / 0);  // -Infinity
console.log(0 / 0);    // NaN
\`\`\`

Деление на ноль не вызывает ошибку, но может повлиять на логику.  
**Infinity** — специальное значение, а не ошибка.  
**0 / 0** не имеет смысла, поэтому даёт **NaN**.

#### 4. Плавающая точка и погрешности

JavaScript использует стандарт IEEE 754 для работы с числами с плавающей точкой, из-за чего возможны погрешности при вычислениях:

\`\`\`js
console.log(0.1 + 0.2); // 0.30000000000000004 — неожиданно!
console.log(0.3 === 0.1 + 0.2); // false
\`\`\`

Почему так? В двоичной системе не все десятичные дроби можно точно представить. Это как если бы ты пытался точно выразить 1/3 десятичной дробью — получится бесконечная 0.333...

**Решение:** округлять значения, если это важно.

\`\`\`js
let sum = 0.1 + 0.2;
console.log(Number(sum.toFixed(1))); // 0.3
\`\`\`

Метод \`toFixed(n)\` используется, чтобы округлить число до \`n\` знаков после запятой.

#### 5. Преобразование типов: null, undefined, true, false

Иногда к числам прибавляют значения других типов:

\`\`\`js
console.log(5 + null);      // 5 — null преобразуется в 0
console.log(5 + undefined); // NaN — undefined не преобразуется
console.log(5 + true);      // 6 — true → 1
console.log(5 + false);     // 5 — false → 0
\`\`\`

#### 6. Унарный + и - — приведение к числу

\`\`\`js
console.log(+"10");   // 10 — строка "10" превращается в число
console.log(+"abc");  // NaN — невалидная строка
console.log(+true);   // 1
console.log(+false);  // 0
console.log(-"7");    // -7
\`\`\`

**Унарный +** — это простой способ преобразовать значение в число.

#### 7. NaN — заразное значение

Если в выражении участвует NaN, результат тоже NaN:

\`\`\`js
let badValue = "abc" - 1; // NaN
console.log(badValue + 5); // NaN
console.log(badValue * 2); // NaN
\`\`\`

#### 8. Остаток (%) с отрицательными числами

\`\`\`js
console.log(10 % 3);   // 1
console.log(-10 % 3);  // -1
console.log(10 % -3);  // 1
console.log(-10 % -3); // -1
\`\`\`

Знак остатка всегда совпадает со знаком делимого (первого числа).

### Вывод

Арифметические операторы — это основа математических вычислений в JavaScript. Важно понимать, как они работают, какие бывают исключения и как обрабатываются разные типы значений.
`,

  codeExampleJS: `
let a = 10;
let b = 3;

console.log(a + b); // 13
console.log(a - b); // 7
console.log(a * b); // 30
console.log(a / b); // 3.333...
console.log(a % b); // 1
console.log(2 ** 4); // 16
  `,

  resources: [
    "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators",
    "https://learn.javascript.ru/operators",
  ],
};
