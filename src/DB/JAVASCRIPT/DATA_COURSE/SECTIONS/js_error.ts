export const js_error_1 = {
  id: "js_error_1",
  title: "Что такое ошибка",
  content: `
## Ошибки в JavaScript

В процессе выполнения программ на JavaScript (как и в любом другом языке программирования) могут возникать ошибки.

**Ошибка** — это ситуация, при которой выполнение кода не может продолжаться как задумано.  
Ошибки могут быть результатом:
- неправильного синтаксиса,
- логической ошибки в алгоритме,
- отсутствия нужных данных,
- внешних сбоев (например, ошибка сети).

---

### Зачем важно понимать ошибки?

Ошибки — неотъемлемая часть программирования.  
Умение распознавать и понимать сообщения об ошибках помогает:
- быстрее находить и исправлять проблемы в коде;
- писать более устойчивые программы;
- понимать, почему программа "ведёт себя не так, как ожидалось".

---

## Основные виды ошибок

### 1. Синтаксические ошибки (\`SyntaxError\`)

Возникают, когда нарушены правила синтаксиса языка.

\`\`\`js
let name = 'Иван
console.log(name);
\`\`\`
**Ошибка:**  
Uncaught SyntaxError: Invalid or unexpected token

---

### 2. Ошибки времени выполнения (\`Runtime Error\`)

Появляются во время работы кода, когда синтаксис в порядке, но действие невозможно.

\`\`\`js
let user = null;
console.log(user.name);
\`\`\`
**Ошибка:**  
Uncaught TypeError: Cannot read properties of null (reading 'name')

---

### 3. Логические ошибки (\`Logic Error\`)

Код выполняется без ошибок, но выдаёт неправильный результат.

\`\`\`js
function getDiscount(price) {
  return price * 0.2; // ошибка: это наценка, а не скидка!
}
console.log(getDiscount(100)); // 20, а ожидали 80
\`\`\`
**Такие ошибки сложнее заметить — программа не падает, но работает неверно.**

---

### 4. Ошибки внешней среды

Происходят из-за проблем вне вашего кода (например, сбой сети, ошибка сервера).

\`\`\`js
fetch('https://example.com/api/data')
  .then(res => res.json())
  .then(data => console.log(data))
  .catch(err => console.error(err));
\`\`\`
Если сервер недоступен — ошибка попадёт в \`.catch()\`.

---

### Где возникают ошибки?

- В браузере (на клиенте)
- На сервере (Node.js, backend API)
- В самом коде JavaScript
- В сторонних библиотеках и скриптах

---

## Вывод

Ошибки — это не повод паниковать, а инструмент обучения и отладки.  
Любой разработчик сталкивается с ошибками — главное научиться их читать, понимать и устранять.
  `.trim(),

  codeExampleJS: `
try {
  let user = null;
  console.log(user.name); // Ошибка времени выполнения
} catch (err) {
  console.error("Произошла ошибка:", err.message);
}
  `.trim(),

  resources: [
    "https://learn.javascript.ru/errors",
    "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Control_flow_and_error_handling",
  ],
};
export const js_error_2 = {
  id: "js_error_2",
  title: "Ошибки компиляции и выполнения",
  content: `
## Ошибки компиляции и выполнения

В JavaScript принято делить ошибки по моменту их возникновения:

- **Ошибки компиляции** (синтаксические)
- **Ошибки выполнения** (во время выполнения)

---

### 1. Ошибки компиляции (SyntaxError)

Хотя JavaScript — интерпретируемый язык, перед запуском код проходит фазу синтаксической проверки.  
**Синтаксические ошибки** возникают, если код написан с нарушением правил языка.

- Такие ошибки появляются до запуска программы.
- Код с синтаксической ошибкой не выполнится вовсе.

**Пример:**
\`\`\`js
let a = 5
console.log(a // пропущена закрывающая скобка
\`\`\`
**Ошибка:**  
Uncaught SyntaxError: Unexpected end of input

**Другой пример:**
\`\`\`js
function() {
  console.log('Привет');
}
\`\`\`
**Ошибка:**  
Uncaught SyntaxError: Function statements require a function name

**Такие ошибки легко узнать по типу \`SyntaxError\` в консоли.**

---

### 2. Ошибки выполнения (RuntimeError)

Если синтаксис кода верный, но во время работы возникает проблема, появляется **ошибка выполнения**.

- Программа запускается, но "падает" на определённом этапе.

**Пример:**
\`\`\`js
let obj = null;
console.log(obj.name); // Ошибка!
\`\`\`
**Ошибка:**  
Uncaught TypeError: Cannot read properties of null (reading 'name')

**Другой пример:**
\`\`\`js
let numbers = [1, 2, 3];
console.log(numbers[10].toString());
\`\`\`
**Ошибка:**  
Uncaught TypeError: Cannot read properties of undefined (reading 'toString')

---

### Сравнение

| Тип ошибки     | Когда возникает     | Пример                 | Обрабатывается в коде |
| -------------- | ------------------- | ---------------------- | --------------------- |
| Синтаксическая | До выполнения       | Отсутствие скобки      | Нет                   |
| Выполнения     | Во время выполнения | Чтение свойства у null | Да (try/catch)        |

---

### Как обрабатывать такие ошибки

- **Синтаксические ошибки** нужно исправлять вручную — они всегда видны в консоли разработчика.
- **Ошибки выполнения** можно перехватывать с помощью \`try...catch\` (об этом — в отдельной теме).

---

**Вывод:**  
Синтаксические ошибки не дадут коду стартовать, а ошибки выполнения возникают уже во время работы программы. Оба типа ошибок важно научиться различать и устранять.
  `.trim(),

  codeExampleJS: `
try {
  let obj = null;
  // Ошибка выполнения
  console.log(obj.name); 
} catch (error) {
  console.error("Перехвачена ошибка:", error.message);
}
  `.trim(),

  resources: [
    "https://learn.javascript.ru/errors",
    "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Control_flow_and_error_handling",
  ],
};
export const js_error_3 = {
  id: "js_error_3",
  title: "Как читать сообщения об ошибках",
  content: `
## Как читать сообщения об ошибках

Когда в JavaScript возникает ошибка, браузер или среда выполнения выводит сообщение, которое помогает понять причину и место сбоя. Это важнейший инструмент для поиска и исправления ошибок.

---

### Структура сообщения об ошибке

Сообщение обычно содержит:
- **Тип ошибки** (Error Type)
- **Описание** (Error Message)
- **Файл, строку и символ**, где возникла ошибка
- **Стек вызовов** (если доступен)

**Пример сообщения:**
\`\`\`
Uncaught TypeError: Cannot read properties of null (reading 'name')
    at script.js:10:15
\`\`\`

**Разбор частей:**
- \`Uncaught TypeError\` — тип ошибки (здесь: операция недопустима для данного типа).
- \`Cannot read properties of null (reading 'name')\` — описание: попытка обратиться к свойству \`name\` у \`null\`.
- \`at script.js:10:15\` — ошибка произошла в файле \`script.js\`, строка 10, символ 15.

---

### Часто встречающиеся типы ошибок

| Тип ошибки      | Описание                                          |
| --------------- | ------------------------------------------------- |
| SyntaxError     | Синтаксическая ошибка, код не распознан           |
| TypeError       | Операция недопустима для данного типа данных      |
| ReferenceError  | Обращение к необъявленной переменной              |
| RangeError      | Значение вне допустимого диапазона                |
| EvalError       | Ошибка использования функции \`eval()\`           |
| URIError        | Ошибка работы с \`encodeURI\`, \`decodeURI\`      |

---

### Как использовать информацию из ошибки

1. **Тип ошибки**  
   — Например, \`ReferenceError\` указывает, что переменная не объявлена.

2. **Описание**  
   — Например, \`x is not defined\` — переменная \`x\` не определена.

3. **Файл и строка**  
   — Переходите к указанному месту в коде, чтобы найти и исправить ошибку.

---

### Пример разбора ошибки

\`\`\`js
function greet(user) {
  console.log('Привет, ' + user.name);
}
greet(null);
\`\`\`

**Сообщение:**
\`\`\`
Uncaught TypeError: Cannot read properties of null (reading 'name')
    at greet (script.js:2:32)
    at script.js:5:1
\`\`\`

**Разбор:**  
- В функции \`greet\` пытаемся обратиться к \`user.name\`
- \`user\` равен \`null\`, у \`null\` нет свойств
- Ошибка указывает место: \`script.js\`, строка 2, символ 32

---

### Вывод

Умение читать сообщения об ошибках:
- помогает быстро находить и исправлять проблемы;
- учит разбираться в причинах сбоя;
- делает вас более уверенным в работе с JavaScript.

**Ошибка — это не враг, а подсказка. Используйте её как помощника!**
  `.trim(),

  codeExampleJS: `
try {
  greet(null);
} catch (e) {
  console.error(e.message); // Cannot read properties of null (reading 'name')
}
  `.trim(),

  resources: [
    "https://learn.javascript.ru/errors",
    "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Control_flow_and_error_handling",
  ],
};
export const js_error_4 = {
  id: "js_error_4",
  title: "Инструменты отладки: console.log, console.error, debugger",
  content: `
## Инструменты отладки: console.log, console.error, debugger

Чтобы эффективно искать и исправлять ошибки в JavaScript, важно пользоваться встроенными инструментами. Вот три главных способа:

---

### 1. console.log()

\`console.log()\` — самый популярный способ посмотреть значения переменных, сообщений и результатов вычислений прямо в консоли браузера.

**Пример:**
\`\`\`js
let name = "Анна";
console.log("Имя пользователя:", name);
\`\`\`

В консоли увидите:  
\`Имя пользователя: Анна\`

**Зачем использовать:**  
- Проверить, чему равны переменные в процессе работы программы
- Проверить условия и вычисления
- Помогает понять, где именно происходит сбой

**Совет:**  
Пишите поясняющий текст, чтобы не путаться в выводе.

---

### 2. console.error()

\`console.error()\` работает как \`console.log()\`, но выделяет сообщение как ошибку — оно будет показано **красным** в консоли.

**Пример:**
\`\`\`js
let data = null;

if (data === null) {
  console.error("Ошибка: данные не загружены");
}
\`\`\`

**Когда использовать:**  
- Для фиксации важных ошибок, которые не приводят к остановке программы, но требуют внимания
- Чтобы отличать обычные логи от сообщений об ошибке

---

### 3. debugger

\`debugger\` — специальная команда, которая ставит "паузы" в коде. Когда выполнение дойдёт до этой строки, браузер откроет DevTools и остановит выполнение программы.

**Пример:**
\`\`\`js
let x = 5;
let y = 10;

debugger; // выполнение остановится здесь

let result = x + y;
console.log(result);
\`\`\`

**Что даёт:**  
- Пошаговое выполнение кода
- Просмотр значений всех переменных
- Анализ стека вызовов и контекста исполнения

> \`debugger\` работает только если DevTools открыты.

---

### Использование вместе

Инструменты можно и нужно комбинировать для глубокой отладки.

\`\`\`js
function calculatePrice(price, discount) {
  console.log("Цена до скидки:", price);
  console.log("Скидка:", discount);

  debugger;

  let finalPrice = price - discount;
  console.log("Итоговая цена:", finalPrice);
}
\`\`\`

---

### Краткая таблица

| Инструмент        | Назначение                            |
| ----------------- | ------------------------------------- |
| console.log()     | Общая отладка, проверка значений      |
| console.error()   | Подсветка важных ошибок               |
| debugger          | Пауза и пошаговый анализ выполнения   |

---

**Вывод:**  
Эти три инструмента — ваш первый шаг к эффективной отладке кода. Используйте их, чтобы быстрее находить и устранять ошибки, анализировать работу программ и понимать, что происходит "под капотом".
  `.trim(),

  codeExampleJS: `
let name = "Анна";
console.log("Имя:", name);         // Обычный лог

let user = null;
if (!user) {
  console.error("Ошибка: user не найден");
}

function sum(a, b) {
  debugger;                       // Остановить выполнение здесь
  return a + b;
}
sum(2, 3);
  `.trim(),

  resources: [
    "https://developer.mozilla.org/ru/docs/Web/API/Console",
    "https://learn.javascript.ru/devtools",
  ],
};
export const js_error_5 = {
  id: "js_error_5",
  title: "DevTools: Console, Sources, breakpoints и стек вызовов",
  content: `
## DevTools: Console, Sources, breakpoints и стек вызовов

Современные браузеры содержат встроенные инструменты разработчика (DevTools), которые позволяют изучать, отлаживать и оптимизировать JavaScript-код прямо в браузере.

---

### Вкладка Console

**Назначение:**  
- Просмотр логов, ошибок и любых сообщений из кода (\`console.log\`, \`console.error\`, \`console.warn\` и др.)
- Возможность писать и выполнять JavaScript-команды "на лету"
- Проверка переменных, выражений и состояния программы

**Пример:**
\`\`\`js
console.log("Начало программы");
let a = 10;
console.log("Значение переменной a:", a);
\`\`\`

**Возможности:**  
- Видеть все сообщения в хронологическом порядке
- Вводить команды и экспериментировать с кодом
- Проверять значения переменных мгновенно

---

### Вкладка Sources

**Назначение:**  
- Просмотр и анализ исходных JS-файлов
- Установка breakpoints (точек остановки) и отладка кода "вживую"
- Пошаговое выполнение скриптов

**Что можно делать:**  
- Открывать любой JS-файл, загруженный на страницу
- Ставить breakpoints (клик по номеру строки)
- Изучать значения переменных в любой момент исполнения
- Отслеживать стек вызовов (Call Stack)
- Менять значения переменных прямо во время паузы

---

### Как поставить breakpoint

1. Открой вкладку Sources
2. Найди нужный файл с кодом
3. Кликни по номеру строки — появится синяя точка
4. Когда выполнение дойдет до этой строки, скрипт остановится

---

### Работа с переменными

- Во время остановки скрипта можно:
  - Смотреть значения переменных справа (панель Scope)
  - Наводить мышкой на переменную прямо в коде — всплывает её значение
  - Менять значения прямо в консоли или Scope

---

### Стек вызовов (Call Stack)

**Стек вызовов** — это список всех функций, которые были вызваны до текущего места остановки.

**Зачем нужен:**  
- Понять, как программа пришла к этой точке
- Проследить цепочку вызовов функций
- Анализировать логику исполнения и искать ошибки

**Пример:**
\`\`\`js
function one() {
  two();
}
function two() {
  three();
}
function three() {
  debugger; // здесь остановится выполнение
}
one();
\`\`\`

Когда сработает \`debugger\`, стек вызовов будет:
- three
- two
- one
- (anonymous)

---

### Краткая таблица

| Раздел     | Возможности                                         |
| ---------- | --------------------------------------------------- |
| Console    | Просмотр логов, ошибок, выполнение команд           |
| Sources    | Исходный код, breakpoints, пошаговое выполнение     |
| Call Stack | Анализ цепочки вызовов функций                      |
| Scope      | Просмотр и изменение переменных в текущем контексте |

---

**Вывод:**  
DevTools — незаменимый инструмент для любого фронтенд-разработчика. Освойте его базовые возможности, чтобы быстро находить, анализировать и исправлять ошибки в JavaScript-программах.
  `.trim(),

  codeExampleJS: `
function one() {
  two();
}
function two() {
  three();
}
function three() {
  debugger; // Остановит выполнение
}
one();
// Проверьте стек вызовов и переменные в DevTools
  `.trim(),

  resources: [
    "https://learn.javascript.ru/devtools",
    "https://developer.chrome.com/docs/devtools/",
    "https://developer.mozilla.org/ru/docs/Tools",
  ],
};
