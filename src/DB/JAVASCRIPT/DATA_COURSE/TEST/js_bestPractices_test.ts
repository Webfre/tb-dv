export const js_bestPractices_test = {
  id: 520,
  name: "Лучшие практики JS: безопасность, чистый код, ошибки",
  category: "JavaScript",
  ques: [
    {
      id: 1,
      name: "Что такое XSS?",
      variants: [
        "Уязвимость, позволяющая внедрять вредоносный JS-код",
        "Сбои сети",
        "Ошибка синтаксиса в коде",
      ],
      correct: [0],
    },
    {
      id: 2,
      name: "Почему опасно использовать innerHTML для пользовательских данных?",
      variants: [
        "Можно исполнить вредоносный код",
        "Медленно работает",
        "Удаляет существующий HTML",
      ],
      correct: [0],
    },
    {
      id: 3,
      name: "Что делает textContent по сравнению с innerHTML?",
      variants: [
        "Вставляет только текст, не интерпретируя HTML",
        "Выполняет скрипты",
        "Вставляет HTML-код напрямую",
      ],
      correct: [0],
    },
    {
      id: 4,
      name: "Какой способ безопасен для вставки пользовательского комментария в DOM?",
      variants: [
        "element.textContent = userComment",
        "element.innerHTML = userComment",
        "element.outerHTML = userComment",
      ],
      correct: [0],
    },
    {
      id: 5,
      name: "Для чего используют библиотеку DOMPurify?",
      variants: [
        "Для очистки HTML от вредоносных скриптов",
        "Для ускорения работы сайта",
        "Для оптимизации CSS",
      ],
      correct: [0],
    },

    {
      id: 6,
      name: "Почему нельзя напрямую использовать пользовательский ввод?",
      variants: [
        "Может содержать вредоносный код или некорректные данные",
        "Медленно работает",
        "Это устаревшая практика",
      ],
      correct: [0],
    },
    {
      id: 7,
      name: "Какие данные считаются пользовательским вводом?",
      variants: [
        "Всё из форм, URL, localStorage, внешних API",
        "Только поля форм",
        "Только числа",
      ],
      correct: [0],
    },
    {
      id: 8,
      name: "Как защищаться от проблем с вводом?",
      variants: [
        "Валидация, экранирование, ограничение доверия",
        "Сохранять все вводы без проверки",
        "Очищать localStorage",
      ],
      correct: [0],
    },
    {
      id: 9,
      name: "Какой способ безопаснее для вывода данных пользователя в HTML?",
      variants: [
        "element.textContent = value",
        "element.innerHTML = value",
        "element.insertAdjacentHTML('beforeend', value)",
      ],
      correct: [0],
    },
    {
      id: 10,
      name: "Чем опасен следующий код?\ndocument.getElementById('output').innerHTML = userInput;",
      variants: [
        "userInput может содержать вредоносный HTML/JS",
        "Этот код всегда безопасен",
        "Вызовет ошибку",
      ],
      correct: [0],
    },

    {
      id: 11,
      name: "Для чего используется try...catch?",
      variants: [
        "Для перехвата и обработки ошибок в коде",
        "Для ускорения выполнения",
        "Для стилизации интерфейса",
      ],
      correct: [0],
    },
    {
      id: 12,
      name: "Что произойдет с программой без try...catch при ошибке?",
      variants: [
        "Программа завершится с ошибкой (упадёт)",
        "Ошибка будет проигнорирована",
        "Ошибка автоматически исправится",
      ],
      correct: [0],
    },
    {
      id: 13,
      name: "Что выполняется в блоке finally?",
      variants: [
        "Код всегда выполняется, даже если была ошибка",
        "Код выполняется только при ошибке",
        "Код не выполняется при ошибке",
      ],
      correct: [0],
    },
    {
      id: 14,
      name: "Что НЕ ловит try...catch?",
      variants: [
        "Синтаксические ошибки (например, опечатки)",
        "Ошибки парсинга JSON",
        "ReferenceError при обращении к несуществующей переменной",
      ],
      correct: [0],
    },
    {
      id: 15,
      name: "Какая рекомендация по использованию try...catch?",
      variants: [
        "Оборачивать только потенциально опасные места",
        "Оборачивать весь код целиком",
        "Никогда не использовать try...catch",
      ],
      correct: [0],
    },

    {
      id: 16,
      name: "Почему не рекомендуется использовать var?",
      variants: [
        "var не имеет блочной области видимости, может привести к ошибкам",
        "var слишком медленный",
        "var не работает в современных браузерах",
      ],
      correct: [0],
    },
    {
      id: 17,
      name: "Как объявить переменную, которую нельзя изменить?",
      variants: ["const x = 10;", "let x = 10;", "var x = 10;"],
      correct: [0],
    },
    {
      id: 18,
      name: "Что произойдет при повторном объявлении let a = 1; let a = 2;?",
      variants: [
        "Будет ошибка SyntaxError",
        "Значение a перезапишется",
        "Оба значения сохранятся",
      ],
      correct: [0],
    },
    {
      id: 19,
      name: "Что произойдет при обращении к let-переменной до её объявления?",
      variants: [
        "Будет ошибка ReferenceError",
        "Вернет undefined",
        "Будет ошибка TypeError",
      ],
      correct: [0],
    },
    {
      id: 20,
      name: "Какой порядок рекомендуется при выборе типа объявления переменной?",
      variants: [
        "Сначала const, если надо — let",
        "Всегда использовать var",
        "Сначала let, если надо — const",
      ],
      correct: [0],
    },

    {
      id: 21,
      name: "В чём суть принципа разделения логики и представления?",
      variants: [
        "Держать структуру (HTML) отдельно от поведения (JS)",
        "Писать весь код только в HTML",
        "Писать весь код только в JS",
      ],
      correct: [0],
    },
    {
      id: 22,
      name: "Какой подход считается лучшим для взаимодействия с DOM?",
      variants: [
        "Вешать обработчики через JS, а не через атрибуты on*",
        "Вставлять обработчики прямо в HTML (onclick)",
        "Использовать document.write",
      ],
      correct: [0],
    },
    {
      id: 23,
      name: "Почему важно разделять логику и представление?",
      variants: [
        "Повышает читаемость, переиспользуемость, безопасность",
        "Ускоряет выполнение кода",
        "Это не важно",
      ],
      correct: [0],
    },
    {
      id: 24,
      name: "Какой вариант считается плохой практикой?",
      variants: [
        '<button onclick="count++">+</button>',
        '<button id="inc">+</button> // addEventListener в JS',
        "Отдельный JS-файл с логикой",
      ],
      correct: [0],
    },
    {
      id: 25,
      name: "Какие фреймворки поощряют разделение логики и представления?",
      variants: ["React, Vue, Angular", "jQuery, Bootstrap", "PHP, SQL"],
      correct: [0],
    },

    {
      id: 26,
      name: "Что означает принцип DRY?",
      variants: [
        "Не повторяйся, вынеси повторяющийся код в функции/модули",
        "Пиши длинные комментарии",
        "Проверяй код дважды",
      ],
      correct: [0],
    },
    {
      id: 27,
      name: "Что значит KISS в программировании?",
      variants: [
        "Пиши проще — избегай ненужной сложности",
        "Пиши только на английском",
        "Используй только простые типы данных",
      ],
      correct: [0],
    },
    {
      id: 28,
      name: "Что значит принцип YAGNI?",
      variants: [
        "Не добавляй того, что не нужно сейчас",
        "Пиши только короткие функции",
        "Не используй классы",
      ],
      correct: [0],
    },
    {
      id: 29,
      name: "Какой из принципов входит в SOLID?",
      variants: [
        "Single Responsibility Principle (Одна зона ответственности)",
        "Never Use Goto",
        "Always Test First",
      ],
      correct: [0],
    },
    {
      id: 30,
      name: "Какая из практик помогает избежать дублирования кода?",
      variants: ["DRY", "KISS", "YAGNI"],
      correct: [0],
    },
  ],
};
