export const js_functions_test = {
  id: 505,
  name: "Функции в JavaScript",
  category: "JavaScript",
  ques: [
    {
      id: 1,
      name: "Что такое функция в JavaScript?",
      variants: [
        "Именованный блок кода, который можно вызывать",
        "Глобальная переменная",
        "Массив значений",
      ],
      correct: [0],
    },
    {
      id: 2,
      name: "Для чего нужны функции?",
      variants: [
        "Для повторного использования кода",
        "Для хранения чисел",
        "Для работы с DOM",
      ],
      correct: [0],
    },
    {
      id: 3,
      name: "Как вызвать функцию sayHello?",
      variants: ["sayHello();", "call sayHello", "function sayHello"],
      correct: [0],
    },
    {
      id: 4,
      name: "Как объявить функцию через function-декларацию?",
      variants: [
        "function greet() { ... }",
        "let greet = ...",
        "greet() function { ... }",
      ],
      correct: [0],
    },
    {
      id: 5,
      name: "Можно ли передавать данные в функцию?",
      variants: [
        "Да, через параметры",
        "Нет",
        "Только через глобальные переменные",
      ],
      correct: [0],
    },
    {
      id: 6,
      name: "Что такое function expression?",
      variants: [
        "Функция, записанная в переменную",
        "Глобальная функция",
        "Стрелочная функция",
      ],
      correct: [0],
    },
    {
      id: 7,
      name: "Что такое стрелочная функция?",
      variants: [
        "Особый синтаксис записи функций",
        "Функция с return только для чисел",
        "Функция без параметров",
      ],
      correct: [0],
    },
    {
      id: 8,
      name: "Можно ли вызвать function declaration до её объявления?",
      variants: ["Да", "Нет", "Только в стрелочных функциях"],
      correct: [0],
    },
    {
      id: 9,
      name: "Что произойдет, если вызвать function expression до её объявления?",
      variants: ["Будет ошибка", "Функция вызовется", "Выведет undefined"],
      correct: [0],
    },
    {
      id: 10,
      name: "Что возвращает функция, если нет return?",
      variants: ["undefined", "null", "true"],
      correct: [0],
    },
    {
      id: 11,
      name: "Что делает оператор return?",
      variants: [
        "Завершает выполнение функции и возвращает значение",
        "Начинает выполнение функции",
        "Присваивает переменные",
      ],
      correct: [0],
    },
    {
      id: 12,
      name: "Как задать параметр по умолчанию?",
      variants: [
        "function fn(x = 5) { ... }",
        "function fn(x) { ... }",
        "function fn = 5(x) { ... }",
      ],
      correct: [0],
    },
    {
      id: 13,
      name: "Что будет, если не передать необязательный параметр без значения по умолчанию?",
      variants: ["Его значение будет undefined", "Будет ошибка", "Будет 0"],
      correct: [0],
    },
    {
      id: 14,
      name: "Где доступна переменная, объявленная внутри функции?",
      variants: [
        "Только внутри этой функции",
        "Везде в программе",
        "Внутри любого блока",
      ],
      correct: [0],
    },
    {
      id: 15,
      name: "Как называется область, доступная только внутри фигурных скобок if/for/while?",
      variants: [
        "Блочная область видимости",
        "Глобальная область",
        "Функциональная область",
      ],
      correct: [0],
    },
    {
      id: 16,
      name: "Что такое замыкание (closure)?",
      variants: [
        "Функция, которая запоминает переменные из внешней области",
        "Глобальная функция",
        "Функция без return",
      ],
      correct: [0],
    },
    {
      id: 17,
      name: "Что произойдёт, если внутренняя функция использует переменную из внешней функции?",
      variants: [
        "Она сможет получить её значение",
        "Будет ошибка",
        "Значение всегда undefined",
      ],
      correct: [0],
    },
    {
      id: 18,
      name: "Выберите верный пример замыкания:",
      variants: [
        `function outer() {
  let secret = 42;
  return function() { return secret; }
}`,
        "function sum(a, b) { return a + b; }",
        "let a = 5; function test() { return 5; }",
      ],
      correct: [0],
    },
    {
      id: 19,
      name: "Что такое рекурсия?",
      variants: [
        "Когда функция вызывает саму себя",
        "Функция вызывает другую функцию",
        "Функция вызывает alert",
      ],
      correct: [0],
    },
    {
      id: 20,
      name: "Что обязательно должно быть в рекурсивной функции?",
      variants: [
        "Базовый случай (условие остановки)",
        "Оператор continue",
        "console.log",
      ],
      correct: [0],
    },
    {
      id: 21,
      name: "Что произойдет, если в рекурсии нет условия остановки?",
      variants: [
        "Будет бесконечный вызов и ошибка переполнения стека",
        "Функция выполнится один раз",
        "Ничего не произойдет",
      ],
      correct: [0],
    },
    {
      id: 22,
      name: "Что такое чистая функция?",
      variants: [
        "Функция, не имеющая побочных эффектов и всегда возвращающая одинаковый результат на одинаковый вход",
        "Функция, изменяющая внешние переменные",
        "Функция, использующая alert",
      ],
      correct: [0],
    },
    {
      id: 23,
      name: "Что считается побочным эффектом?",
      variants: [
        "Изменение глобальной переменной или вывод в консоль",
        "Сложение двух чисел",
        "Вызов функции без return",
      ],
      correct: [0],
    },
    {
      id: 24,
      name: "Можно ли избежать побочных эффектов всегда?",
      variants: [
        "Нет, во многих задачах они нужны (например, для вывода/сохранения данных)",
        "Да, всегда",
        "Только в рекурсии",
      ],
      correct: [0],
    },
    {
      id: 25,
      name: "Чем отличается function declaration от function expression?",
      variants: [
        "Declaration всплывает, expression — нет",
        "Expression всегда глобальная",
        "Declaration не имеет имени",
      ],
      correct: [0],
    },
    {
      id: 26,
      name: "Можно ли вложить одну функцию в другую?",
      variants: [
        "Да, так создаются замыкания",
        "Нет, это ошибка",
        "Только со стрелочными функциями",
      ],
      correct: [0],
    },
    {
      id: 27,
      name: "Что вернёт функция, если явно нет return?",
      variants: ["undefined", "null", "true"],
      correct: [0],
    },
    {
      id: 28,
      name: `Что выведет этот код?
function double(x) { return x * 2; }
console.log(double(3));`,
      variants: ["6", "3", "undefined"],
      correct: [0],
    },
    {
      id: 29,
      name: `Что выведет этот код?
let counter = 0;
function increment() { counter++; }
increment(); increment();
console.log(counter);`,
      variants: ["2", "0", "undefined"],
      correct: [0],
    },
    {
      id: 30,
      name: `Что выведет этот код?
function outer() {
  let secret = "yes";
  function inner() { return secret; }
  return inner;
}
const fn = outer();
console.log(fn());`,
      variants: ['"yes"', "undefined", "Ошибка"],
      correct: [0],
    },
  ],
};
