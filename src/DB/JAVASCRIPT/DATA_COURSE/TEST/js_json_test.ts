export const js_json_test = {
  id: 509,
  name: "JSON — обмен и хранение данных",
  category: "JavaScript",
  ques: [
    {
      id: 1,
      name: "Что такое JSON?",
      variants: [
        "Текстовый формат для хранения и передачи данных",
        "Тип данных в JavaScript",
        "Функция преобразования массива",
      ],
      correct: [0],
    },
    {
      id: 2,
      name: "На каком синтаксисе основан JSON?",
      variants: ["Объектах JavaScript", "Языке SQL", "Таблицах Excel"],
      correct: [0],
    },
    {
      id: 3,
      name: "Ключи в JSON должны быть...",
      variants: ["В двойных кавычках", "Без кавычек", "В одинарных кавычках"],
      correct: [0],
    },
    {
      id: 4,
      name: "Можно ли в JSON использовать комментарии?",
      variants: ["Нет", "Да", "Только в начале строки"],
      correct: [0],
    },
    {
      id: 5,
      name: "Какие типы значений НЕ поддерживает JSON?",
      variants: ["undefined и функции", "Числа и строки", "Массивы и объекты"],
      correct: [0],
    },
    {
      id: 6,
      name: "Для чего чаще всего используется JSON в web-разработке?",
      variants: [
        "Для обмена данными между клиентом и сервером",
        "Для оформления стилей",
        "Для анимаций",
      ],
      correct: [0],
    },
    {
      id: 7,
      name: "Можно ли сохранить объект напрямую в localStorage?",
      variants: [
        "Нет, только строку (например, в формате JSON)",
        "Да, напрямую",
        "Только массивы",
      ],
      correct: [0],
    },
    {
      id: 8,
      name: "Какой метод используется для преобразования объекта в JSON-строку?",
      variants: ["JSON.stringify()", "JSON.parse()", "toJSON()"],
      correct: [0],
    },
    {
      id: 9,
      name: "Что вернёт JSON.stringify({name: 'Анна', age: 28})?",
      variants: [
        '{"name":"Анна","age":28}',
        "{name: 'Анна', age: 28}",
        "undefined",
      ],
      correct: [0],
    },
    {
      id: 10,
      name: "Что произойдет с функцией при сериализации объекта через JSON.stringify?",
      variants: [
        "Будет проигнорирована",
        "Сохранится как строка",
        "Вызовет ошибку",
      ],
      correct: [0],
    },
    {
      id: 11,
      name: "Что делает третий аргумент в JSON.stringify(obj, null, 2)?",
      variants: [
        "Форматирует строку с отступами для удобства чтения",
        "Удаляет вложенные объекты",
        "Заменяет все числа на строки",
      ],
      correct: [0],
    },
    {
      id: 12,
      name: "Как сериализовать только выбранные свойства объекта?",
      variants: [
        "Передать массив ключей вторым параметром в JSON.stringify",
        "Удалить остальные свойства вручную",
        "Нельзя сериализовать частично",
      ],
      correct: [0],
    },
    {
      id: 13,
      name: "Что делает метод JSON.parse()?",
      variants: [
        "Преобразует строку в формате JSON в объект",
        "Преобразует объект в JSON-строку",
        "Сохраняет данные в localStorage",
      ],
      correct: [0],
    },
    {
      id: 14,
      name: "Какая строка корректна для JSON.parse()?",
      variants: ['{"age":30}', "{age:30}", "{'age':30}"],
      correct: [0],
    },
    {
      id: 15,
      name: "Что произойдет при попытке JSON.parse('{name: \"Анна\"}')?",
      variants: [
        "Будет ошибка SyntaxError",
        "Вернёт объект {name: 'Анна'}",
        "Преобразует в массив",
      ],
      correct: [0],
    },
    {
      id: 16,
      name: "Как обработать ошибку при JSON.parse, если строка повреждена?",
      variants: [
        "Оборачивать парсинг в try...catch",
        "Использовать метод catch()",
        "Вызвать JSON.stringify() вместо этого",
      ],
      correct: [0],
    },
    {
      id: 17,
      name: "Для чего используется функция reviver во втором параметре JSON.parse?",
      variants: [
        "Для преобразования значений во время парсинга",
        "Для сериализации в строку",
        "Для проверки на ошибки",
      ],
      correct: [0],
    },
    {
      id: 18,
      name: 'Что произойдет с датой в JSON.parse(\'{"created":"2025-01-01T00:00:00.000Z"}\')?',
      variants: [
        "Будет обычной строкой, пока не преобразовать вручную",
        "Автоматически станет объектом Date",
        "Будет проигнорирована",
      ],
      correct: [0],
    },
    {
      id: 19,
      name: "Какие кавычки допустимы в JSON?",
      variants: ["Только двойные", "Только одинарные", "Любые"],
      correct: [0],
    },
    {
      id: 20,
      name: "Какая из строк вызовет ошибку при JSON.parse?",
      variants: ['{"x":1,}', '{"x":1}', '{"x":null}'],
      correct: [0],
    },
    {
      id: 21,
      name: "Что произойдет с undefined в объекте при JSON.stringify?",
      variants: [
        "Не будет включён в JSON-строку",
        "Сохранится как null",
        "Вызовет ошибку",
      ],
      correct: [0],
    },
    {
      id: 22,
      name: "Какую ошибку может вызвать попытка парсить невалидный JSON?",
      variants: ["SyntaxError", "TypeError", "ReferenceError"],
      correct: [0],
    },
    {
      id: 23,
      name: "Как сохранить объект user в localStorage?",
      variants: [
        'localStorage.setItem("user", JSON.stringify(user))',
        "localStorage.setItem(user)",
        "localStorage.save(user)",
      ],
      correct: [0],
    },
    {
      id: 24,
      name: "Какой способ вернёт полную копию простого объекта без ссылок?",
      variants: [
        "JSON.parse(JSON.stringify(obj))",
        "Object.assign({}, obj)",
        "obj.slice()",
      ],
      correct: [0],
    },
    {
      id: 25,
      name: "Какие типы нельзя корректно скопировать с помощью JSON.stringify + JSON.parse?",
      variants: [
        "Date, Map, Set, функции",
        "Массивы и числа",
        "Строки и объекты",
      ],
      correct: [0],
    },
    {
      id: 26,
      name: "Почему важно всегда использовать try...catch при JSON.parse данных из внешних источников?",
      variants: [
        "Данные могут быть повреждены и вызвать ошибку",
        "Это ускоряет выполнение",
        "Так всегда требуется по стандарту",
      ],
      correct: [0],
    },
    {
      id: 27,
      name: "Что нужно сделать перед отправкой объекта на сервер через fetch?",
      variants: [
        "Преобразовать его в строку с помощью JSON.stringify()",
        "Вызвать JSON.parse()",
        "Сохранить в localStorage",
      ],
      correct: [0],
    },
    {
      id: 28,
      name: 'Что выведет следующий код? \nconst json = \'{"a":1,"b":2}\'; \nconst obj = JSON.parse(json); \nconsole.log(obj.b);',
      variants: ["2", "undefined", "SyntaxError"],
      correct: [0],
    },
    {
      id: 29,
      name: "Что произойдет с массивом в объекте при JSON.stringify?",
      variants: [
        "Будет сериализован корректно",
        "Будет удалён",
        "Будет преобразован в строку через запятую",
      ],
      correct: [0],
    },
    {
      id: 30,
      name: "Где проверить корректность JSON-строки перед использованием?",
      variants: [
        "В онлайн-валидаторе (например, jsonlint.com)",
        "В редакторе стилей CSS",
        "В терминале командой ls",
      ],
      correct: [0],
    },
  ],
};
