export const js_api_test = {
  id: 514,
  name: "Работа с API, fetch и HTTP-запросами",
  category: "JavaScript",
  ques: [
    {
      id: 1,
      name: "Что такое API в веб-разработке?",
      variants: [
        "Интерфейс для взаимодействия программ (например, клиента и сервера)",
        "Фреймворк для создания сайтов",
        "Специальный тип базы данных",
      ],
      correct: [0],
    },
    {
      id: 2,
      name: "Для чего разработчику нужен API?",
      variants: [
        "Чтобы получать и отправлять данные между приложениями",
        "Для создания стилей CSS",
        "Для оптимизации изображений",
      ],
      correct: [0],
    },
    {
      id: 3,
      name: "Какой из примеров описывает использование API?",
      variants: [
        "Получение курса валют с другого сайта",
        "Создание html-элементов вручную",
        "Изменение цвета кнопки по клику",
      ],
      correct: [0],
    },
    {
      id: 4,
      name: "Какой из видов API самый распространённый для обмена данными через HTTP?",
      variants: ["REST API", "File API", "LocalStorage API"],
      correct: [0],
    },
    {
      id: 5,
      name: "Что означает метод GET в HTTP-запросе?",
      variants: [
        "Получить данные с сервера",
        "Отправить новые данные на сервер",
        "Удалить данные на сервере",
      ],
      correct: [0],
    },
    {
      id: 6,
      name: "Для чего используют метод POST?",
      variants: [
        "Для отправки новых данных на сервер",
        "Для получения данных",
        "Для удаления данных",
      ],
      correct: [0],
    },
    {
      id: 7,
      name: "Где указывается адрес API при отправке запроса через fetch?",
      variants: [
        "В первом аргументе функции fetch",
        "В свойстве headers",
        "В блоке catch",
      ],
      correct: [0],
    },
    {
      id: 8,
      name: "Для чего нужен заголовок Content-Type?",
      variants: [
        "Чтобы указать формат отправляемых или принимаемых данных",
        "Чтобы задать тему оформления",
        "Для определения размера файла",
      ],
      correct: [0],
    },
    {
      id: 9,
      name: "В каком формате чаще всего передаются данные в теле POST-запроса?",
      variants: ["JSON", "XML", "HTML"],
      correct: [0],
    },
    {
      id: 10,
      name: "Что вернет fetch при успешном выполнении?",
      variants: [
        "Промис с объектом Response",
        "Готовые данные в виде объекта",
        "Сразу ошибку",
      ],
      correct: [0],
    },
    {
      id: 11,
      name: "Как получить данные из ответа fetch?",
      variants: [
        "Вызвать response.json()",
        "Обратиться к response.body напрямую",
        "Использовать JSON.stringify(response)",
      ],
      correct: [0],
    },
    {
      id: 12,
      name: "Что такое response.ok?",
      variants: [
        "Признак успешного ответа (true для 200–299)",
        "Параметр запроса",
        "Метод для отправки данных",
      ],
      correct: [0],
    },
    {
      id: 13,
      name: "Что нужно сделать перед тем, как вызывать response.json()?",
      variants: [
        "Проверить response.ok",
        "Сначала вызвать response.text()",
        "Проверить наличие поля headers",
      ],
      correct: [0],
    },
    {
      id: 14,
      name: "Какой статус указывает на успешное создание ресурса?",
      variants: ["201", "400", "404"],
      correct: [0],
    },
    {
      id: 15,
      name: "Что делает .catch() после цепочки then?",
      variants: [
        "Обрабатывает ошибки (например, сетевые)",
        "Отправляет дополнительные данные",
        "Изменяет url запроса",
      ],
      correct: [0],
    },
    {
      id: 16,
      name: "Что произойдет, если сервер вернет статус 404?",
      variants: [
        "response.ok будет false, статус — 404",
        "fetch вызовет .catch() обязательно",
        "Запрос отменится автоматически",
      ],
      correct: [0],
    },
    {
      id: 17,
      name: "Какой код отвечает за обработку ошибок при работе с async/await и fetch?",
      variants: ["try...catch", "finally", "switch-case"],
      correct: [0],
    },
    {
      id: 18,
      name: "Что происходит, если возникла сетевая ошибка в fetch?",
      variants: [
        ".catch() или catch перехватит ошибку",
        "response.ok будет false",
        "fetch вернет пустой объект",
      ],
      correct: [0],
    },
    {
      id: 19,
      name: "Почему fetch не вызывает catch при ошибке статуса 500?",
      variants: [
        "fetch ловит только сетевые ошибки, ошибки статуса нужно обрабатывать вручную",
        "Это баг спецификации",
        "catch работает только для ошибок 404",
      ],
      correct: [0],
    },
    {
      id: 20,
      name: "Что обязательно нужно делать после await fetch(...) в реальном коде?",
      variants: [
        "Проверять response.ok и обрабатывать ошибки",
        "Сразу вызывать response.json()",
        "Всегда писать return",
      ],
      correct: [0],
    },
    {
      id: 21,
      name: "Для чего используют заголовок Authorization?",
      variants: [
        "Передать токен доступа для защищённых API",
        "Переименовать пользователя",
        "Изменить формат даты",
      ],
      correct: [0],
    },
    {
      id: 22,
      name: "Что такое тело (body) HTTP-запроса?",
      variants: [
        "Данные, которые отправляются в POST, PUT, PATCH",
        "Заголовки запроса",
        "Ответ от сервера",
      ],
      correct: [0],
    },
    {
      id: 23,
      name: "Как добавить несколько заголовков к fetch-запросу?",
      variants: [
        "Указать их в объекте headers",
        "Через второй fetch",
        "В аргументе url через &",
      ],
      correct: [0],
    },
    {
      id: 24,
      name: "Что делает async/await с fetch?",
      variants: [
        "Позволяет писать асинхронный код линейно и проще",
        "Запрещает использовать then",
        "Делает запрос синхронным",
      ],
      correct: [0],
    },
    {
      id: 25,
      name: "Для чего нужен try...catch с await fetch?",
      variants: [
        "Для обработки ошибок (сетевых и при throw new Error)",
        "Для преобразования ответа в объект",
        "Для автосохранения данных",
      ],
      correct: [0],
    },
    {
      id: 26,
      name: "Что произойдет, если в response.json() получен невалидный JSON?",
      variants: [
        "Будет выброшена ошибка, ее можно поймать в catch",
        "fetch автоматически вернет пустой объект",
        "Произойдет автоматический retry",
      ],
      correct: [0],
    },
    {
      id: 27,
      name: "Что такое CORS?",
      variants: [
        "Механизм безопасности, ограничивающий междоменные запросы",
        "Протокол передачи HTML",
        "Библиотека для работы с API",
      ],
      correct: [0],
    },
    {
      id: 28,
      name: "Почему браузер может заблокировать fetch-запрос на другой домен?",
      variants: [
        "Из-за политики CORS, если сервер не разрешил доступ",
        "Если не указан Content-Type",
        "Если слишком длинный url",
      ],
      correct: [0],
    },
    {
      id: 29,
      name: "Кто должен разрешать междоменные запросы (CORS)?",
      variants: [
        "Сервер с помощью специальных заголовков",
        "Браузер с помощью настроек пользователя",
        "Клиент с помощью fetch",
      ],
      correct: [0],
    },
    {
      id: 30,
      name: "Как можно обойти CORS на локальной разработке?",
      variants: [
        "Использовать proxy или настроить CORS-заголовки на сервере",
        "Писать код только с методом GET",
        "Пробовать несколько раз подряд",
      ],
      correct: [0],
    },
  ],
};
