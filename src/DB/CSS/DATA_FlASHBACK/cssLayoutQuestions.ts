export const cssLayoutQuestions = [
  {
    id: "css_layout_1",
    title: "Какое свойство задаёт максимальную ширину контейнера?",
    options: ["max-width", "width", "min-width", "container-width"],
    correctAnswers: [0],
    descriptions: [
      "width устанавливает фиксированную ширину, а не максимум.",
      "Правильно: max-width ограничивает ширину до указанного значения, но не расширяет больше.",
      "min-width задаёт минимальную ширину, а не максимальную.",
      "container-width не является стандартным CSS-свойством.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_2",
    title:
      "Какой способ центрирования блокового элемента по горизонтали наиболее распространён?",
    options: [
      "margin-left: auto; margin-right: auto;",
      "text-align: center;",
      "padding: 0 auto;",
      "align-items: center;",
    ],
    correctAnswers: [0],
    descriptions: [
      "Правильно: margin-left:auto и margin-right:auto центрируют блок при фиксированной ширине.",
      "text-align:center центрирует только строчно-встраиваемые элементы внутри блока, а не сам блок.",
      "padding:0 auto — некорректный синтаксис для горизонтального центрирования.",
      "align-items:center применяется в flex-контейнере для оси поперёк, но не сам по себе для контейнера.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_3",
    title:
      "Как сделать адаптивный контейнер, максимальная ширина которого 1200px, а отступы по бокам по 20px?",
    options: [
      ".container { width: 100%; max-width: 1200px; padding: 0 20px; }",
      ".container { max-width: 1200px; margin: 0 20px; }",
      ".container { width: 1200px; padding: 0 20px; }",
      ".container { width: 100%; padding: 20px; }",
    ],
    correctAnswers: [0],
    descriptions: [
      "Правильно: width:100% растягивает до родителя, max-width ограничивает, padding задаёт боковые отступы.",
      "margin:0 20px задаёт внешние отступы, но не гарантирует адаптивности ширины.",
      "width:1200px задаёт жёсткую ширину, не адаптивный.",
      "padding:20px задаёт отступы со всех сторон, но не ограничивает максимальную ширину.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_4",
    title:
      "Какой подход позволяет центровать содержимое страницы с учётом адаптивности?",
    options: [
      "display: flex; justify-content: center;",
      "display: grid; justify-items: center;",
      "margin: 0 auto; max-width: 960px;",
      "text-align: center;",
    ],
    correctAnswers: [2],
    descriptions: [
      "flex-центрирование выравнивает элементы внутри flex-контейнера, но не ограничивает ширину.",
      "grid-центрирование аналогично flex для ячеек, но не для страницы.",
      "Правильно: max-width ограничивает ширину, а margin:0 auto центрирует контейнер.",
      "text-align:center центрирует inline-элементы внутри блока, а не сам контейнер.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_5",
    title:
      "Какой стиль позволяет контейнеру иметь минимум 300px и максимум 100% ширины родителя?",
    options: [
      "width: clamp(300px, 100%, 100%);",
      "min-width: 300px; width: 100%;",
      "max-width: 100%; width: 300px;",
      "min-width: 300px; max-width: 100%; width: 100%;",
    ],
    correctAnswers: [3],
    descriptions: [
      "clamp требует три значения min, preferred, max, а не два.",
      "min-width 300px; width 100% действует, но без max-width нельзя предотвратить выход за пределы родителя.",
      "max-width:100% с width:300px задаёт фиксацию в 300px и ограничение, но не минимум динамичный.",
      "Правильно: min-width 300px и max-width 100% с width 100% обеспечивают адаптивность между 300px и полным размером родителя.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_6",
    title:
      "Какое свойство задаёт минимальную ширину контейнера, чтобы он не сжимался меньше 400px?",
    options: [
      "min-width: 400px;",
      "max-width: 400px;",
      "width: 400px;",
      "flex: 1;",
    ],
    correctAnswers: [0],
    descriptions: [
      "Правильно: min-width устанавливает минимальную ширину, ниже которой контейнер не сжимается.",
      "max-width ограничивает сверху, а не задаёт минимум.",
      "width фиксирует ширину, а не задаёт минимум.",
      "flex:1 влияет на отношение при flex-контейнере, но не задаёт жёсткий минимум.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_7",
    title:
      "Как центрировать текстовый блок внутри родителя по горизонтали, если его display: inline-block?",
    options: [
      "margin: 0 auto;",
      "text-align: center; применить к родителю",
      "display: flex; justify-content: center;",
      "padding-left: 50%;",
    ],
    correctAnswers: [1],
    descriptions: [
      "margin:auto не работает для inline-block в отличие от блочного элемента.",
      "Правильно: text-align:center у родителя центрирует inline-block дочерний.",
      "flex-центрирование применяет flex-контейнер к самому родителю, но не нужен flex, когда элемент inline-block.",
      "padding-left:50% сдвинет блок, а не отцентрирует относительно родителя.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_8",
    title:
      "Какой способ позволяет горизонтально центрировать flex-элемент внутри flex-контейнера?",
    options: [
      "justify-content: center;",
      "align-items: center;",
      "align-self: center;",
      "text-align: center;",
    ],
    correctAnswers: [0],
    descriptions: [
      "Правильно: justify-content:center выравнивает flex-элементы по основной оси (горизонталь по умолчанию).",
      "align-items:center выравнивает по поперечной оси (вертикаль по умолчанию).",
      "align-self:center применяется к конкретному элементу, но не к группе элементов.",
      "text-align не влияет на flex-элементы.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_9",
    title:
      "Как ограничить ширину изображения, чтобы оно не выходило за границы контейнера?",
    options: [
      "img { max-width: 100%; }",
      "img { width: 100px; }",
      "img { overflow: hidden; }",
      "img { min-width: 100%; }",
    ],
    correctAnswers: [0],
    descriptions: [
      "Правильно: max-width:100% масштабирует изображение до размеров контейнера, не выходя за его пределы.",
      "width:100px задаёт фиксированную ширину, не адаптивно.",
      "overflow:hidden не уменьшит изображение внутри контейнера.",
      "min-width:100% растянет изображение, а не ограничит.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_10",
    title:
      "Как сделать контейнер, который заполняет 50% ширины экрана и не более 800px?",
    options: [
      ".container { width: 50vw; max-width: 800px; }",
      ".container { width: 50%; max-width: 800px; }",
      ".container { width: 800px; max-width: 50%; }",
      ".container { width: clamp(50%, 800px, 800px); }",
    ],
    correctAnswers: [1],
    descriptions: [
      "50vw — половина ширины viewport, но max-width:800px не гарантирует адаптивности к родителю.",
      "Правильно: width:50% от родителя экрана и max-width:800px ограничит до 800px.",
      "Неверно: width:800px зафиксирует ширину, а max-width:50% не сработает.",
      "clamp требует три значения min, preferred, max; этот вариант неверен.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_11",
    title:
      "Как задать отступы сверху и снизу 20px и ограничить ширину контейнера 600px?",
    options: [
      ".container { margin: 20px 0; max-width: 600px; }",
      ".container { padding: 20px 0; width: 600px; }",
      ".container { margin: 0 auto; width: 600px; }",
      ".container { padding: 20px 0; max-width: 600px; }",
    ],
    correctAnswers: [0],
    descriptions: [
      "Правильно: margin:20px 0 задаёт вертикальные внешние отступы, max-width ограничивает ширину.",
      "padding:20px 0 задаёт внутренние отступы, но width жёстко фиксирует ширину.",
      "margin:0 auto центрирует, но не задаёт вертикальные отступы. width:600px задаёт фиксированную ширину.",
      "padding:20px 0 задаёт внутренние отступы, но без margin вертикальных внешних отступов.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_12",
    title:
      "Как отцентрировать flex-контейнер внутри родителя, имеющего display: block?",
    options: [
      ".flex-container { margin: 0 auto; }",
      ".flex-container { justify-content: center; }",
      ".flex-container { align-items: center; }",
      ".flex-container { text-align: center; }",
    ],
    correctAnswers: [0],
    descriptions: [
      "Правильно: margin:auto центрирует контейнер с фиксированной или ограниченной шириной.",
      "justify-content работает внутри flex-элементов, а не центрует сам flex-контейнер.",
      "align-items выравнивает дочерние элементы по вертикали внутри flex, а не центрирует контейнер.",
      "text-align:center влияет на inline-контент внутри, а не центрирует флекс-контейнер.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_13",
    title:
      "Как установить минимальную ширину контейнера в 320px и центрировать его?",
    options: [
      ".container { min-width: 320px; margin: 0 auto; }",
      ".container { width: 320px; margin: auto; }",
      ".container { min-width: 320px; text-align: center; }",
      ".container { width: 100%; min-width: 320px; }",
    ],
    correctAnswers: [0],
    descriptions: [
      "Правильно: min-width устанавливает минимум, margin:auto центрирует.",
      "width:320px фиксирует ширину, но не позволяет адаптивно менять ширину при больших экранах.",
      "text-align:center центрирует текст, а не блок.",
      "width:100% растянет на весь родительский контейнер, margin:auto не указан.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_14",
    title:
      "Как сделать адаптивный двухколоночный контейнер, где колонки по 50% ширины?",
    options: [
      ".container { display: flex; } .column { width: 50%; }",
      ".container { display: grid; grid-template-columns: 50px 50px; }",
      ".column { float: left; width: 100%; }",
      ".container { display: block; } .column { width: 50%; }",
    ],
    correctAnswers: [0],
    descriptions: [
      "Правильно: flex-контейнер с дочерними элементами шириной 50% создаёт две колонки.",
      "grid-template-columns:50px 50px задаёт фиксированные 50px, а не 50%.",
      "float:left создаёт колонки, но width:100% растянет на всю ширину, не поделит пополам.",
      "display:block не создаёт flex- или grid-контейнер, width:50% сам по себе может сработать, но без float или flex-структуры может ломаться.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_15",
    title:
      "Какой способ центрирования текста внутри контейнера сохраняет адаптивность макета?",
    options: [
      ".container { display: flex; justify-content: center; }",
      ".container { text-align: center; }",
      ".container { align-items: center; }",
      ".container { vertical-align: middle; }",
    ],
    correctAnswers: [1],
    descriptions: [
      "justify-content:center центрирует flex-элементы, но не для текста в обычном блоке.",
      "Правильно: text-align:center центрирует текст внутри блока и сохраняет адаптивность.",
      "align-items:center действует внутри flex-контейнера для вертикального выравнивания.",
      "vertical-align применяется к строчно-встраиваемым элементам и ячейкам таблицы.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_16",
    title:
      "Как ограничить ширину страницы 1000px, но оставить адаптивность ниже 1000px?",
    options: [
      "body { max-width: 1000px; margin: 0 auto; }",
      "body { width: 1000px; margin: 0 auto; }",
      "body { min-width: 1000px; }",
      "body { width: 100%; max-width: 1000px; }",
    ],
    correctAnswers: [3],
    descriptions: [
      "max-width:1000px с margin:center ограничит, но без width:100% не заполнит контейнер на меньших экранах.",
      "width:1000px зафиксирует ширину, уберёт адаптивность.",
      "min-width:1000px заставит минимум 1000px, а не адаптивность.",
      "Правильно: width:100% растягивает до экрана, max-width:1000px ограничивает на больших экранах.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_17",
    title:
      "Какой подход заставит скрыть часть содержимого контейнера при его переполнении?",
    options: [
      "overflow: hidden;",
      "overflow: visible;",
      "overflow: scroll;",
      "overflow: auto;",
    ],
    correctAnswers: [0],
    descriptions: [
      "Правильно: overflow:hidden обрезает содержимое, выходящее за пределы контейнера.",
      "overflow:visible показывает содержимое за границами, а не скрывает.",
      "overflow:scroll добавляет полосы прокрутки, а не скрывает без прокрутки.",
      "overflow:auto добавляет прокрутку при переполнении, но не просто скрывает.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_18",
    title:
      "Как сделать контейнер гибким, чтобы его ширина изменялась пропорционально доступному пространству?",
    options: [
      ".container { display: flex; flex: 1; }",
      ".container { width: auto; }",
      ".container { display: grid; width: auto; }",
      ".container { flex-grow: 1; }",
    ],
    correctAnswers: [0],
    descriptions: [
      "Правильно: display:flex и flex:1 позволяет контейнеру занимать доступное место внутри родителя.",
      "width:auto — поведение по умолчанию, но не гарантирует гибкости в layout.",
      "display:grid создает grid-контейнер, но width:auto просто растягивает по контенту.",
      "flex-grow:1 без display:flex не сработает, нужно сначала включить flex-контейнер.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_19",
    title:
      "Как задать контейнеру фиксированную высоту 500px и центрировать по вертикали вложенный блок 300px высотой?",
    options: [
      ".parent { display: flex; align-items: center; height: 500px; } .child { height: 300px; }",
      ".parent { height: 500px; } .child { margin: 100px auto; height: 300px; }",
      ".parent { display: grid; align-items: center; height: 500px; } .child { height: 300px; }",
      "Все вышеперечисленные",
    ],
    correctAnswers: [3],
    descriptions: [
      "flex + align-items:center вертикально центрирует child внутри parent.",
      "margin:100px auto центрирует при фиксированных значениях, но менее гибко, чем flex/grid.",
      "grid + align-items:center также центрирует по вертикали.",
      "Правильно: все перечисленные способы корректны.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_20",
    title:
      "Какой CSS-свойство позволяет контейнеру сохранять соотношение сторон (например, 16:9)?",
    options: [
      "aspect-ratio: 16 / 9;",
      "ratio: 16:9;",
      "height: auto; width: auto;",
      "padding-bottom: 56.25%;",
    ],
    correctAnswers: [0],
    descriptions: [
      "Правильно: aspect-ratio:16/9 заставляет элемент сохранять заданное соотношение сторон.",
      "ratio не является стандартным CSS-свойством.",
      "height:auto и width:auto не гарантируют соотношение сторон.",
      "padding-bottom:56.25% с position:relative/absolute помогает, но устаревший подход по сравнению с aspect-ratio.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_21",
    title:
      "Какое значение свойства position делает элемент «прилипшим» к указанной позиции при прокрутке?",
    options: ["static", "relative", "sticky", "fixed"],
    correctAnswers: [2],
    descriptions: [
      "static — значение по умолчанию, элемент прокручивается вместе с документом.",
      "relative — позиционирование относительно нормального потока, не «прилипает».",
      "Правильно: sticky закрепляет элемент, когда он достигает указанной позиции при прокрутке.",
      "fixed — фиксирует элемент относительно окна браузера, а не относительного контейнера.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_22",
    title:
      "Как создать фиксированный header, который всегда остаётся вверху экрана при прокрутке?",
    options: [
      "header { position: fixed; top: 0; width: 100%; }",
      "header { position: sticky; bottom: 0; }",
      "header { position: absolute; top: 0; }",
      "header { position: relative; top: 0; }",
    ],
    correctAnswers: [0],
    descriptions: [
      "Правильно: position:fixed и top:0 закрепляют header вверху окна браузера.",
      "position:sticky с bottom:0 прикрепит внизу, а не вверху.",
      "position:absolute позиционирует относительно ближайшего родителя с position, но прокручивается вместе с документом.",
      "position:relative не выводит элемент из потока, он не фиксируется при прокрутке.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_23",
    title:
      "Какой элемент остаётся в нормальном потоке до тех пор, пока его положение не пересечёт заданное значение top при использовании position: sticky?",
    options: ["sticky", "fixed", "absolute", "relative"],
    correctAnswers: [0],
    descriptions: [
      "Правильно: sticky сочетает поведение static до достижения top, затем себя фиксирует.",
      "fixed сразу удаляет элемент из потока и фиксирует его относительно окна.",
      "absolute удаляет элемент из потока и позиционирует его относительно ближайшего не-static предка.",
      "relative оставляет элемент в потоке, смещая его визуально, но не «прилипает».",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_24",
    title:
      "Что необходимо указать, чтобы элемент с position: sticky начал «прилипать» к верху контейнера?",
    options: ["top", "bottom", "left", "right"],
    correctAnswers: [0],
    descriptions: [
      "Правильно: свойство top задаёт позицию, при достижении которой элемент станет фиксирован.",
      "bottom указывает нижнюю границу, а не верхнюю.",
      "left задаёт горизонтальный отступ, не влияет на «прилипание» по вертикали.",
      "right задаёт правый отступ, не влияет на поведение sticky по вертикали.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_25",
    title:
      "Как поведение элемента с position: sticky изменится, если не задано ни top, ни bottom?",
    options: [
      "Останется static и не «прилипнет»",
      "Будет закреплён сверху по умолчанию",
      "Будет закреплён снизу по умолчанию",
      "Превратится в position: fixed",
    ],
    correctAnswers: [0],
    descriptions: [
      "Правильно: без указания top или bottom значение sticky ведёт себя как static.",
      "Нет: без top элемент не «прилипнет» к верху.",
      "Нет: для «прилипания» к низу нужен bottom.",
      "Нет: sticky не превращается в fixed без дополнительного указания.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_26",
    title:
      "Почему элемент с position: sticky не «прилипает» внутри родителя с overflow: hidden?",
    options: [
      "Overflow скрывает выходящий за пределы контейнера контент",
      "Sticky не поддерживается в overflow-контейнерах",
      "Необходимо задать z-index",
      "Нужно установить display: block",
    ],
    correctAnswers: [0],
    descriptions: [
      "Правильно: overflow: hidden обрезает область просмотра, поэтому sticky не работает за её пределами.",
      "Не совсем: sticky поддерживается, но видимая область ограничивается overflow.",
      "z-index не влияет на области пересечения sticky и overflow.",
      "display:block не решает проблему с overflow.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_27",
    title:
      "Какой z-index необходимо задать фиксированному footer, чтобы он перекрывал другой контент?",
    options: ["Любое число, большее z-index контента", "0", "-1", "auto"],
    correctAnswers: [0],
    descriptions: [
      "Правильно: z-index фиксированного элемента должен быть больше, чем у соседнего контента, чтобы перекрывать его.",
      "0 может оказаться меньше, чем z-index соседнего элемента, и тогда footer не перекроет содержимое.",
      "-1 опустит элемент позади других, а не поверх.",
      "auto оставит z-index на уровне порядка потока, footer может остаться под контентом.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_28",
    title:
      "Что произойдёт с фиксированным элементом, если задать ему bottom: 0 и position: fixed?",
    options: [
      "Элемент прикрепится к нижней части окна браузера",
      "Элемент исчезнет",
      "Элемент останется в нормальном потоке",
      "Элемент прикрепится к верхней части окна",
    ],
    correctAnswers: [0],
    descriptions: [
      "Правильно: position:fixed и bottom:0 фиксируют элемент внизу окна браузера.",
      "Нет: элемент останется видимым внизу, а не исчезнет.",
      "Нет: fixed удаляет элемент из нормального потока.",
      "Нет: для верхнего положения нужен top:0.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_29",
    title:
      "Какой эффект даёт комбинация position: sticky и top: 10px для header?",
    options: [
      "Header «прилипнет» к 10px от верха при прокрутке до этой точки",
      "Header сразу зафиксируется на 10px от верха",
      "Header никогда не зафиксируется",
      "Header исчезнет при прокрутке",
    ],
    correctAnswers: [0],
    descriptions: [
      "Правильно: при достижении верхней точки прокрутки header фиксируется на 10px от верха.",
      "Нет: initial состояние — static, «прилипание» происходит только при прокрутке.",
      "Нет: при прокрутке header зафиксируется.",
      "Нет: элемент останется видимым после «прилипания».",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_30",
    title:
      "Как сделать так, чтобы два фиксированных элемента (header и footer) не перекрывали контент страницы?",
    options: [
      "Добавить padding-top для контента равный высоте header и padding-bottom равный высоте footer",
      "Установить opacity: 0.5 для header и footer",
      "Использовать position: absolute вместо fixed",
      "Установить display: none для контента",
    ],
    correctAnswers: [0],
    descriptions: [
      "Правильно: компенсировать высоту фиксированных элементов отступами у основного контента.",
      "opacity влияет на прозрачность, а не на отступы.",
      "absolute прикрепляет к родителю, но не решает проблему наложения.",
      "display:none скрывает контент, а не решает задачу центрирования.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_31",
    title:
      "Что будет, если задать footer { position: fixed; bottom: 0; width: 100%; } без учёта основного контента?",
    options: [
      "Footer перекроет часть содержимого страницы",
      "Footer будет под контентом",
      "Footer не отобразится",
      "Footer займёт всю высоту страницы",
    ],
    correctAnswers: [0],
    descriptions: [
      "Правильно: фиксированный footer перекроет контент, если не добавить отступы.",
      "Нет: fixed всегда поверх, если z-index выше.",
      "Нет: элемент всё равно отобразится.",
      "Нет: width влияет на ширину, а не на высоту.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_32",
    title:
      "Какой недостаток у footer с position: fixed и bottom:0 на мобильных устройствах?",
    options: [
      "Может перекрывать клавиатуру при вводе текста",
      "Может исчезать при повороте экрана",
      "Не поддерживается в мобильных браузерах",
      "Не может иметь фоновый цвет",
    ],
    correctAnswers: [0],
    descriptions: [
      "Правильно: фиксированный footer часто перекрывает экранную клавиатуру при мобильном вводе.",
      "Не верно: footer остаётся фиксированным, независимо от ориентации.",
      "Не верно: position:fixed поддерживается большинством мобильных браузеров.",
      "Не верно: фиксированный footer может иметь любой фон.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_33",
    title:
      "Какой CSS-свойство заставит header перекрывать другие элементы при прокрутке?",
    options: ["z-index", "opacity", "visibility", "display"],
    correctAnswers: [0],
    descriptions: [
      "Правильно: z-index определяет порядок наложения при position:fixed или sticky.",
      "opacity влияет на прозрачность, но не на наложение.",
      "visibility скрывает или показывает, но не влияет на порядок.",
      "display управляет отображением, но не наложением.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_34",
    title:
      "Как сделать header, который остаётся видимым только когда прокрутка страницы вверх?",
    options: [
      "Нельзя с помощью чистого CSS — нужен JavaScript",
      "position: sticky; top: 0;",
      "position: fixed; top: 0;",
      "display: none;",
    ],
    correctAnswers: [0],
    descriptions: [
      "Правильно: такое поведение («скрывается при прокрутке вниз, появляется при прокрутке вверх») требует JS.",
      "sticky фиксирует при достижении, но не скрывает при прокрутке вниз.",
      "fixed фиксирует всегда вверху, независимо от направления прокрутки.",
      "display:none всегда скрывает.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_35",
    title:
      "Как избежать «дергания» контента при закреплении элемента с position: sticky?",
    options: [
      "Добавить display: block родителю и задать высоту",
      "Добавить margin-bottom: высота элемента",
      "Задать top: 0 и указать parent overflow: visible",
      "Использовать JavaScript",
    ],
    correctAnswers: [0],
    descriptions: [
      "Правильно: указав родителю display:block и высоту, мы обеспечим плавное «прилипания» без сдвигов.",
      "margin-bottom не решает проблему ссмещения потока при переходе в sticky.",
      "overflow:visible может помочь, но основная проблема в контейнере и его высоте.",
      "JS не требуется для устранения «дергания» — достаточно верно настроить CSS-контейнер.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_36",
    title:
      "Какой селектор нужен, чтобы footer с position: sticky оставался внизу родителя до прокрутки?",
    options: [
      "footer { position: sticky; bottom: 0; }",
      "footer { position: fixed; bottom: 0; }",
      "footer { position: absolute; bottom: 0; }",
      "footer { position: relative; bottom: 0; }",
    ],
    correctAnswers: [0],
    descriptions: [
      "Правильно: sticky с bottom:0 «прилипнет» к нижней границе родителя до прокрутки.",
      "fixed привязывает к окну, а не к родителю.",
      "absolute позиционирует относительно ближайшего позиционированного предка, но прокручивается вместе.",
      "relative смещает внутрь потока, не закрепляет.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_37",
    title:
      "Как задать плавный переход высоты контента при появлении фиксированного header?",
    options: [
      "Добавить padding-top эквивалентный высоте header",
      "Использовать transition-height в CSS",
      "Добавить margin-top равный высоте header",
      "Невозможно без JS",
    ],
    correctAnswers: [0],
    descriptions: [
      "Правильно: padding-top у основного контента создаст пространство под фиксированный header без резких сдвигов.",
      "transition-height не заставит контент плавно сдвигаться при появлении header.",
      "margin-top тоже создаёт пространство, но может сломать фоновые цвета или границы.",
      "JS не требуется, можно обойтись отступами в CSS.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_38",
    title:
      "Как задать footer, который «прилипает» к нулевой позиции от нижней границы окна только после прокрутки до конца страницы?",
    options: [
      "footer { position: sticky; bottom: 0; } вне родителя",
      "footer { position: fixed; bottom: 0; }",
      "footer { position: sticky; bottom: 0; } внутри родителя с высотой контента",
      "footer { position: absolute; bottom: 0; }",
    ],
    correctAnswers: [2],
    descriptions: [
      "sticky работает только внутри родителя; вне родителя не сработает.",
      "fixed сразу прикрепит к низу окна, а не после прокрутки до конца.",
      "Правильно: sticky внутри родителя прикрепит footer к низу родителя при прокрутке до конца содержимого.",
      "absolute переместит footer к низу родителя, но не «прилипнет» при прокрутке.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_39",
    title:
      "Как настроить header, чтобы он был поверх полупрозрачной навигационной панели?",
    options: [
      "header { position: fixed; top: 0; z-index: 1000; }",
      "header { position: sticky; top: 0; }",
      "header { position: absolute; top: 0; }",
      "header { position: relative; top: 0; }",
    ],
    correctAnswers: [0],
    descriptions: [
      "Правильно: z-index больше, чем у полупрозрачной панели, обеспечит отображение поверх.",
      "sticky не гарантирует порядок наложения без z-index.",
      "absolute не отделяет от потока, может оказаться под панелью.",
      "relative не влияет на порядок наложения.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_40",
    title:
      "Как сделать так, чтобы элемент с position: fixed не перекрывал мобильное меню, открывающееся снизу?",
    options: [
      "Уменьшить z-index fixed-элемента ниже z-index меню",
      "Изменить position на absolute",
      "Добавить opacity: 0.5",
      "Удалить фиксированное позиционирование",
    ],
    correctAnswers: [0],
    descriptions: [
      "Правильно: установив меньший z-index, фиксированный элемент окажется под мобильным меню.",
      "absolute не закрепит элемент при прокрутке, а не решает порядок наложения.",
      "opacity влияет на прозрачность, но не на порядок размещения.",
      "Удаление fixed-позиционирования уберёт закрепление, но не всегда желательно.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_41",
    title:
      "Какое свойство лучше всего использовать для задания внутреннего отступа у карточки?",
    options: ["margin", "padding", "border", "gap"],
    correctAnswers: [1],
    descriptions: [
      "margin задаёт внешний отступ, а не внутренний.",
      "Правильно: padding задаёт внутренний отступ содержимого карточки.",
      "border задаёт границу, а не отступ.",
      "gap используется для промежутков между элементами в flex/grid, а не для внутреннего отступа конкретной карточки.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_42",
    title:
      "Какой способ задаёт одинаковый внутренний отступ 16px со всех сторон блока?",
    options: [
      "padding: 16px 0 16px 0;",
      "padding: 0 16px;",
      "padding: 16px;",
      "padding: 16px 16px 0 0;",
    ],
    correctAnswers: [2],
    descriptions: [
      "padding:16px 0 16px 0 задаёт верх и низ по 16px, но боковые — 0.",
      "padding:0 16px задаёт только слева и справа, без отступов сверху/снизу.",
      "Правильно: padding:16px устанавливает 16px для всех сторон.",
      "padding:16px 16px 0 0 задаёт разные значения и не для всех сторон.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_43",
    title:
      "Какое свойство используют для создания внешнего отступа между карточками в сетке?",
    options: ["padding", "margin", "border-spacing", "grid-gap"],
    correctAnswers: [1],
    descriptions: [
      "padding задаёт внутренний отступ, а не внешний.",
      "Правильно: margin между карточками создаёт пространство вне их границ.",
      "border-spacing применяется к таблицам, а не к карточкам.",
      "grid-gap задаёт промежуток внутри grid-контейнера, но между непосредственными grid-позициями, а не между произвольными карточками вне грида.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_44",
    title:
      "Какой шаблон удобно использовать для создания горизонтально выровненных карточек с равным промежутком между ними?",
    options: [
      "display: block;",
      "display: inline;",
      "display: flex; gap: 16px;",
      "display: table;",
    ],
    correctAnswers: [2],
    descriptions: [
      "display:block размещает карточки по вертикали, а не по горизонтали с промежутками.",
      "display:inline не обеспечивает равномерных промежутков между карточками.",
      "Правильно: flex с gap позволяет легко выровнять карточки по горизонтали с заданным промежутком.",
      "display:table не предназначен для равномерных промежутков между карточками и сложнее управляется.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_45",
    title:
      "Как задать фиксированную высоту карточки и сделать содержимое вертикально центрированным?",
    options: [
      ".card { height: 200px; display: flex; align-items: center; }",
      ".card { height: 200px; vertical-align: middle; }",
      ".card { height: 200px; text-align: center; }",
      ".card { height: 200px; margin: auto; }",
    ],
    correctAnswers: [0],
    descriptions: [
      "Правильно: flex-контейнер с align-items:center выравнивает содержимое по вертикали.",
      "vertical-align работает только в строковых и таблицах ячейках, но не в блочном элементе.",
      "text-align центрирует по горизонтали, а не по вертикали.",
      "margin:auto центрирует блок внутри родителя, но не вертикально выравнивает содержимое.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_46",
    title:
      "Как гарантировать, чтобы карточка имела минимальную высоту 150px, даже если содержимое меньше?",
    options: [
      "min-height: 150px;",
      "height: 150px;",
      "max-height: 150px;",
      "line-height: 150px;",
    ],
    correctAnswers: [0],
    descriptions: [
      "Правильно: min-height задаёт минимальную высоту, при меньшем содержимом карточка не уменьшится.",
      "height устанавливает фиксированную высоту и не меняется в зависимости от содержимого.",
      "max-height ограничивает максимальную высоту, а не минимальную.",
      "line-height влияет только на межстрочный интервал текста, а не на сам блок.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_47",
    title:
      "Какой шаблон часто используют для создания сетки карточек с автоматическим переносом на новую строку?",
    options: [
      "display: inline-block;",
      "display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));",
      "display: table-row;",
      "display: flex; flex-wrap: nowrap;",
    ],
    correctAnswers: [1],
    descriptions: [
      "inline-block можно использовать, но spacing и выравнивание сложнее контролировать.",
      "Правильно: grid с repeat(auto-fill, minmax...) автоматически распределяет карточки, перенося их по ширине.",
      "table-row не подходит для адаптивной сетки карточек.",
      "flex-wrap:nowrap запрещает перенос карточек на новую строку.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_48",
    title: "Как задать равномерный промежуток между карточками в CSS Grid?",
    options: [
      "grid-gap: 16px;",
      "gap: 16px;",
      "grid-spacing: 16px;",
      "margin: 16px;",
    ],
    correctAnswers: [1],
    descriptions: [
      "grid-gap устарел, вместо него рекомендуется использовать gap.",
      "Правильно: gap задаёт промежуток между grid-элементами.",
      "grid-spacing не является корректным свойством CSS Grid.",
      "margin:16px задаст отступы внутри каждой карточки, но не управляет сеткой.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_49",
    title:
      "Какой шаблон используют для создания карточек с тенью и скругленными углами?",
    options: [
      ".card { border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }",
      ".card { border: 1px solid #000; }",
      ".card { outline: 1px solid #ccc; }",
      ".card { background: #fff; }",
    ],
    correctAnswers: [0],
    descriptions: [
      "Правильно: border-radius и box-shadow создают скруглённые углы и лёгкую тень.",
      "border:1px solid задаёт границу, но не тень и не скругление.",
      "outline не влияет на форму блока, а только добавляет контур.",
      "background только задаёт фон, без тени и скругления.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_50",
    title:
      "Какой способ обеспечивает равномерное пространство вокруг карточки при её центрировании?",
    options: [
      "margin: 16px auto;",
      "padding: 16px auto;",
      "gap: 16px auto;",
      "space: 16px;",
    ],
    correctAnswers: [0],
    descriptions: [
      "Правильно: margin:16px auto задаёт вертикальные внешние отступы и центрирует по горизонтали.",
      "padding:16px auto неверный синтаксис; auto не работает с padding.",
      "gap работает только внутри flex/grid, а не для внешних отступов.",
      "space не является валидным свойством CSS.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_51",
    title:
      "Как задать фиксированную ширину карточки 250px и позволить ей центрироваться внутри контейнера?",
    options: [
      ".card { width: 250px; margin: 0 auto; }",
      ".card { width: 100%; max-width: 250px; }",
      ".card { flex: 1 1 250px; }",
      ".card { display: inline-block; }",
    ],
    correctAnswers: [0],
    descriptions: [
      "Правильно: width:250px и margin:0 auto центрируют карточку при наличии контейнера.",
      "width:100% и max-width:250px растянет до 100% родителя, а не фиксирует ширину.",
      "flex:1 1 250px задаёт гибкость внутри flex, но не центрирует автоматически.",
      "inline-block не центрирует без text-align:center у родителя.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_52",
    title: "Как добавить отступ между заголовком и содержимым карточки?",
    options: [
      ".card h2 { margin-bottom: 8px; }",
      ".card h2 { padding-bottom: 8px; }",
      ".card h2 { border-bottom: 8px solid transparent; }",
      ".card h2 { gap: 8px; }",
    ],
    correctAnswers: [0],
    descriptions: [
      "Правильно: margin-bottom добавляет внешний отступ между заголовком и содержимым.",
      "padding-bottom создаёт внутренний отступ у заголовка, но не между элементами.",
      "border-bottom отображает линию, а не только отступ.",
      "gap не работает для одиночных элементов, а только внутри flex/grid.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_53",
    title:
      "Какое свойство позволяет задать верхний и нижний отступы 24px для карточки?",
    options: [
      "margin: 24px 0;",
      "padding: 0 24px;",
      "margin: 0 24px;",
      "padding: 24px 0;",
    ],
    correctAnswers: [0],
    descriptions: [
      "Правильно: margin:24px 0 задаёт отступы сверху и снизу 24px.",
      "padding:0 24px задаёт отступы слева и справа, а не сверху/снизу.",
      "margin:0 24px задаёт отступы слева и справа.",
      "padding:24px 0 задаёт внутренние отступы, а не внешние.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_54",
    title:
      "Какой шаблон используют для выравнивания иконки и текста внутри карточки по центру?",
    options: [
      ".card-content { display: flex; align-items: center; }",
      ".card-content { text-align: center; }",
      ".card-content { vertical-align: middle; }",
      ".card-content { justify-items: center; }",
    ],
    correctAnswers: [0],
    descriptions: [
      "Правильно: flex с align-items:center выравнивает элементы по вертикали, а они располагаются в одну строку.",
      "text-align:center центрирует строчно-встраиваемый текст, но не выравнивает иконку, если она блочная.",
      "vertical-align действует только для inline/inline-block элементов внутри строчек.",
      "justify-items работает в grid-контейнере, а не в блоке без grid.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_55",
    title:
      "Как сделать так, чтобы карточка занимала всю доступную ширину родителя, но не более 500px?",
    options: [
      ".card { width: 100%; max-width: 500px; }",
      ".card { width: 500px; }",
      ".card { flex: 1; }",
      ".card { min-width: 500px; }",
    ],
    correctAnswers: [0],
    descriptions: [
      "Правильно: width:100% позволяет растягиваться, а max-width ограничивает 500px.",
      "width:500px фиксирует ширину, не адаптивно.",
      "flex:1 работает внутри flex-контейнера, но без контекста не гарантирует max-width.",
      "min-width:500px задаёт минимальную ширину, а не адаптивное поведение.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_56",
    title:
      "Какой способ позволяет задать круглые карточки с равными отступами внутри?",
    options: [
      ".card { border-radius: 50%; padding: 16px; }",
      ".card { border-radius: 8px; padding: 50%; }",
      ".card { border-radius: 50%; margin: 16px; }",
      ".card { border-radius: 100px; padding: 16px; }",
    ],
    correctAnswers: [0],
    descriptions: [
      "Правильно: border-radius:50% превращает в круг, а padding:16px создаёт отступы внутри.",
      "padding:50% создаст слишком большие отступы, неравномерно растянет.",
      "margin создаёт внешний отступ, а не внутренний круглый отступ.",
      "border-radius:100px может не дать ровного круга, если размер контейнера отличается.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_57",
    title:
      "Какой приём используют для создания «карточного» эффекта с плавной тенью при наведении?",
    options: [
      ".card { transition: box-shadow 0.3s ease; } .card:hover { box-shadow: 0 4px 12px rgba(0,0,0,0.15); }",
      ".card { hover: box-shadow: 0 4px 12px rgba(0,0,0,0.15); }",
      ".card { animation: shadow 0.3s; }",
      ".card { box-shadow: 0 4px 12px rgba(0,0,0,0.15); }",
    ],
    correctAnswers: [0],
    descriptions: [
      "Правильно: transition плавно изменяет тень при наведении, а box-shadow в состоянии :hover задаёт эффект.",
      "hover не является валидным свойством, для :hover используют псевдокласс.",
      "animation shadow не описан, а проще использовать transition.",
      "box-shadow без transition создаст тень сразу, но без плавного перехода.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_58",
    title:
      "Какой подход используют для создания отступов между секциями страницы (например, между блоками content)?",
    options: [
      ".section:not(:last-child) { margin-bottom: 48px; }",
      ".section { padding-bottom: 48px; }",
      ".section { border-bottom: 48px solid transparent; }",
      ".section { gap: 48px; }",
    ],
    correctAnswers: [0],
    descriptions: [
      "Правильно: :not(:last-child) добавляет внешние отступы между всеми секциями, кроме последней.",
      "padding-bottom создаёт внутренний отступ, но последний блок тоже получит его.",
      "border-bottom создаст невидимую границу, но может повлиять на фон и доступность.",
      "gap не работает вне flex/grid-контейнера.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_59",
    title:
      "Какой приём помогает быстро задать одинаковые отступы внутри разных секций через переменную CSS?",
    options: [
      ":root { --section-gap: 32px; } .section { margin-bottom: var(--section-gap); }",
      ".section { margin-bottom: 32px !important; }",
      ".section { margin-bottom: $section-gap; }",
      ".section { padding-bottom: var(--section-gap); }",
    ],
    correctAnswers: [0],
    descriptions: [
      "Правильно: CSS-переменная --section-gap задаёт единое значение отступов, а var() применяет его.",
      "!important не делает код быстрее поддерживать, а лишь повышает специфичность.",
      "$section-gap — это синтаксис SCSS, а не чистого CSS.",
      "padding-bottom создаёт внутренний отступ, а не внешний, но принцип переменной тот же; однако вопрос про отступы между секциями.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
  {
    id: "css_layout_60",
    title:
      "Как задать одинаковый вертикальный и горизонтальный отступ для всех секций страницы?",
    options: [
      ".section { margin: 32px; }",
      ".section { margin: 0 32px; }",
      ".section { margin: 32px 0; }",
      ".section { padding: 32px; }",
    ],
    correctAnswers: [0],
    descriptions: [
      "Правильно: margin:32px задаёт 32px отступ сверху, снизу, слева и справа.",
      "margin:0 32px задаёт только слева и справа, без вертикальных отступов.",
      "margin:32px 0 задаёт только вертикальные отступы, без горизонтальных.",
      "padding создаёт внутренний отступ, а не внешний между секциями.",
    ],
    moduleId: "css",
    sectionTitle: "Макеты и позиционирование",
    topic: "css_layout",
  },
];
