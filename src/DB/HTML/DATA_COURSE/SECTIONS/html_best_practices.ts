export const html_best_1 = {
  id: "html_best_1",
  title: "Современные практики и стандарты",
  content: `
  ## HTML5 — современный стандарт разметки
  
  HTML5 — это **последняя версия языка разметки HTML**, пришедшая на смену устаревшим версиям (HTML 4.01, XHTML) и ставшая основой современной фронтенд-разработки.
  
  ---
  
  ## Что нового появилось в HTML5
  
  ### 1. **Семантические теги**
  
  HTML5 ввёл новые теги, которые делают структуру страницы более **понятной и логичной**:
  
  - \`<header>\`, \`<footer>\`
  - \`<main>\`, \`<nav>\`
  - \`<section>\`, \`<article>\`, \`<aside>\`
  
  Они помогают в **доступности, SEO и поддержке** кода.
  
  ---
  
  ### 2. **Мультимедиа-теги**
  
  Добавлены встроенные возможности для воспроизведения медиа без плагинов:
  
  - \`<video>\` — видеофайлы
  - \`<audio>\` — аудиофайлы
  - \`<track>\` — субтитры и описание
  
  ---
  
  ### 3. **Расширенные формы**
  
  Новые типы полей и атрибуты:
  
  - \`type="email"\`, \`type="date"\`, \`type="range"\`
  - \`required\`, \`pattern\`, \`placeholder\`
  - Встроенная валидация без JavaScript
  
  ---
  
  ### 4. **Встроенные API**
  
  HTML5 тесно интегрирован с JavaScript и включает поддержку API:
  
  - \`localStorage\`, \`sessionStorage\` — локальное хранилище данных
  - \`Canvas\` — рисование и визуализация
  - \`Geolocation\` — получение местоположения пользователя
  - \`Drag and Drop\`, \`Web Workers\`, \`WebSockets\` и др.
  
  ---
  
  ### 5. **Отказ от устаревших тегов**
  
  HTML5 запрещает использование устаревших и несемантических тегов, таких как:
  
  - \`<font>\`
  - \`<center>\`
  - \`<b>\`, \`<i>\` (заменяются на \`<strong>\` и \`<em>\`)
  
  Вместо этого используются CSS для стилизации и JavaScript для логики.
  
  ---
  
  ## Связь с CSS3 и JavaScript (ECMAScript)
  
  HTML5 работает в связке с:
  
  - **CSS3** — для оформления, адаптивности, анимаций
  - **JavaScript (ES6+)** — для взаимодействия, динамики и логики
  
  Эти три технологии формируют основу frontend-стека.
  
  ---
  
  ## Почему HTML5 важен
  
  - Обеспечивает **семантику и структуру** документа
  - Поддерживается **всеми современными браузерами**
  - Повышает **доступность** и **SEO-качество**
  - Является стандартом при создании **адаптивных, кроссбраузерных, быстрых интерфейсов**
  
  ---
  
  ## Вывод
  
  HTML5 — это не просто обновлённая разметка. Это:
  
  - основа современной frontend-разработки;
  - платформа для создания мощных, доступных и интерактивных интерфейсов;
  - стандарт, который необходимо знать каждому разработчику.
  
  Использование HTML5 в сочетании с CSS3 и JavaScript делает проекты устойчивыми, быстрыми и удобными как для пользователей, так и для разработчиков.
  `.trim(),

  codeExample: `
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <title>Пример страницы на HTML5</title>
</head>
<body>
  <header>
    <h1>DevCourse</h1>
    <nav>
      <ul>
        <li><a href="#">Главная</a></li>
        <li><a href="#">Курсы</a></li>
        <li><a href="#">Контакты</a></li>
      </ul>
    </nav>
  </header>

  <main>
    <section id="intro">
      <h2>Введение</h2>
      <p>Добро пожаловать на сайт курса по фронтенд-разработке.</p>
    </section>

    <section id="features">
      <h2>Главные возможности HTML5</h2>
      <article>
        <h3>Семантика</h3>
        <p>Новые теги улучшают читаемость и структуру кода.</p>
      </article>
      <article>
        <h3>Мультимедиа</h3>
        <p>Встроенные теги <code>&lt;video&gt;</code> и <code>&lt;audio&gt;</code> без плагинов.</p>
      </article>
      <article>
        <h3>Расширенные формы</h3>
        <p>Новые типы полей и встроенная валидация.</p>
      </article>
    </section>

    <section id="about">
      <h2>О нас</h2>
      <p>Мы помогаем вам освоить современные веб-технологии.</p>
    </section>
  </main>

  <footer>
    <p>© 2025 DevCourse</p>
    <p>Контакты: info@devcourse.ru</p>
  </footer>
</body>
</html>
  `,
  resources: ["https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5"],
};
export const html_best_2 = {
  id: "html_best_2",
  title: "Доступность (Accessibility, a11y)",
  content: `
  ## Что такое доступность (Accessibility, a11y)
  
  **Доступность** (англ. *Accessibility*, сокращённо **a11y**, где цифры 11 обозначают число пропущенных букв между «a» и «y») — это подход к созданию веб-интерфейсов, понятных и удобных для всех пользователей, включая людей с ограничениями по зрению, слуху, моторике и когнитивным функциям.
  
  ---
  
  ## Инструменты доступности в HTML
  
  ### 1. Семантические теги
  
  Правильный выбор тегов помогает скринридерам и другим вспомогательным технологиям:
  
  - \`<header>\`, \`<nav>\`, \`<main>\`, \`<section>\`, \`<footer>\`, \`<article>\`  
  - \`<h1>\`–\`<h6>\` — заголовки по иерархии  
  - \`<ul>\`, \`<ol>\`, \`<li>\`, \`<table>\` — для списков и табличных данных
  
  ---
  
  ### 2. Метки \`<label>\` для форм
  
  Каждое поле формы должно быть связано с текстом-меткой \`<label>\` через атрибут \`for\` или вложенную разметку:
  
  \`\`\`html
  <label for="email">Email</label>
  <input type="email" id="email" name="email" />
  \`\`\`
  
  Это позволяет скринридеру корректно озвучить назначение поля, а пользователю — кликать по тексту метки.
  
  ---
  
  ### 3. ARIA-атрибуты
  
  Когда семантики HTML недостаточно, используют ARIA (Accessible Rich Internet Applications):
  
  - \`aria-label\` — явно задаёт текстовую подпись для элемента  
  - \`aria-hidden="true"\` — скрывает элемент от скринридеров  
  - \`role="button"\`, \`role="dialog"\` и др. — уточняют назначение нестандартных элементов
  
  ---
  
  ### 4. Навигация с клавиатуры
  
  Все интерактивные элементы (ссылки, кнопки, поля ввода) должны получать фокус клавишей Tab и поддерживать Enter/Space для активации. Избегайте «ловушек фокуса», когда пользователю нельзя выйти из компонента.
  
  ---
  
  ### 5. Цвет и контраст текста
  
  Контрастность текста определяется отношением яркости (luminance) шрифта к фону. Стандарт WCAG 2.1 рекомендует:
  
  - Для обычного текста — **минимум 4.5:1** (чем выше число, тем легче читать)  
  - Для крупного текста (18px+) — минимум 3:1  
  
  Пример: светло-серый текст на тёмно-сером фоне может иметь контраст 4.5:1 — значит, он достаточно заметен даже для людей со слабым зрением.
  
  ---
  
  ## Почему это важно
  
  - **Законодательство**: законы WCAG и ADA требуют доступности в разных странах  
  - **Улучшение UX**: доступные интерфейсы удобнее всем  
  - **SEO**: семантика и метки помогают поисковикам  
  - **Этика**: инклюзивный подход улучшает репутацию продукта
  
  ---  

  Доступность — это не просто техническое требование, это забота о каждом пользователе.  
  `.trim(),
  codeExample: `
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Пример доступного сайта</title>
</head>
<body>
  <header>
    <h1>Пример доступного сайта</h1>
    <nav aria-label="Главное меню">
      <ul>
        <li><a href="#intro">Введение</a></li>
        <li><a href="#form">Форма обратной связи</a></li>
        <li><a href="#video">Видео</a></li>
      </ul>
    </nav>
  </header>

  <main>
    <section id="intro">
      <h2>Введение</h2>
      <p>Этот пример показывает базовые приёмы доступности (ARIA, семантика, субтитры).</p>
    </section>

    <section id="form">
      <h2>Форма обратной связи</h2>
      <form>
        <label for="name">Имя пользователя:</label><br>
        <input
          type="text"
          id="name"
          name="name"
          placeholder="Иван Иванов"
          required
          aria-required="true"
        ><br><br>

        <label for="email">Email:</label><br>
        <input
          type="email"
          id="email"
          name="email"
          placeholder="user@example.com"
          required
          aria-required="true"
        ><br><br>

        <label for="message">Сообщение:</label><br>
        <textarea
          id="message"
          name="message"
          rows="4"
          placeholder="Ваш отзыв"
        ></textarea><br><br>

        <button type="submit" aria-label="Отправить форму">Отправить</button>
      </form>
    </section>

    <section id="video">
      <h2>Видео с субтитрами</h2>
      <video controls width="320" height="180">
        <source src="video.mp4" type="video/mp4">
        <track
          kind="subtitles"
          srclang="ru"
          label="Русские субтитры"
          src="subtitles_ru.vtt"
          default
        >
        Ваш браузер не поддерживает видео.
      </video>
    </section>
  </main>

  <footer>
    <p>&copy; 2025 Пример a11y</p>
    <p><a href="#intro">Наверх</a></p>
  </footer>
</body>
</html>
  `,
  resources: ["https://developer.mozilla.org/en-US/docs/Web/Accessibility"],
};

export const html_best_3 = {
  id: "html_best_3",
  title: "SEO: микроразметка и структура",
  content: `
  ## SEO и HTML: как разметка влияет на продвижение
  
  HTML играет важнейшую роль в **поисковой оптимизации (SEO)**. Поисковые системы анализируют структуру страницы, чтобы понять, о чём она и как ранжировать её в результатах поиска.
  
  ---
  
  ## Базовые элементы SEO-разметки
  
  ### Заголовки
  
  - Используйте \`<h1>\`–\`<h6>\` по порядку и иерархии
  - На странице должен быть **только один \`<h1>\`**
  - Заголовки помогают поисковикам определить структуру и смысл разделов
  
  ### Списки, таблицы, ссылки
  
  - Семантические теги помогают поисковым роботам **лучше классифицировать контент**
  - \`<ul>\`, \`<ol>\`, \`<li>\`, \`<table>\`, \`<a>\` — делают структуру понятной
  
  ---
  
  ## Мета-теги
  
  - \`<title>\` — уникальный заголовок страницы, **ключевой элемент SEO**
  - \`<meta name="description">\` — краткое описание, отображается в поиске
  - \`<meta name="robots">\` — указывает, можно ли индексировать страницу
  - \`<meta property="og:*">\` и \`<meta name="twitter:*">\` — улучшают отображение ссылок в соцсетях
  
  ---
  
  ## Альтернативный текст изображений
  
  - \`alt\` — обязательный атрибут для каждого изображения
  - Используется при загрузке страницы с ошибкой, а также скринридерами
  - Поисковики также учитывают \`alt\` при индексации изображений
  
  **Пример:**
  
  \`\`\`html
  <img src="product.jpg" alt="Смартфон Samsung Galaxy A54" />
  \`\`\`
  
  ---
  
  ## Микроразметка (Schema.org)
  
  Микроразметка позволяет **точнее описать сущности** на странице — например:
  
  - Товар
  - Отзыв
  - Рецепт
  - Статья
  - Организация
  - Автор и т. д.
  
  ### Способы добавления:
  
  #### 1. Атрибуты \`itemscope\`, \`itemtype\`, \`itemprop\`
  
  \`\`\`html
  <div itemscope itemtype="https://schema.org/Article">
    <h1 itemprop="headline">Как сделать HTML доступным</h1>
    <p itemprop="author">Автор: Алексей</p>
  </div>
  \`\`\`
  
  #### 2. JSON-LD (рекомендуемый способ)
  
  \`\`\`html
  <script type="application/ld+json">
  {
    "@context": "https://schema.org",
    "@type": "Article",
    "headline": "Как сделать HTML доступным",
    "author": {
      "@type": "Person",
      "name": "Алексей"
    }
  }
  </script>
  \`\`\`
  
  ---
  
  ## Структура документа
  
  - Корректная и логичная HTML-структура облегчает анализ контента
  - Использование семантических тегов = лучшее понимание смысла разделов
  - Ошибки в разметке могут **мешать индексации**
  
  ---
  
  ## Валидность HTML
  
  - Код должен проходить валидацию (например, через [https://validator.w3.org](https://validator.w3.org))
  - Это исключает синтаксические ошибки и улучшает поддержку всеми браузерами и поисковиками
  
  ---
  
  ## Вывод
  
  SEO начинается с чистого, структурированного и валидного HTML. Важные аспекты:
  
  - Семантическая разметка
  - Правильные заголовки
  - Метаданные
  - Альтернативный текст для изображений
  - Микроразметка Schema.org
  - Поддержка JSON-LD
  
  Чем понятнее ваша страница для машин, тем выше её шансы попасть в ТОП.
  `.trim(),

  codeExample: `
<article itemscope itemtype="https://schema.org/Article">
<h1 itemprop="headline">Заголовок статьи</h1>
<p itemprop="author">Автор: Роман</p>
</article>
  `,
  resources: ["https://habr.com/ru/articles/715036/"],
};
export const html_best_4 = {
  id: "html_best_4",
  title: "Валидность и линтеры HTML",
  content: `
  ## Валидность HTML и инструменты проверки
  
  **Валидный HTML** — это HTML-код, который соответствует официальным спецификациям. Он корректно читается всеми браузерами, что обеспечивает:
  
  - кроссбраузерность,
  - стабильность вёрстки,
  - правильную работу CSS и JavaScript.
  
  ---
  
  ## Зачем проверять валидность
  
  - Устраняет скрытые ошибки и баги в разметке
  - Повышает **доступность (a11y)** для пользователей с особыми потребностями
  - Влияет на **поисковую оптимизацию (SEO)**:
    - отсутствие \`alt\` у изображений снижает видимость в Google Images;
    - дублирующиеся \`id\` могут нарушить поведение скриптов.
  
  ---
  
  ## Онлайн-проверка валидности
  
  Вы можете использовать официальный валидатор от W3C:
  
  [https://validator.w3.org](https://validator.w3.org)
  
  Просто вставьте код HTML или укажите URL сайта — и получите полный отчёт о проблемах в разметке.
  
  ---
  
  ## Проверка в редакторе кода
  
  Для постоянного контроля валидности в процессе разработки удобно использовать:
  
  ### HTMLHint — линтер для HTML
  
  - Проверяет структуру, атрибуты, теги, пробелы и другие правила
  - Расширение для VS Code:  
    [HTMLHint в Marketplace](https://marketplace.visualstudio.com/items?itemName=mkaufman.HTMLHint)
  
  ---
  
  ### Prettier — автоформатирование HTML/CSS/JS
  
  - Автоматически форматирует ваш код по единому стилю
  - Настройка для VS Code:
  
  \`\`\`json
  {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": true
  }
  \`\`\`
  
  - Расширение:  
    [Prettier в Marketplace](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode)
  
  ---
  
  ### Stylelint — линтер для CSS/SCSS
  
  - Устраняет ошибки в стилях, помогает соблюдать стиль кода
  - Установка:
  
  \`\`\`bash
  npm install --save-dev stylelint stylelint-config-standard
  \`\`\`
  
  - Требуется файл конфигурации \`.stylelintrc\`
  
  ---
  
  ### ESLint — линтер для JS/TS/HTML (в React/SPA)
  
  - Проверяет логику, структуру и стилистику кода JavaScript/TypeScript
  - Может быть настроен на работу с HTML в рамках React-проекта
  - Установка и инициализация:
  
  \`\`\`bash
  npx eslint --init
  \`\`\`
  
  - Расширение:  
    [ESLint в Marketplace](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint)
  
  ---
  
  ## Вывод
  
  Валидность HTML:
  
  - влияет на доступность, SEO и стабильность;
  - помогает избежать мелких, но критичных ошибок;
  - легко поддерживается с помощью линтеров и автоформатеров.
  
  Регулярная проверка кода — привычка, которая отличает новичка от профессионала.
  `.trim(),

  codeExample: `
<!-- Некорректно -->
<img src="photo.jpg">

<!-- Правильно -->
<img src="photo.jpg" alt="Описание изображения" />
  `,
  resources: [
    "https://marketplace.visualstudio.com/items?itemName=mkaufman.HTMLHint",
    "https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode",
    "https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint",
    "https://marketplace.visualstudio.com/items?itemName=stylelint.vscode-stylelint",
    "https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer",
  ],
};
