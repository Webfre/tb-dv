export const html_link_1 = {
  id: "html_link_1",
  title: "Ссылки: <a>, атрибуты href, target, rel",
  content: `
  ## Тег \`<a>\` — создание гиперссылок
  
  HTML-тег \`<a>\` (anchor) используется для создания **ссылок** на другие страницы, разделы, файлы, электронную почту и внешние ресурсы.
  
  Это один из самых важных элементов HTML, так как именно с помощью ссылок обеспечивается **навигация** внутри сайта и между сайтами.
  
  ---
  
  ## Атрибуты тега \`<a>\`
  
  ### \`href\` — путь или адрес
  
  - Основной атрибут, указывающий, **куда ведёт ссылка**
  - Может содержать:
    - абсолютный URL: \`https://example.com\`
    - относительный путь: \`/about\`
    - якорь на страницу: \`#section1\`
    - ссылку на файл: \`/docs/info.pdf\`
    - email-ссылку: \`mailto:info@example.com\`
    - телефон: \`tel:+79991234567\`
  
  **Пример:**
  
  \`\`\`html
  <a href="https://developer.mozilla.org">Перейти на MDN</a>
  \`\`\`
  
  ---
  
  ### \`target="_blank"\` — открыть в новой вкладке
  
  - Указывает браузеру открыть ссылку в **новом окне или вкладке**
  - Используется, когда не хочется терять текущую страницу
  
  **Пример:**
  
  \`\`\`html
  <a href="https://example.com" target="_blank">Открыть сайт</a>
  \`\`\`
  
  ---
  
  ### \`rel="noopener noreferrer"\` — защита и безопасность
  
  - Применяется **всегда вместе с \`target="_blank"\`**
  - Обеспечивает:
    - защиту от угона контекста (tabnabbing)
    - отключение передачи \`Referer\`-заголовка
  
  **Пример:**
  
  \`\`\`html
  <a href="https://example.com" target="_blank" rel="noopener noreferrer">
    Перейти на внешний ресурс
  </a>
  \`\`\`
  
  ---
  
  ## Примеры использования
  
  ### Ссылка-якорь:
  
  \`\`\`html
  <a href="#contacts">Контакты</a>
  ...
  <section id="contacts">...</section>
  \`\`\`
  
  ### Email-ссылка:
  
  \`\`\`html
  <a href="mailto:info@example.com">Написать письмо</a>
  \`\`\`
  
  ### Телефон:
  
  \`\`\`html
  <a href="tel:+79991234567">Позвонить</a>
  \`\`\`
  
  ---
  
  ## Зачем это важно
  
  - Навигация: создаёт переходы между страницами
  - SEO: поисковики учитывают ссылки при ранжировании
  - UX: ссылки — это основа удобства и логики интерфейса
  - Безопасность: правильные атрибуты защищают пользователей
  
  ---
  
  ## Вывод
  
  - \`<a>\` — основной способ навигации в HTML
  - Используй \`target="_blank"\` с \`rel="noopener noreferrer"\` при открытии внешних ссылок
  - Применяй \`mailto:\`, \`tel:\` и якорные ссылки для улучшения взаимодействия
  
  Грамотно оформленные ссылки — это важная часть профессиональной вёрстки и хорошего пользовательского опыта.
  `.trim(),

  codeExample: `
<!-- Ссылка на внешний сайт -->
<a href="https://example.com" target="_blank" rel="noopener noreferrer">
  Открыть сайт в новой вкладке
</a>

<!-- Внутренний якорь -->
<a href="#section-2">Перейти к разделу 2</a>

<!-- Почтовая ссылка -->
<a href="mailto:info@example.com">Написать нам</a>
  `,
  resources: [
    "https://developer.mozilla.org/ru/docs/Web/HTML/Reference/Elements/a",
  ],
};
export const html_link_2 = {
  id: "html_link_2",
  title: "Изображения: <img>, src, alt",
  content: `
  ## Тег \`<img>\` — вставка изображений
  
  Тег \`<img>\` используется для отображения **изображений** на веб-страницах. Это **самозакрывающийся тег**, который не имеет содержимого.
  
  Он широко применяется для добавления иллюстраций, иконок, логотипов, фото и других визуальных элементов.
  
  ---
  
  ## Основные атрибуты
  
  ### \`src\` — путь к изображению
  
  - Указывает, откуда загружать изображение
  - Может быть:
    - абсолютным URL: \`https://example.com/image.jpg\`
    - относительным путём: \`/images/logo.png\`
  
  **Пример:**
  
  \`\`\`html
  <img src="/images/logo.png" alt="Логотип компании" />
  \`\`\`
  
  ---
  
  ### \`alt\` — альтернативный текст
  
  - Показывается, если изображение не загрузилось
  - Обязательно читается **ассистивными технологиями** (например, скринридерами)
  - Используется поисковыми системами для понимания содержимого изображений
  - Требуется для **доступности (a11y)** и **SEO**
  
  **Пример:**
  
  \`\`\`html
  <img src="team.jpg" alt="Фотография команды на конференции" />
  \`\`\`
  
  ---
  
  ## Дополнительные рекомендации
  
  - **Избегай пустого \`alt\`**, если изображение несёт смысл:
    - \`alt=""\` допустимо только для **декоративных** изображений
  - Старайся писать **информативные и короткие** альтернативные тексты
  - Используй **оптимизированные форматы**: WebP, JPEG, PNG в зависимости от контекста
  - Для адаптивных изображений можно использовать \`<picture>\` и атрибуты \`srcset\`, \`sizes\`
  
  ---
  
  ## Примеры
  
  ### Ссылка на внешнее изображение:
  
  \`\`\`html
  <img src="https://via.placeholder.com/150" alt="Пример изображения" />
  \`\`\`
  
  ### Декоративное изображение (не для восприятия):
  
  \`\`\`html
  <img src="decor-line.png" alt="" />
  \`\`\`
  
  ---
  
  ## Зачем это важно
  
  - \`src\` — загружает изображение, отображающееся в интерфейсе
  - \`alt\` — делает сайт **доступным** для всех пользователей
  - Поисковые системы индексируют текст \`alt\` — это важно для **SEO**
  - Без \`alt\` сайт может не соответствовать WCAG-стандартам (Web Content Accessibility Guidelines)
  
  ---
  
  ## Вывод
  
  - Тег \`<img>\` используется для вставки изображений
  - Атрибуты \`src\` и \`alt\` обязательны для корректной работы и доступности
  - Грамотное использование изображений улучшает визуальное восприятие, SEO и UX
  
  Правильное оформление тега \`<img>\` — важный шаг в создании профессионального и доступного веб-интерфейса.
  `.trim(),

  codeExample: `
<!-- Простое изображение -->
<img src="/images/logo.png" alt="Логотип компании" />

<!-- Изображение с абсолютной ссылкой -->
<img src="https://example.com/banner.jpg" alt="Рекламный баннер" />
  `,
  resources: ["https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img"],
};
export const html_link_3 = {
  id: "html_link_3",
  title: "Формат изображений и оптимизация",
  content: `
  ## Форматы изображений в HTML
  
  При работе с изображениями важно учитывать **формат**, так как он влияет на **качество**, **размер файла**, **время загрузки** и **поддержку прозрачности**. Выбор подходящего формата — это часть оптимизации фронтенда.
  
  ---
  
  ### Основные форматы изображений
  
  ### \`JPG / JPEG\`
  
  - Формат с **сжатием с потерями**
  - Хорошо подходит для **фотографий и сложных изображений**
  - Не поддерживает прозрачность
  - Маленький вес при хорошей детализации
  
  **Применение:** фото товаров, фоновые изображения, баннеры
  
  ---
  
  ### \`PNG\`
  
  - Сжатие **без потерь**
  - Поддерживает **прозрачность**
  - Чаще используется для **логотипов, иконок, UI-элементов**, где важна чёткость
  
  **Применение:** элементы интерфейса, изображения с альфа-каналом, иллюстрации
  
  ---
  
  ### \`WebP\`
  
  - **Современный формат** от Google
  - Поддерживает прозрачность и анимации
  - Обеспечивает **лучшую компрессию**, чем JPG и PNG
  - Поддерживается во всех современных браузерах
  
  **Применение:** универсальный выбор для оптимизации сайтов
  
  ---
  
  ### \`SVG\`
  
  - Векторная графика (не зависит от разрешения)
  - Поддерживает стилизацию через CSS и JavaScript
  - Очень лёгкий вес
  - Идеален для **иконок, логотипов, графиков**
  
  **Применение:** логотипы, стрелки, иконки, элементы UI, анимации
  
  ---
  
  ## Рекомендации по оптимизации изображений
  
  ### 1. Используйте современные инструменты
  
  - [Squoosh](https://squoosh.app) — мощный инструмент от Google для сжатия и конвертации форматов
  - [TinyPNG](https://tinypng.com) — сжатие PNG и JPEG без потерь визуального качества
  
  ### 2. Загружайте изображения нужного размера
  
  - Не используйте изображения в 2000px, если они отображаются в 300px
  - Поддерживайте **множество размеров** при необходимости (responsive)
  
  ### 3. Используйте атрибут \`loading="lazy"\`
  
  - Откладывает загрузку изображения, пока оно не попадёт в область видимости
  - Улучшает производительность страницы и экономит трафик
  
  ---
  
  ## Пример с оптимизацией
  
  \`\`\`html
  <img 
    src="/images/product.webp" 
    alt="Изображение продукта" 
    loading="lazy" 
    width="400" 
    height="300" 
  />
  \`\`\`
  
  **Пояснение:**
  
  - \`WebP\` — современный, оптимальный по размеру
  - \`alt\` — описание для доступности и SEO
  - \`loading="lazy"\` — отложенная загрузка
  - \`width\` и \`height\` — помогают браузеру зарезервировать место, избегая смещения контента
  
  ---
  
  ## Вывод
  
  - Выбирай формат изображения в зависимости от типа контента:
    - Фото — \`JPG\`
    - UI — \`PNG\`
    - Все случаи — \`WebP\`
    - Иконки и логотипы — \`SVG\`
  - Используй инструменты для сжатия без потери качества
  - Не забывай про \`alt\` и \`loading="lazy"\` для лучшего UX и производительности
  
  Правильное использование форматов изображений — важная часть фронтенд-оптимизации и улучшения скорости загрузки сайта.
  `.trim(),

  codeExample: `
<!-- Пример с WebP и lazy loading -->
<img
  src="images/photo.webp"
  alt="Горы на закате"
  loading="lazy"
  width="600"
  height="400"
/>
  `,
  resources: [
    "https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Image_types",
    "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attr-loading",
  ],
};
