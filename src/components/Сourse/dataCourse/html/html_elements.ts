export const html_el_1 = {
  id: "html_el_1",
  title: "Блочные и строчные элементы",
  content: `
  ## Элементы и теги в HTML
  
  HTML-документ состоит из **элементов**, задаваемых с помощью **тегов** — специальных конструкций вида \`<имя_тега>...</имя_тега>\`.
  
  Элементы делятся на два ключевых типа по своему поведению в потоке документа:
  
  - **Блочные элементы** (block-level elements)
  - **Строчные элементы** (inline elements)
  
  ---
  
  ## Что такое тег?
  
  **Тег** — это основная строительная единица HTML. Он сообщает браузеру, как интерпретировать или визуализировать определённый фрагмент контента.
  
  Пример простейшего тега:
  
  \`\`\`html
  <p>Привет, мир!</p>
  \`\`\`
  
  Разбор:
  
  - \`<p>\` — открывающий тег
  - \`</p>\` — закрывающий тег
  - \`Привет, мир!\` — содержимое элемента
  
  Есть также **самозакрывающиеся теги**, например: \`<img />\`, \`<input />\`, \`<br />\`.
  
  ---
  
  ## Блочные элементы
  
  Блочные элементы **всегда начинаются с новой строки** и по умолчанию занимают **всю доступную ширину** своего родителя.
  
  Они используются для **структурирования** страницы — деления на логические блоки.
  
  Примеры:
  
  - \`<div>\` — универсальный контейнер
  - \`<section>\` — логический раздел
  - \`<article>\` — отдельная единица контента
  - \`<header>\`, \`<footer>\`, \`<main>\`, \`<aside>\`
  - \`<p>\` — абзац
  - \`<h1>\` — \`<h6>\` — заголовки
  - \`<ul>\`, \`<ol>\`, \`<li>\` — списки
  - \`<form>\`, \`<table>\`
  
  Пример:
  
  \`\`\`html
  <div>
    <h1>Заголовок</h1>
    <p>Это абзац текста.</p>
  </div>
  \`\`\`
  
  Комментарий: \`<div>\` — блочный элемент, содержит другие блочные элементы. Они все выводятся с новой строки.
  
  ---
  
  ## Строчные элементы
  
  Строчные (inline) элементы **не создают переноса строки** и располагаются **внутри текста**. Используются для **форматирования** или **интерактивных вставок**.
  
  Примеры:
  
  - \`<span>\` — универсальный строчный контейнер
  - \`<a>\` — ссылка
  - \`<strong>\`, \`<em>\`, \`<b>\`, \`<i>\` — форматирование текста
  - \`<label>\`, \`<input>\`, \`<select>\`, \`<textarea>\`
  - \`<img>\`, \`<abbr>\`, \`<code>\`
  
  Пример:
  
  \`\`\`html
  <p>Текст с <strong>жирным</strong> и <em>курсивом</em>.</p>
  \`\`\`
  
  Комментарий: строчные элементы встроены внутрь потока текста и не влияют на его структуру.
  
  ---
  
  ## Дополнительно: гибкость через CSS
  
  Хотя HTML определяет блочные и строчные элементы по умолчанию, с помощью CSS можно переопределять поведение любого элемента:
  
  - \`display: block\` — делает элемент блочным
  - \`display: inline\` — делает элемент строчным
  - \`display: inline-block\` — сочетает свойства обоих типов
  
  Это полезно, например, для выравнивания кнопок, иконок или адаптации элементов под дизайн.
  
  ---
  
  ## Важно помнить
  
  - HTML5 допускает вложенность строчных и блочных элементов, но **семантически** лучше сохранять чёткую структуру.
  - Некоторые теги являются **обязательными** в определённых контекстах, например \`<li>\` только внутри \`<ul>\` или \`<ol>\`.
  - Валидация разметки помогает выявить ошибки вложенности.
  
  ---
  
  ## Вывод
  
  - **Блочные элементы** создают структуру и визуальные блоки на странице
  - **Строчные элементы** дополняют содержимое внутри текста без изменения его структуры
  - Понимание различий между этими типами важно для правильной вёрстки, семантики и адаптивного дизайна
  `.trim(),

  codeExample: `
<!-- Блочные элементы -->
<div>
  <h1>Заголовок</h1>
  <p>Первый абзац</p>
  <p>Второй абзац</p>
</div>

<!-- Строчные элементы -->
<p>
  Это <strong>важный</strong> текст, а это <em>курсив</em>.
  Перейти на <a href="https://example.com">сайт</a>.
</p>

<!-- Смешанное использование -->
<div>
  <p>Текст с <span style="color: red;">выделенным словом</span>.</p>
</div>
  `.trim(),

  resources: ["https://puzzleweb.ru/html/types_el.php"],
};

export const html_el_2 = {
  id: "html_el_2",
  title: "Заголовки, параграфы, списки",
  content: `
HTML предоставляет готовые элементы для структурирования текстового контента: **заголовки**, **абзацы** и **списки**. Они позволяют логически разделять и структурировать информацию на странице.

## Заголовки: \`<h1>\` – \`<h6>\`

Заголовки используются для обозначения важности и иерархии разделов на странице.

- \`<h1>\` — главный заголовок (используется один раз на странице).
- \`<h2>\` – \`<h6>\` — подзаголовки разных уровней вложенности.

\`\`\`html
<h1>Заголовок страницы</h1>
<h2>Раздел</h2>
<h3>Подраздел</h3>
\`\`\`

*Совет: не пропускай уровни (не ставь \`<h3>\` сразу после \`<h1>\`). Это важно для SEO и доступности.*

---

## Абзацы: \`<p>\`

Абзацы используются для обычного текста и разделяют логические блоки информации.

\`\`\`html
<p>Это первый абзац. Он содержит обычный текст.</p>
<p>Это второй абзац. Теги <strong>можно комбинировать</strong> внутри абзаца.</p>
\`\`\`

*Абзацы автоматически отделяются вертикальными отступами.*

---

## Списки: \`<ul>\`, \`<ol>\`, \`<li>\`

HTML поддерживает два типа списков:

- **Маркированный список** — \`<ul>\` (unordered list)
- **Нумерованный список** — \`<ol>\` (ordered list)
- Каждый элемент списка обозначается тегом \`<li>\` (list item)

\`\`\`html
<!-- Маркированный список -->
<ul>
  <li>Элемент 1</li>
  <li>Элемент 2</li>
</ul>

<!-- Нумерованный список -->
<ol>
  <li>Шаг 1</li>
  <li>Шаг 2</li>
</ol>
\`\`\`

*Списки могут быть вложенными: \`<ul>\` внутри \`<li>\` и наоборот.*

---

## Важно помнить:

- Заголовки — это **структура страницы**, не просто визуальное оформление.
- Абзацы — для **обычного текста**.
- Списки — для **перечислений** (внутри \`<li>\` можно использовать другие теги, включая заголовки, ссылки и параграфы).

---

## Вывод:

| Тег    | Назначение                       |
|--------|----------------------------------|
| \`<h1>–<h6>\` | Заголовки от самого важного до наименее |
| \`<p>\`       | Абзац текста                  |
| \`<ul>\`      | Маркированный список         |
| \`<ol>\`      | Нумерованный список          |
| \`<li>\`      | Пункт списка                 |

Эти элементы — основа **текстовой структуры** любой веб-страницы.
  `.trim(),

  codeExample: `
<h1>Обо мне</h1>

<p>Меня зовут Алекс. Я frontend-разработчик с опытом работы в HTML, CSS и JavaScript.</p>

<h2>Навыки</h2>
<ul>
  <li>HTML5</li>
  <li>CSS3</li>
  <li>JavaScript (ES6+)</li>
</ul>

<h2>План развития</h2>
<ol>
  <li>Углубить знание TypeScript</li>
  <li>Изучить React на уровне Senior</li>
  <li>Создать pet-проект и выложить на GitHub</li>
</ol>
  `.trim(),
};

export const html_el_3 = {
  id: "html_el_3",
  title: "Теги форматирования текста",
  content: `
HTML предоставляет набор **тегов форматирования**, с помощью которых можно выделять текст визуально и семантически. Некоторые из них придают **визуальный стиль**, другие — **семантическое значение**, что важно для доступности (a11y) и SEO.

## Визуальное vs семантическое форматирование

| Тег     | Визуальный эффект   | Семантика            |
|---------|---------------------|-----------------------|
| \`<b>\`     | Жирный текст          | Нет (чисто визуальный) |
| \`<strong>\`| Жирный + важно        | Да (важное содержание) |
| \`<i>\`     | Курсив               | Нет (например, стилизация) |
| \`<em>\`    | Курсив + акцент       | Да (логическое выделение) |
| \`<u>\`     | Подчёркнутый текст   | Нет (визуальное подчёркивание) |

---

## Семантика имеет значение

- \`<strong>\` сообщает: “Это **важно**” → поисковики и скринридеры реагируют соответствующим образом.
- \`<em>\` сообщает: “Это **подчёркнутая смысловая интонация**”.
- \`<b>\` и \`<i>\` — просто делают текст жирным или курсивным **без смысловой нагрузки**.

---

## Примеры использования

\`\`\`html
<p>
  Этот <b>текст жирный</b>, а этот <strong>семантически важный</strong>.
</p>

<p>
  <i>i — просто курсив</i>, но <em>em — акцент, интонация</em>.
</p>

<p>
  <u>Подчёркнутый текст</u> может использоваться для ссылок или стилистических целей.
</p>
\`\`\`

---

## Когда использовать какой тег?

- \`<strong>\` — для **важных предупреждений**, акцентов:  
  “<strong>Опасно:</strong> данные будут удалены навсегда.”
- \`<em>\` — для **интонационных акцентов**:  
  “Я <em>действительно</em> это сделал.”
- Не злоупотребляй \`<b>\`, \`<i>\` и \`<u>\` — используй их только если тебе **нужен только стиль**, а не смысл.

---

## Вложенные акценты

\`\`\`html
<p><strong><em>Очень важный акцент!</em></strong></p>
\`\`\`

*Работает, но стоит избегать чрезмерной вложенности.*

---

## Вывод:

| Тег        | Для чего использовать            |
|------------|----------------------------------|
| \`<b>\`        | Для визуального выделения без семантики |
| \`<strong>\`   | Для **важных** фраз или предупреждений |
| \`<i>\`        | Для стилизованных слов (латиница, названия) |
| \`<em>\`       | Для смысловых акцентов, интонации |
| \`<u>\`        | Для подчеркивания, редко используется напрямую |

Использование **семантически верных тегов** делает ваш HTML более доступным, логичным и понятным как для браузеров, так и для пользователей.
  `.trim(),

  codeExample: `
<p>
  <strong>Важно:</strong> сохраните изменения перед выходом.
</p>

<p>
  Я <em>уверен</em>, что это работает.
</p>

<p>
  Название переменной: <i>userName</i>
</p>

<p>
  <b>Визуально жирный</b>, но <strong>семантически жирный</strong>.
</p>

<p>
  <u>Подчеркнутое</u> слово.
</p>
  `.trim(),
};
