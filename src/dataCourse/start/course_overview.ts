export const course_overview_1 = {
  id: "course_overview_1",
  title: "Что такое frontend-разработка",
  content: `
Frontend-разработка — это создание интерфейса веб-приложений, того, что **видит и с чем взаимодействует пользователь** в браузере. Кнопки, формы, таблицы, меню, анимации — всё это реализуется на frontend'е.

Frontend — это часть веб-разработки, ориентированная на **визуальное представление и пользовательский опыт**.

---

### Что включает в себя frontend?

Frontend включает в себя три ключевых технологии:
1. **HTML** — структура и разметка страницы  
2. **CSS** — оформление и стили  
3. **JavaScript** — интерактивность и поведение элементов

Также frontend-разработчик использует:
- фреймворки и библиотеки: **React, Vue, Angular**
- препроцессоры: **Sass, LESS**
- сборщики: **Vite, Webpack**
- средства тестирования: **Jest, Testing Library**
- систему контроля версий: **Git**

---

### Чем frontend отличается от backend?

| Frontend                    | Backend                          |
|----------------------------|----------------------------------|
| Интерфейс пользователя      | Серверная логика                 |
| Работает в браузере         | Работает на сервере              |
| HTML, CSS, JS               | Node.js, PHP, Python, Java и др.|
| React, Vue, Angular         | Express, NestJS, Django и др.   |
| UI, UX                      | База данных, API, авторизация   |

---

### Где используется frontend?

- Веб-сайты и лендинги
- Онлайн-магазины и сервисы
- Веб-приложения (чат, CRM, доски задач)
- Образовательные платформы и т.д.

---

### Зачем изучать frontend?

- Быстрый старт: можно увидеть результат в браузере с первых строк кода
- Востребованность: тысячи вакансий, рост спроса
- Креативная работа: дизайн + программирование
- Возможность фриланса и удалённой работы

---

### Вывод

Frontend — это всё, что делает сайт "живым" и удобным для пользователя.  
Знание frontend — это первый шаг к карьере в веб-разработке.  
Именно с него начинается путь разработчика в нашем курсе.
  `.trim(),
};

export const course_overview_2 = {
  id: "course_overview_2",
  title: "Кто такой frontend-разработчик",
  content: `
Frontend-разработчик — это специалист, который **создаёт пользовательский интерфейс** веб-приложений и сайтов. Он отвечает за то, что видит и с чем взаимодействует пользователь: кнопки, меню, формы, анимации, адаптивность и внешний вид страниц.

---

### Что делает frontend-разработчик?

- Размечает страницы с помощью **HTML**
- Оформляет их с помощью **CSS** (цвета, шрифты, отступы, сетка)
- Добавляет поведение и динамику через **JavaScript**
- Работает с **React, Vue, Angular**
- Взаимодействует с сервером через **API**
- Делает сайт адаптивным (под телефоны и планшеты)
- Пишет **чистый, поддерживаемый и кроссбраузерный код**

---

### Где работает frontend-разработчик?

- В IT-компаниях, студиях, стартапах
- На фрилансе
- В продуктовых компаниях (например, банки, маркетплейсы, сервисы доставки)
- В международных проектах

---

### Как называют frontend-разработчиков?

В вакансиях и проектах можно встретить разные названия, которые означают почти одно и то же:

| Название                    | Что имеется в виду                 |
|-----------------------------|------------------------------------|
| Frontend Developer          | Классическое название              |
| Web Developer               | Может включать и frontend, и backend |
| UI Developer                | Фокус на интерфейс                 |
| React Developer             | Уточнение по стеку (React)         |
| JavaScript Developer        | Может быть как frontend, так и Node.js |
| HTML/CSS Developer          | Упрощённая роль (верстальщик)      |
| Junior Frontend Engineer    | Начинающий разработчик             |

---

### Какие навыки нужны frontend-разработчику?

- HTML, CSS, JavaScript
- Понимание DOM и событий
- Адаптивная и кроссбраузерная верстка
- Работа с Git и терминалом
- React (или Vue, Angular)
- Основы TypeScript, если продвинутый уровень
- Навыки отладки и работы в DevTools

---

### Как выглядит рабочий день frontend-разработчика?

- Утро — планирование задач (например, на Kanban-доске)
- Днём — разработка фич, исправление багов
- Создание компонентов, подключение данных, стилизация
- Вечером — коммиты, ревью, общение в команде

---

### Вывод

Frontend-разработчик — это тот, кто превращает дизайн в **живую страницу**, работает с пользователями через код и делает интерфейс удобным.  
Это профессия, сочетающая **технические и визуальные навыки**, и она открыта для новичков, которые готовы учиться шаг за шагом.
  `.trim(),

  codeExample: `
<!-- Мини-пример: работа frontend-разработчика -->
<div class="card">
  <h2>Привет, мир!</h2>
  <button onclick="alert('Вы нажали кнопку')">Нажми</button>
</div>
  `.trim(),
};

export const course_overview_0 = {
  id: "course_overview_0",
  title: "Нужны ли навыки программирования?",
  content: `
Короткий ответ: **да, но начать можно и без них**.

Frontend-разработка — это не только код, но и **работа с интерфейсом, визуальным оформлением и взаимодействием с пользователем**. На старте важно понимать базовые вещи: как устроен HTML, как задать стиль в CSS, как работает кнопка на странице.

---

### Что такое «навыки программирования»?

Под этим обычно понимают умение:

- Писать **алгоритмы** (например, что делать при клике на кнопку)
- Использовать **переменные**, **условия** и **циклы**
- Понимать, как устроен **JavaScript-код**
- Работать с **событиями** и **логикой интерфейса**

---

### Можно ли начать без опыта программирования?

**Да, если ты готов учиться.**  
Ты можешь начать с HTML и CSS — они ближе к оформлению и не требуют знаний программирования.

Затем, шаг за шагом, ты освоишь:
- основы JavaScript,
- работу с элементами страницы (DOM),
- реакцию на действия пользователя (события),
- и построишь динамический интерфейс.

---

### Пример: программирование vs верстка

| Задача                         | Верстка (без JS) | Программирование (с JS) |
|-------------------------------|------------------|--------------------------|
| Показать текст и картинку     | ✅ Да            | Не нужно                |
| Поменять текст по клику       | ❌ Нет           | ✅ Да                   |
| Открыть модальное окно        | ❌ Нет           | ✅ Да                   |
| Проверить форму перед отправкой | ❌ Нет           | ✅ Да                   |
| Анимировать карточку по наведению | ✅ Да      | ❌ Нет           |

---

### Навыки программирования: зачем они нужны?

- Чтобы делать интерфейс **интерактивным**
- Чтобы работать с **данными из API**
- Чтобы **реагировать на действия пользователя**
- Чтобы писать **гибкие и масштабируемые компоненты** (например, в React)

---

### Вывод

Чтобы стать frontend-разработчиком, **знание программирования со временем становится необходимым**. Но начать можно с малого — с HTML и CSS.  
А уже затем, постепенно, ты освоишь JavaScript и начнёшь программировать поведение своего интерфейса.
  `.trim(),
};

export const course_overview_3 = {
  id: "course_overview_3",
  title: "Как устроен этот курс",
  content: `
Этот курс создан специально для **начинающих**, которые только знакомятся с frontend-разработкой. Мы идём пошагово — от самых основ до реальных практических задач.  
Даже если вы никогда не писали код, вы сможете освоить всё с нуля.

---

### Что вас ждёт внутри курса:

-  **Темы и главы**, выстроенные от простого к сложному
-  **Тесты** после каждой темы, чтобы проверить и закрепить знания
-  **Практические задачи**, чтобы применить знания в коде
-  **Задачник** с дополнительными упражнениями
-  **Флешбек** — система повторения пройденного
-  **Прогресс** — вы всегда видите, что уже изучили и что дальше

---

### Как проходить курс:

1. Читайте теоретический материал
2. Выполняйте тесты по каждой теме
3. Решайте задачи
4. Повторяйте ключевые моменты с помощью флешбек-системы
5. Собирайте проекты — добавляйте их в портфолио
6. Готовьтесь к собеседованиям в специальном разделе

---

### Что вы получите:

- Чёткое понимание, как работает HTML, CSS, JavaScript, React
- Навык писать чистый, структурированный код
- Уверенность в своих знаниях
- Первое портфолио (проекты и задачи)
- Базу для подготовки к собеседованиям

---

### Кому подходит этот курс?

-  Тем, кто **никогда не программировал**
-  Тем, кто **переквалифицируется в IT**
-  Студентам и школьникам, выбирающим направление
-  Начинающим разработчикам, которым не хватает базы

---

### Какой уровень вы получите?

Если вы:
- пройдёте все темы,
- сдадите тесты,
- выполните практические задачи,

то по итогам курса ваш уровень будет соответствовать **Junior уровня (начинающий)**, а в некоторых темах — **уверенному Trainee+**.

---

### Вывод

Этот курс — ваш первый шаг в профессию.  
Он даст вам не просто знания, а **понимание, практику и структуру**, чтобы продолжать расти как frontend-разработчик.
  `.trim(),
};

export const course_overview_4 = {
  id: "course_overview_4",
  title: "Что делать после курса",
  content: `
Поздравляем! Если вы дошли до конца курса, выполнили все задания и сдали тесты — вы уже далеко не новичок.  
Теперь самое важное — **не останавливаться** и продолжать развиваться.

---

### 1. Соберите портфолио

Возьмите лучшие задачи и проекты из курса и оформите их как:
- GitHub-репозитории с README-файлом
- Локальные демо или ссылки на GitHub Pages
- Примеры с кодом и описанием вашего подхода

**Портфолио — это ваш главный инструмент на собеседованиях.**

---

### 2. Пройдите собеседования (или хотя бы подготовку)

У нас в курсе есть специальный раздел **"Собеседование"**, где:
- популярные вопросы по HTML, CSS, JS, React
- задачи на логику и код
- примеры правильных ответов

Рекомендуем: проходить по 1 теме в день и пробовать решать задачи устно — как будто вы на реальном интервью.

---

### 3. Повторяйте и закрепляйте

Даже после окончания курса:
- заходите в **флешбек** и повторяйте материалы
- решайте задачи из **задачника**
- пробуйте писать код **без подсказок**

---

### 4. Двигайтесь дальше

Вы уже знаете основы, теперь можно переходить к более сложным темам:
- React Router, Redux, RTK Query
- TypeScript на продвинутом уровне
- Тестирование (Jest, Testing Library)
- Оптимизация, безопасность, архитектура

---

### 5. Попробуйте фриланс или стажировку

- Сделайте профиль на GitHub
- Зарегистрируйтесь на фриланс-платформах (freelancehunt, upwork и др.)
- Пробуйте откликаться на стажировки для Junior-разработчиков

---

### 6. Подключайтесь к сообществу

Frontend — это живое и дружелюбное сообщество.  
Рекомендуем:
- подписаться на Telegram-каналы и YouTube по разработке
- участвовать в хакатонах и конкурсах
- вести заметки или блог о том, чему учитесь

---

### Вывод

Завершение курса — это **не конец, а начало реального пути**.  
У вас уже есть база, структура, практика и понимание.  
Дальше — только рост, новые вызовы и переход к уровню **Middle-разработчика**.

Удачи вам на этом пути!
  `.trim(),
};

export const course_overview_5 = {
  id: "course_overview_5",
  title: "Курс: Frontend-разработчик React (продвинутый)",
  content: `
Если вы завершили **Курс: Frontend-разработчик React (базовый)** и уверенно чувствуете себя с HTML, CSS, JavaScript и React — пора переходить на новый уровень.  
**продвинутый курс** — это наш расширенный путь до **Junior / Junior+ frontend-разработчика**.

---

### Что включает Курс: Frontend-разработчик React (продвинутый)?

Глубокая практика
- Настройка проекта с нуля: сборка, линтеры, алиасы, архитектура
- Создание кастомных компонентов и дизайн-систем
- Типизация всего с использованием TypeScript
- Роутинг, защита маршрутов, лэйауты, ленивые загрузки
- Управление данными: Redux Toolkit, RTK Query, кэширование

Архитектура и принципы
- Разбор архитектурных паттернов и проектирования приложений
- Feature-Sliced Design (FSD) на практике
- Модули, слои, переиспользуемость компонентов
- SOLID, DRY, KISS — как применять эти принципы в реальном коде

Работа в команде
- Работа с наставником и code review
- Обсуждение решений, комментарии, улучшения
- Использование Git, Pull Request, ветвление, Git Flow
- Задачи с разными ролями: разработчик, ревьюер, автор

Реальные кейсы
- Сложные формы с валидацией и автосохранением
- Таблицы и фильтрация, пагинация, drag-and-drop
- Авторизация, роли, защита данных
- Интеграция с backend и мок-серверами

Качество и тесты
- Unit и интеграционные тесты компонентов (Jest + RTL)
- Моки, coverage, тестирование логики и запросов

Что вы прокачаете:
- Умение проектировать приложение с нуля
- Опыт командной разработки и code review
- Глубокое понимание React + TypeScript
- Навыки для выхода на уровень Middle

В конце курса вы:
- Сможете собирать реальные SPA-проекты
- Получите портфолио с продвинутыми задачами
- Будете уверенно проходить собеседования на Junior+/Middle позиции
- Поймёте, как писать код не просто "чтобы работало", а правильно

---

### Чем отличается от базового?

| Базовый курс                | PRO-курс                           |
|----------------------------|------------------------------------|
| Основы и теория            | Практика, архитектура, паттерны    |
| Простые задачи             | Реальные фичи из проектов          |
| Учебные модули             | Похожие на настоящую разработку   |
| Один студент               | Работа в **командных проектах**   |
| Минимум инфраструктуры     | Git, Code Review, задачи по ролям |

---

### Уровень после прохождения PRO-курса:

- Уверенный **Junior+**
- Готовность к позициям **Frontend Developer Junior+ / Middle**
- Собрано **минимум 10–12 проекта в портфолио**
- Понимание **производственного процесса** (Git-flow, CI/CD, Review)
- Готовность к техническому собеседованию

---

### Вывод

**продвинутый курс** — это следующий шаг. Это уже не просто обучение, а **моделирование реальной frontend-разработки**.  
Если ты хочешь не просто «знать», а **делать**, **проектировать** и **разрабатывать как в бою** — этот курс для тебя.

Добро пожаловать в продвинутую часть курса.  
Здесь начинается твой переход к **настоящей разработке**.
  `.trim(),

  codeExample: `
  /*
    PRO-курс — это уже не просто обучение.
  
    Здесь ты не просто "учишься", а становишься частью команды.
    Ты пишешь реальный код, проходишь ревью, создаёшь фичи и решаешь проблемы.
  
    Здесь начинается разработка по-настоящему.
  
    Добро пожаловать в PRO.
    Ты уже на другой ступени.
  */
    `.trim(),
};
