export const js_intro1 = {
  id: "js_intro_1",
  title: "Что такое JavaScript",
  type: "js",
  content: `  
  JavaScript — это **высокоуровневый, интерпретируемый язык программирования**, который делает веб-страницы интерактивными. Вместе с HTML и CSS он образует тройку основных технологий веб-разработки.

  ### Основные характеристики JavaScript:
  
  - **Динамическая типизация** - типы данных определяются автоматически во время выполнения
  - **Интерпретируемый язык** - код выполняется построчно без предварительной компиляции
  - **Мультипарадигменный** - поддерживает процедурное, ООП и функциональное программирование
  - **Платформонезависимый** - работает во всех современных браузерах
  - **Событийно-ориентированный** - реагирует на действия пользователя
  
  ### Роль JavaScript в веб-разработке:
  
  1. **HTML** - структура и содержание страницы
  2. **CSS** - внешний вид и оформление
  3. **JavaScript** - поведение и интерактивность
  
  ### Что можно делать с помощью JavaScript?
  
  - Добавлять интерактивность на страницы
  - Создавать анимации и динамические эффекты
  - Обрабатывать пользовательские события (клики, ввод и т.д.)
  - Отправлять и получать данные с сервера (AJAX)
  - Работать с локальным хранилищем (Cookies, LocalStorage)
  - Создавать одностраничные приложения (SPA)
  
  ### Как работает JavaScript в браузере?
  
  JavaScript выполняется в **окружении браузера**:
  
  1. Браузер загружает HTML и CSS
  2. Создаётся DOM (Document Object Model)
  3. Выполняется JavaScript код
  4. JavaScript может изменять DOM и CSSOM
  
  ### Основные концепции JavaScript:
  
  - Переменные (let, const, var)
  - Типы данных (числа, строки, булевы значения и др.)
  - Операторы (арифметические, логические, сравнения)
  - Условные конструкции (if...else, switch)
  - Циклы (for, while)
  - Функции
  `.trim(),

  codeExample: `
// Это комментарий в JavaScript
let message = "Привет, мир!"; // объявление переменной
console.log(message); // вывод в консоль

// Условная конструкция
if (message.length > 0) {
  alert(message); // показ всплывающего окна
}
  `.trim(),

  resources: [
    "https://developer.mozilla.org/ru/docs/Web/JavaScript",
    "https://learn.javascript.ru/",
  ],
};

export const js_intro2 = {
  id: "js_intro_2",
  title: "Подключение JavaScript в HTML",
  content: `
  JavaScript можно подключить к HTML-странице несколькими способами. От выбранного метода зависят скорость загрузки, порядок выполнения и доступность кода.

  ### Основные способы подключения:

  1. **Inline-скрипты** (прямо в HTML)
  2. **Внутренние скрипты** (в теге \<script>)
  3. **Внешние скрипты** (через файл .js)

  ### 1. Inline-скрипты (встроенные в HTML-атрибуты)

  \`\`\`html
  <button onclick="alert('Клик!')">Нажми меня</button>
  \`\`\`

  **Плюсы:**
  - Быстрое добавление простых действий
  - Не требует отдельного файла

  **Минусы:**
  - Сложно поддерживать
  - Нарушает принцип разделения кода (HTML/JS)
  - Не кэшируется браузером

  ### 2. Внутренние скрипты (в теге \<script>)

  \`\`\`html
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      console.log('DOM загружен!');
    });
  </script>
  \`\`\`

  **Плюсы:**
  - Весь код в одном файле
  - Быстрое прототипирование

  **Минусы:**
  - Загромождает HTML
  - Не кэшируется отдельно
  - Сложно использовать на нескольких страницах

  ### 3. Внешние скрипты (отдельный .js файл)

  \`\`\`html
  <!-- Подключение в head -->
  <head>
    <script src="script.js" defer></script>
  </head>

  <!-- Подключение перед </body> -->
  <body>
    <!-- HTML-код -->
    <script src="script.js"></script>
  </body>
  \`\`\`

  **Плюсы:**
  - Чистое разделение HTML и JS
  - Кэширование браузером
  - Повторное использование на многих страницах
  - Лучшая производительность при правильном подключении

  **Минусы:**
  - Требует дополнительного HTTP-запроса
  - Нужно следить за порядком подключения

  ### Атрибуты тега \<script>

  - **async** - скрипт выполняется асинхронно (как только загрузится)
  - **defer** - скрипт выполняется после загрузки DOM (сохраняет порядок)
  - **type="module"** - поддержка ES6 модулей

  ### Рекомендации по подключению:

  1. Основные скрипты подключайте с **defer** в \<head>
  2. Критически важный код можно встроить прямо в HTML
  3. Большие библиотеки загружайте через CDN
  4. Используйте **async** для независимых скриптов (аналитика, реклама)
  5. Для современных приложений используйте модули (type="module")`,
  codeExample: `
  // Пример правильного подключения:
  <!DOCTYPE html>
  <html>
  <head>
    <title>Моя страница</title>
    <script src="main.js" defer></script>
    <script src="analytics.js" async></script>
  </head>
  <body>
    <!-- Контент страницы -->
    <script>
      // Небольшой критически важный код
      console.log('Страница загружается');
    </script>
  </body>
  </html>
  `.trim(),

  resources: [
    "https://developer.mozilla.org/ru/docs/Web/HTML/Element/script",
    "https://learn.javascript.ru/script-async-defer",
  ],
};

export const js_intro3 = {
  id: "js_intro_3",
  title: "Как работает JavaScript? Основы",
  type: "js",
  content: `
  JavaScript — это язык, который делает сайты "живыми". Давайте разберём, как он работает, на простых примерах.

  ### 1. Интерпретация кода
  JavaScript не требует компиляции как C++ или Java. Браузер читает и выполняет код построчно:

  \`\`\`js
  let x = 5;     // 1. Создаём переменную
  x = x + 2;     // 2. Меняем её значение
  alert(x);      // 3. Выводим результат (7)
  \`\`\`

  ### 2. Где выполняется код?
  - **В браузере**: Chrome, Firefox, Edge
  - **На сервере**: Node.js
  - **В мобильных приложениях** (React Native)

  ### 3. Основные компоненты движка JS:
  
  - **Call Stack** (стек вызовов) — очередь выполнения операций
  - **Heap** (куча) — хранилище для объектов
  - **Web APIs** — дополнительные возможности (таймеры, AJAX)
  - **Callback Queue** — очередь обратных вызовов

  ### 4. Простой пример работы:
  \`\`\`js
  function greet(name) {
    return 'Привет, ' + name;
  }
  
  let message = greet('Анна'); // 1. Вызов функции
  console.log(message);         // 2. Вывод: "Привет, Анна"
  \`\`\`

  Что происходит:
  1. Функция greet добавляется в Call Stack
  2. Создаётся переменная message
  3. Результат выводится в консоль

  ### 5. Асинхронный JavaScript (основы)
  JS умеет выполнять операции без блокировки основного потока:

  \`\`\`js
  console.log('Старт');          // 1. Выполняется сразу

  setTimeout(() => {
    console.log('Через 2 сек');  // 3. Выполнится после ожидания
  }, 2000);

  console.log('Конец');          // 2. Выполняется сразу
  \`\`\`

  ### 6. Взаимодействие с HTML (DOM)
  JavaScript может менять страницу:

  \`\`\`html
  <button id="myBtn">Кликни</button>
  <script>
    document.getElementById('myBtn').onclick = function() {
      this.textContent = "Кнопка нажата!";
    };
  </script>
  \`\`\`

  ### Основные принципы:
  1. **Однопоточность** — код выполняется по одному блоку за раз
  2. **Неблокирующий** — асинхронные операции не тормозят страницу
  3. **Событийный** — реагирует на действия пользователя
  4. **Динамический** — типы данных определяются автоматически

  ### Жизненный цикл скрипта:
  1. Загрузка HTML
  2. Выполнение JS (сверху вниз)
  3. Ожидание событий (клики, таймеры)
  4. Выполнение обработчиков событий
  `.trim(),

  codeExample: `
// Демонстрация работы JS
let count = 0;

function updateCounter() {
  count++;
  document.getElementById('counter').textContent = count;
}

// Вызываем функцию при клике
document.getElementById('btn').addEventListener('click', updateCounter);

/* HTML для этого кода:
<button id="btn">+1</button>
<p>Счётчик: <span id="counter">0</span></p>
*/
  `.trim(),

  resources: [
    "https://developer.mozilla.org/ru/docs/Web/JavaScript/EventLoop",
    "https://learn.javascript.ru/event-loop",
  ],
};

export const js_intro4 = {
  id: "js_intro_4",
  title: "Переменные: let, const и var",
  type: "js",
  content: `
  В JavaScript есть три способа объявления переменных: \`var\`, \`let\` и \`const\`. Разберём их отличия и особенности.

  ### 1. Объявление переменных
  
  **Синтаксис:**
  \`\`\`js
  var oldVariable = "value";    // Устаревший способ (ES5)
  let changeable = "value";     // Можно изменить (ES6)
  const constant = "value";      // Нельзя изменить (ES6)
  \`\`\`

  ### 2. Основные отличия
  
  | Характеристика | \`var\` | \`let\` | \`const\` |
  |----------------|--------|--------|----------|
  | Область видимости | Функция | Блок \`{ }\` | Блок \`{ }\` |
  | Поднятие (hoisting) | Да (с инициализацией \`undefined\`) | Да (без инициализации) | Да (без инициализации) |
  | Можно переопределить | Да | Да | Нет |
  | Можно изменить значение | Да | Да | Нет* |
  | Глобальная переменная | Создаёт свойство \`window\` | Не создаёт | Не создаёт |

  *Для объектов и массивов, объявленных через \`const\`, можно менять внутреннее состояние.

  ### 3. Примеры и особенности
  
  **Область видимости:**
  \`\`\`js
  if (true) {
    var a = 1;    // Видна вне блока
    let b = 2;    // Видна только в блоке
    const c = 3;  // Видна только в блоке
  }
  console.log(a); // 1
  console.log(b); // Ошибка: b is not defined
  \`\`\`

  **Hoisting (поднятие):**
  \`\`\`js
  console.log(x); // undefined (var поднимается)
  var x = 10;
  
  console.log(y); // Ошибка (let/const не инициализируются)
  let y = 20;
  \`\`\`

  **Const с объектами:**
  \`\`\`js
  const user = { name: "Alex" };
  user.name = "Max";    // Можно!
  user = { name: "Bob" }; // Ошибка!
  \`\`\`

  ### 4. Плюсы и минусы
  
  **\`var\`:**
  - ✅ Поддержка в старых браузерах
  - ❌ Устарел, не имеет блочной области видимости
  - ❌ Создаёт свойства в глобальном объекте
  
  **\`let\`:**
  - ✅ Блочная область видимости
  - ✅ Не добавляется в \`window\`
  - ❌ Можно случайно переопределить
  
  **\`const\`:**
  - ✅ Защита от случайного переопределения
  - ✅ Явно показывает константы
  - ❌ Требует инициализации при объявлении

  ### 5. Рекомендации
  
  1. Всегда используйте \`const\` по умолчанию
  2. Используйте \`let\` только когда нужно изменить значение
  3. Избегайте \`var\` в новом коде
  4. Для констант используйте UPPER_CASE:
     \`\`\`js
     const MAX_SIZE = 100;
     \`\`\`

  ### 6. Особенности инициализации
  
  **Правильная инициализация:**
  \`\`\`js
  let count;        // Объявление без значения (undefined)
  count = 10;       // Присваивание позже
  
  const PI = 3.14;  // Обязательно присвоить значение
  \`\`\`

  **Неправильное использование:**
  \`\`\`js
  const VALUE;      // Ошибка: Missing initializer
  VALUE = 5;
  
  let 1num = 10;    // Ошибка: Нельзя начинать с цифры
  \`\`\`
  `.trim(),

  codeExample: `
// Практический пример использования
// Пример 1: Простые переменные
let age = 25;          // Можно изменить
age = 26;              // Корректно
console.log(age);      // Выведет: 26

const birthYear = 1998; // Нельзя изменить
// birthYear = 2000;    // Ошибка!
console.log(birthYear); // Выведет: 1998

// Пример 2: Разница областей видимости
if (true) {
  let blockVar = "видна только в блоке";
  const blockConst = "тоже только в блоке";
  var oldVar = "видна снаружи блока"; 
}
console.log(oldVar);    // Работает
// console.log(blockVar); // Ошибка - не определена
// console.log(blockConst); // Ошибка - не определена

// Пример 3: Повторное объявление
var user = "Anna";
var user = "Max";      // Работает (проблема!)

let score = 100;
// let score = 200;     // Ошибка - уже объявлена

const pi = 3.14;
// const pi = 3.1415;  // Ошибка - уже объявлена

// Пример 4: Инициализация
let name;              // Объявили без значения
name = "Alex";         // Присвоили позже
console.log(name);     // "Alex"

const greeting;        // Ошибка - const требует значения
// greeting = "Hello";

// Пример 5: Правила именования
const MAX_SIZE = 10;   // Константы в верхнем регистре
let $price = 99.99;    // Можно начинать с $
let _temp = 36.6;      // Можно начинать с _

// let 2people = 2;    // Ошибка - начало с цифры
// let let = "text";   // Ошибка - ключевое слово
  `.trim(),

  resources: [
    "https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/let",
  ],
};

export const js_intro5 = {
  id: "js_intro_5",
  title: "Типы данных в JavaScript",
  type: "js",
  content: `
  В JavaScript есть несколько основных типов данных. Они делятся на **примитивные** и **ссылочные** типы.

  ### 1. Примитивные типы (хранят значение напрямую)

  1. **number** - числа:
     \`\`\`js
     let age = 25;
     let price = 99.99;
     \`\`\`

  2. **string** - строки (текст):
     \`\`\`js
     let name = "Анна";
     let message = 'Привет';
     \`\`\`

  3. **boolean** - логический тип (true/false):
     \`\`\`js
     let isActive = true;
     let isAdmin = false;
     \`\`\`

  4. **null** - специальное значение "ничего":
     \`\`\`js
     let user = null;
     \`\`\`

  5. **undefined** - значение не определено:
     \`\`\`js
     let x;
     console.log(x); // undefined
     \`\`\`

  6. **symbol** (ES6) - уникальный идентификатор:
     \`\`\`js
     let id = Symbol("id");
     \`\`\`

  7. **bigint** - большие целые числа (ES2020):
     \`\`\`js
     let bigNum = 9007199254740991n;
     let huge = BigInt("12345678901234567890");
     \`\`\`

  ### 2. Ссылочные типы (хранят ссылку на значение)

  1. **object** - коллекция свойств:
     \`\`\`js
     let person = {
       name: "Мария",
       age: 30
     };
     \`\`\`

  2. **array** - упорядоченный список:
     \`\`\`js
     let colors = ["красный", "зелёный", "синий"];
     \`\`\`

  ### 3. Особенности типов

  - **Динамическая типизация** - тип определяется автоматически:
    \`\`\`js
    let value = "текст"; // string
    value = 123;        // теперь number
    \`\`\`

  - **Проверка типа** с помощью \`typeof\`:
    \`\`\`js
    console.log(typeof 42);        // "number"
    console.log(typeof "текст");  // "string"
    console.log(typeof true);     // "boolean"
    console.log(typeof null);     // "object" (историческая особенность)
    \`\`\`

  ### 4. Преобразование типов

  - **Явное преобразование**:
    \`\`\`js
    let num = Number("123"); // строка -> число (123)
    let str = String(123);   // число -> строка ("123")
    let bool = Boolean(1);   // число -> boolean (true)
    \`\`\`

  - **Неявное преобразование** (автоматическое):
    \`\`\`js
    let result = "5" + 2;    // "52" (число преобразовано в строку)
    let sum = "5" - 2;       // 3 (строка преобразована в число)
    \`\`\`

  ### 5. Особенности работы с типами

  - **Строки**:
    \`\`\`js
    let hello = "Привет";
    console.log(hello.length); // 6 (количество символов)
    \`\`\`

  - **Числа**:
    \`\`\`js
    let infinity = 1 / 0;     // Infinity
    let notNumber = "текст" / 2; // NaN (Not a Number)
    \`\`\`

  - **Логические значения**:
    \`\`\`js
    let isTrue = 1 > 0;       // true
    let isEqual = 5 === "5";  // false (разные типы)
    \`\`\`
  `.trim(),

  codeExample: `
// Примеры с разными типами данных
let product = "Телефон";      // string
let price = 999.99;           // number
let inStock = true;           // boolean
let discount = null;          // null
let description;              // undefined

// Преобразование типов
let quantity = "10";
let total = price * quantity;  // "10" автоматически преобразуется в число

// Проверка типов
console.log(typeof product);   // "string"
console.log(typeof price);     // "number"
console.log(typeof inStock);   // "boolean"
console.log(typeof discount);  // "object" (особенность JS)
console.log(typeof description); // "undefined"

// Особые числовые значения
let result = 1 / 0;
console.log(result);           // Infinity
console.log(typeof NaN);       // "number"
  `.trim(),

  resources: [
    "https://developer.mozilla.org/ru/docs/Web/JavaScript/Data_structures",
    "https://learn.javascript.ru/types",
  ],
};
