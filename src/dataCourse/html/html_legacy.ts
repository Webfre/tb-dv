export const html_legacy_1 = {
  id: "html_legacy_1",
  title: "Устаревшие теги: <center>, <font>, <bgsound>",
  content: `
  ## Устаревшие HTML-теги и их современные альтернативы
  
  HTML развивался с 1990-х годов, и многие теги, активно использовавшиеся ранее, в современных спецификациях HTML5 считаются **устаревшими**. Они:
  
  - не проходят валидацию;
  - не поддерживаются или отображаются некорректно;
  - нарушают принципы разделения **структуры** и **оформления**;
  - снижают доступность и читаемость кода.
  
  ---
  
  ### \`<center>\` — выравнивание по центру
  
  **Статус:** Устарел  
  **Раньше:** использовался для центрирования текста и блоков  
  **Сейчас:** используется CSS
  
  **Вместо:**
  
  \`\`\`css
  text-align: center;
  \`\`\`
  
  **Пример:**
  
  \`\`\`html
  <!-- Устаревшее -->
  <center>Заголовок</center>
  
  <!-- Современное -->
  <div style="text-align: center;">Заголовок</div>
  \`\`\`
  
  ---
  
  ### \`<font>\` — управление шрифтами, цветами и размерами
  
  **Статус:** Устарел  
  **Раньше:** изменял цвет, размер и семейство шрифта  
  **Сейчас:** используется CSS
  
  **Вместо:**
  
  \`\`\`css
  color: red;
  font-size: 16px;
  font-family: Arial, sans-serif;
  \`\`\`
  
  **Пример:**
  
  \`\`\`html
  <!-- Устаревшее -->
  <font color="red" size="4" face="Arial">Текст</font>
  
  <!-- Современное -->
  <span style="color: red; font-size: 16px; font-family: Arial;">Текст</span>
  \`\`\`
  
  ---
  
  ### \`<bgsound>\` — воспроизведение звука
  
  **Статус:** Устарел, поддерживался только в Internet Explorer  
  **Раньше:** автоматически запускал звук при загрузке страницы  
  **Сейчас:** используется \`<audio>\` с управлением через JavaScript
  
  **Пример:**
  
  \`\`\`html
  <!-- Современное решение -->
  <audio autoplay muted>
    <source src="sound.mp3" type="audio/mpeg" />
  </audio>
  \`\`\`
  
  > Обратите внимание: большинство браузеров **блокируют автоматическое воспроизведение**, если звук не отключён (muted).
  
  ---
  
  ## Почему важно избегать устаревших тегов
  
  - Не проходят **валидацию W3C**
  - Не соответствуют принципам **семантики и доступности**
  - Приводят к **проблемам отображения** на современных устройствах и браузерах
  - Усложняют **поддержку и масштабирование** проекта
  
  ---
  
  ## Вывод
  
  Изучая HTML, важно понимать, какие теги считаются устаревшими и чем их заменять. Использование **современных стандартов (HTML5 + CSS)** обеспечивает:
  
  - кроссбраузерность;
  - валидность кода;
  - удобство для пользователей, включая людей с ограниченными возможностями;
  - соответствие лучшим практикам frontend-разработки.
  `.trim(),

  codeExample: `
<!-- Устаревший код -->
<center>
  <font color="red" size="4" face="Arial">Привет, мир!</font>
</center>

<!-- Современный эквивалент -->
<p style="text-align: center; color: red; font-size: 1.25rem; font-family: Arial;">
  Привет, мир!
</p>
  `,
  resources: [
    "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/center",
    "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/font",
  ],
};
export const html_legacy_2 = {
  id: "html_legacy_2",
  title: "Подходы к обновлению старой верстки",
  content: `
  ## Рефакторинг устаревшей HTML-верстки
  
  На старых сайтах HTML-код часто содержит:
  
  - таблицы, использованные для построения сетки (layout);
  - устаревшие теги: \`<center>\`, \`<font>\`, \`<bgsound>\`;
  - **inline-стили**, встроенные прямо в теги;
  - неструктурированную и несемантичную вёрстку.
  
  Всё это усложняет поддержку, адаптацию под мобильные устройства, внедрение SEO и доступности (a11y).
  
  ---
  
  ## Этапы рефакторинга
  
  ### 1. Заменить устаревшие теги
  
  - Удалите теги вроде \`<center>\`, \`<font>\`, \`<b>\`
  - Используйте современные CSS-эквиваленты:
  
  \`\`\`css
  text-align: center;
  font-family: Arial;
  color: #333;
  \`\`\`
  
  ---
  
  ### 2. Вынести inline-стили
  
  Вместо:
  
  \`\`\`html
  <p style="color: red;">Текст</p>
  \`\`\`
  
  Используйте:
  
  \`\`\`html
  <p class="danger">Текст</p>
  \`\`\`
  
  \`\`\`css
  .danger {
    color: red;
  }
  \`\`\`
  
  Это упростит масштабирование и повторное использование стилей.
  
  ---
  
  ### 3. Семантическая структура
  
  Замените:
  
  - \`<div id="header">\` → \`<header>\`
  - \`<div id="main">\` → \`<main>\`
  - \`<div id="footer">\` → \`<footer>\`
  
  Также используйте \`<nav>\`, \`<section>\`, \`<article>\` и другие семантические теги для логичной структуры документа.
  
  ---
  
  ### 4. Удалить "лишние" элементы
  
  - Избавьтесь от **пустых \`<div>\`**
  - Удалите **дублирующиеся классы и структуры**
  - Проверьте на валидность: [https://validator.w3.org](https://validator.w3.org)
  
  ---
  
  ## Советы по подходу
  
  - Применяйте **рефакторинг постепенно**, не ломая существующую функциональность ("не ломай то, что работает")
  - Начинайте с **структурных блоков** (header, main, footer), затем переходите к стилям и поведению
  - Проверяйте доступность и SEO после каждого этапа
  
  ---
  
  ## Инструменты автоматизации
  
  - **Prettier** — автоформатирование HTML, CSS, JS
  - **HTMLHint** — линтер для поиска ошибок и антипаттернов
  - **HTML5 Outliner** — расширение для анализа структуры заголовков и секций
  - **VS Code + Emmet** — ускоряет переписывание верстки с коротких шаблонов
  
  ---
  
  ## Вывод
  
  Рефакторинг HTML — это шаг к:
  
  - лучшей поддержке кода;
  - соответствию стандартам HTML5;
  - повышению доступности и SEO.
  
  Чистый, семантический и отделённый по слоям HTML-код — основа качественного фронтенд-проекта.
  `.trim(),

  codeExample: `
<!-- Было -->
<table>
  <tr>
    <td><font color="blue">Контактная информация</font></td>
  </tr>
</table>

<!-- Стало -->
<section>
  <h2 style="color: blue;">Контактная информация</h2>
</section>
  `,
};
