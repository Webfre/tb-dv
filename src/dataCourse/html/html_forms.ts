export const html_form_1 = {
  id: "html_form_1",
  title: "Форма <form> и атрибуты action, method",
  content: `
  ## Тег \`<form>\` — работа с пользовательским вводом
  
  Тег \`<form>\` используется для создания **форм на странице**, через которые пользователь может **ввести и отправить данные** на сервер.
  
  Это основа таких действий, как авторизация, регистрация, поиск, отправка комментариев, загрузка файлов и других форм взаимодействия с пользователем.
  
  ---
  
  ## Основные атрибуты формы
  
  ### \`action\`
  
  - Указывает **URL-адрес**, на который будут отправлены данные формы после нажатия кнопки "Отправить"
  - Может быть:
    - относительным путём (на текущем сайте): \`/submit\`
    - абсолютным URL: \`https://api.example.com/data\`
    - пустым: отправка на ту же страницу
  
  ### \`method\`
  
  Определяет **метод HTTP-запроса** для отправки данных:
  
  - \`GET\` — данные добавляются к URL как параметры запроса (видны в адресной строке)
    - Используется для поиска, фильтрации, неопасных запросов
  - \`POST\` — данные передаются **в теле запроса** (не видны в URL)
    - Используется для отправки конфиденциальной информации: регистрация, вход, комментарии
  
  **Пример:**
  
  \`\`\`html
  <form action="/submit-form" method="post">
    <input type="text" name="username" />
    <input type="password" name="password" />
    <button type="submit">Войти</button>
  </form>
  \`\`\`
  
  ---
  
  ## Элементы внутри формы
  
  Форма может включать следующие поля:
  
  - \`<input>\` — одиночное поле (текст, пароль, email, checkbox и т.д.)
  - \`<textarea>\` — многострочное текстовое поле
  - \`<select>\` и \`<option>\` — выпадающие списки
  - \`<button>\` — кнопки отправки или сброса
  
  **Пример:**
  
  \`\`\`html
  <form action="/search" method="get">
    <label for="query">Поиск:</label>
    <input type="text" name="query" id="query" />
    <button type="submit">Найти</button>
  </form>
  \`\`\`
  
  ---
  
  ## Дополнительные возможности
  
  - Форма может иметь встроенную валидацию: \`required\`, \`pattern\`, \`minlength\`, \`type="email"\` и т.д.
  - Формы можно обрабатывать через JavaScript (без перезагрузки) — через обработчики событий и отправку fetch-запросов
  - Поддерживаются методы \`PUT\`, \`DELETE\` и т.д. при работе с API (через JS или скрытые поля)
  
  ---
  
  ## Когда использовать \`GET\` или \`POST\`
  
  | Метод | Где используется               | Особенности                          |
  |-------|--------------------------------|--------------------------------------|
  | GET   | Поиск, фильтры, переключатели  | Видно в адресной строке, кэшируется |
  | POST  | Регистрация, логин, формы данных | Безопаснее, не кэшируется           |
  
  ---
  
  ## Вывод
  
  - \`<form>\` — это основа взаимодействия пользователя с сайтом
  - Атрибуты \`action\` и \`method\` задают направление и способ отправки данных
  - Содержимое формы может включать разные типы полей: от текстовых до выпадающих списков
  - Грамотное использование форм — важный навык при разработке интерфейсов и взаимодействии с сервером
  `.trim(),

  codeExample: `
<form action="/submit" method="POST">
  <label>Имя: <input type="text" name="username" /></label>
  <button type="submit">Отправить</button>
</form>
  `,
  resources: ["https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form"],
};
export const html_form_2 = {
  id: "html_form_2",
  title: "Input: text, email, password, checkbox, radio",
  content: `
  ## Тег \`<input>\` — поля ввода данных
  
  Тег \`<input>\` используется в HTML-формах для **ввода и отправки данных** от пользователя. Это **универсальный элемент**, который может принимать различные типы ввода через атрибут \`type\`.
  
  Каждому полю можно задать такие атрибуты, как: \`name\`, \`value\`, \`placeholder\`, \`required\`, \`disabled\`, \`readonly\` и др.
  
  ---
  
  ## Основные типы \`<input>\`
  
  ### \`type="text"\`
  
  - Стандартное **однострочное поле ввода**
  - Используется для ввода имени, логина, заголовков и т.п.
  
  **Пример:**
  
  \`\`\`html
  <input type="text" name="username" placeholder="Введите имя" />
  \`\`\`
  
  ---
  
  ### \`type="email"\`
  
  - Проверяет, что пользователь ввёл корректный email
  - Может использовать встроенную валидацию браузера
  
  **Пример:**
  
  \`\`\`html
  <input type="email" name="user_email" required />
  \`\`\`
  
  ---
  
  ### \`type="password"\`
  
  - Ввод данных скрывается (например, при авторизации)
  - Символы отображаются как точки или звёздочки
  
  **Пример:**
  
  \`\`\`html
  <input type="password" name="user_password" />
  \`\`\`
  
  ---
  
  ### \`type="checkbox"\`
  
  - Позволяет выбрать **несколько вариантов** из набора
  - Каждый элемент работает независимо
  
  **Пример:**
  
  \`\`\`html
  <label><input type="checkbox" name="skills" value="html" /> HTML</label>
  <label><input type="checkbox" name="skills" value="css" /> CSS</label>
  <label><input type="checkbox" name="skills" value="js" /> JavaScript</label>
  \`\`\`
  
  ---
  
  ### \`type="radio"\`
  
  - Используется для **одиночного выбора** из набора
  - Все радио-кнопки с одинаковым атрибутом \`name\` объединяются в группу — можно выбрать только одну
  
  **Пример:**
  
  \`\`\`html
  <label><input type="radio" name="gender" value="male" /> Мужской</label>
  <label><input type="radio" name="gender" value="female" /> Женский</label>
  \`\`\`
  
  ---
  
  ## Валидация и взаимодействие
  
  - \`required\` — обязательное поле
  - \`minlength\`, \`maxlength\` — ограничение по длине текста
  - \`pattern\` — регулярное выражение для проверки
  - \`disabled\`, \`readonly\` — ограничение на ввод
  
  **Пример обязательного email-поля:**
  
  \`\`\`html
  <input type="email" name="email" required placeholder="example@mail.com" />
  \`\`\`
  
  ---
  
  ## Вывод
  
  Тег \`<input>\`:
  
  - Универсален и настраивается через \`type\`
  - Используется для текстовых данных, паролей, переключателей, email и др.
  - Позволяет реализовать как простые поля, так и сложные формы с валидацией
  
  Грамотное использование \`<input>\` обеспечивает удобный и безопасный ввод данных пользователем.
  `.trim(),

  codeExample: `
<form>
  <input type="text" placeholder="Имя" />
  <input type="email" placeholder="Email" />
  <input type="password" placeholder="Пароль" />

  <label><input type="checkbox" name="terms" /> Я согласен</label>

  <label><input type="radio" name="gender" value="m" /> Мужчина</label>
  <label><input type="radio" name="gender" value="f" /> Женщина</label>
</form>
  `,
  resources: [
    "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input",
  ],
};
export const html_form_3 = {
  id: "html_form_3",
  title: "Select, textarea, button",
  content: `
  ## Дополнительные элементы формы в HTML
  
  Помимо \`<input>\`, HTML предоставляет и другие элементы для сбора и управления данными от пользователя. Они помогают расширить интерфейс формы и улучшить удобство взаимодействия.
  
  ---
  
  ### \`<select>\` — выпадающий список
  
  - Используется для выбора одного или нескольких значений из заранее заданного набора
  - Содержит вложенные теги \`<option>\` — они представляют пункты списка
  - Атрибут \`selected\` на \`<option>\` делает его выбранным по умолчанию
  - Атрибут \`multiple\` позволяет выбирать сразу несколько значений
  
  **Пример (одиночный выбор):**
  
  \`\`\`html
  <label for="country">Выберите страну:</label>
  <select name="country" id="country">
    <option value="ru" selected>Россия</option>
    <option value="us">США</option>
    <option value="de">Германия</option>
  </select>
  \`\`\`
  
  ---
  
  ### \`<textarea>\` — многострочное текстовое поле
  
  - Используется для ввода больших объёмов текста (например, комментариев, описаний)
  - В отличие от \`<input type="text">\`, поддерживает **много строк**
  - Размер задаётся через атрибуты \`rows\` и \`cols\`, или стилями CSS
  
  **Пример:**
  
  \`\`\`html
  <label for="message">Сообщение:</label>
  <textarea id="message" name="message" rows="5" cols="30" placeholder="Введите текст..."></textarea>
  \`\`\`
  
  ---
  
  ### \`<button>\` — кнопка
  
  - Универсальный элемент для действия (отправка, сброс, вызов логики через JS)
  - По умолчанию действует как \`type="submit"\` — отправляет форму
  - Можно явно задать тип:
    - \`type="submit"\` — отправка формы
    - \`type="reset"\` — сброс значений
    - \`type="button"\` — просто кнопка, без действия (для JS-обработчиков)
  
  **Пример:**
  
  \`\`\`html
  <button type="submit">Отправить</button>
  <button type="reset">Сбросить</button>
  <button type="button" onclick="alert('Привет!')">Нажми</button>
  \`\`\`
  
  ---
  
  ## Вывод
  
  - \`<select>\` и \`<option>\` — позволяют создавать выпадающие списки
  - \`<textarea>\` — используется для больших объёмов текста
  - \`<button>\` — универсальный элемент для отправки или выполнения действий
  
  Эти теги расширяют возможности формы и делают пользовательский интерфейс **гибким, удобным и доступным**.
  `.trim(),

  codeExample: `
<form>
  <label>Город:
    <select name="city">
      <option value="msk">Москва</option>
      <option value="spb" selected>Санкт-Петербург</option>
    </select>
  </label>

  <textarea name="comment" rows="4" cols="30">Ваш комментарий</textarea>

  <button type="submit">Отправить</button>
</form>
  `,
  resources: [
    "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select",
    "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea",
    "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button",
  ],
};
export const html_form_4 = {
  id: "html_form_4",
  title: "Атрибуты required, disabled, readonly",
  content: `
  ## Атрибуты доступности и валидации в HTML-формах
  
  HTML предоставляет ряд встроенных атрибутов, которые позволяют **управлять поведением полей** формы и **повышать удобство и контроль** за вводом данных без использования JavaScript.
  
  ---
  
  ### \`required\` — обязательное поле
  
  - Заставляет пользователя **обязательно заполнить** поле перед отправкой формы
  - Поддерживается нативной валидацией браузера
  - При попытке отправки формы без значения — появится предупреждение
  
  **Пример:**
  
  \`\`\`html
  <input type="email" name="email" required placeholder="Введите email" />
  \`\`\`
  
  ---
  
  ### \`disabled\` — отключенное поле
  
  - Делает поле **недоступным** для взаимодействия
  - Его значение **не отправляется на сервер**
  - Используется, когда поле неактивно по логике (например, зависит от других условий)
  
  **Пример:**
  
  \`\`\`html
  <input type="text" value="Заблокировано" disabled />
  \`\`\`
  
  ---
  
  ### \`readonly\` — только для чтения
  
  - Позволяет **видеть значение**, но не изменять его
  - Значение отправляется на сервер при отправке формы
  - Подходит, например, для отображения ID, генерируемого поля, даты создания и т.д.
  
  **Пример:**
  
  \`\`\`html
  <input type="text" value="Только чтение" readonly />
  \`\`\`
  
  ---
  
  ## Сравнение: \`disabled\` vs \`readonly\`
  
  | Атрибут   | Изменение | Отправляется | Визуально | Применение                       |
  |-----------|------------|---------------|------------|----------------------------------|
  | \`disabled\` | ❌ Нельзя | ❌ Нет         | Серое, неактивное | Временно заблокировать поле     |
  | \`readonly\` | ❌ Нельзя | ✅ Да          | Выглядит как обычное | Показывать, но не редактировать |
  
  ---
  
  ## Зачем это нужно
  
  - Позволяет **упростить валидацию** без JS
  - Повышает **доступность** и **понятность интерфейса**
  - Обеспечивает **гибкость в бизнес-логике** (например, условные поля, только для чтения и т.д.)
  
  ---
  
  ## Вывод
  
  - Используйте \`required\` для обязательных полей
  - Применяйте \`disabled\` для временно недоступных данных
  - Добавляйте \`readonly\` к значениям, которые нельзя изменять, но нужно передавать
  
  Эти атрибуты делают формы **удобными, безопасными и предсказуемыми** как для пользователя, так и для разработчика.
  `.trim(),

  codeExample: `
<form>
  <input type="text" placeholder="Имя" required />
  <input type="text" value="Нельзя редактировать" readonly />
  <input type="text" value="Отключено" disabled />
</form>
  `,
  resources: [
    "https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/required",
    "https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled",
    "https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly",
  ],
};
export const html_form_5 = {
  id: "html_form_5",
  title: "Валидация HTML5",
  content: `
  ## Встроенная валидация форм в HTML5
  
  HTML5 предоставляет встроенные механизмы **проверки правильности ввода данных** без необходимости использовать JavaScript. Это делает формы более надёжными, доступными и удобными для пользователя.
  
  Браузеры автоматически обрабатывают валидацию и выводят понятные сообщения об ошибках.
  
  ---
  
  ## Ключевые атрибуты валидации
  
  ### \`required\`
  
  - Делает поле **обязательным для заполнения**
  - При отсутствии значения — браузер не позволит отправить форму
  
  **Пример:**
  
  \`\`\`html
  <input type="text" name="name" required />
  \`\`\`
  
  ---
  
  ### \`type="email" | "url" | "number"\`
  
  - Автоматически проверяют корректность формата:
  
    - \`email\` — должен содержать \`@\`
    - \`url\` — начинается с \`http://\` или \`https://\`
    - \`number\` — принимает только числа
  
  **Пример:**
  
  \`\`\`html
  <input type="email" name="email" required />
  \`\`\`
  
  ---
  
  ### \`min\` / \`max\`
  
  - Ограничивают числовые значения (для \`type="number"\`, \`date\`, \`range\` и др.)
  
  **Пример:**
  
  \`\`\`html
  <input type="number" name="age" min="18" max="99" />
  \`\`\`
  
  ---
  
  ### \`minlength\` / \`maxlength\`
  
  - Ограничивают **длину текста** во вводимом значении
  
  **Пример:**
  
  \`\`\`html
  <input type="text" name="username" minlength="3" maxlength="15" />
  \`\`\`
  
  ---
  
  ### \`pattern\`
  
  - Позволяет задать **регулярное выражение** для валидации
  - Например, для телефона или пароля
  
  **Пример:**
  
  \`\`\`html
  <input 
    type="text" 
    name="phone" 
    pattern="\\+7\\d{10}" 
    placeholder="+71234567890"
  />
  \`\`\`
  
  ---
  
  ## Преимущества встроенной валидации
  
  - Работает **автоматически во всех современных браузерах**
  - Не требует JavaScript
  - Улучшает **UX** — пользователь видит сообщение об ошибке сразу
  - Ускоряет разработку простых форм
  - Совместима с JavaScript — можно комбинировать с JS-валидацией при необходимости
  
  ---
  
  ## Вывод
  
  HTML5 валидация:
  
  - Позволяет быстро проверять данные на клиенте
  - Поддерживает основные правила: обязательность, формат, длина, диапазоны
  - Помогает создавать **надёжные и доступные формы** даже без JS
  
  Для сложных случаев можно использовать JS + HTML5 совместно, но встроенные средства уже покрывают большинство задач.
  `.trim(),

  codeExample: `
<form>
  <input type="email" required placeholder="Введите email" />
  <input type="number" min="18" max="99" placeholder="Возраст" />
  <input type="text" pattern="\\d{3}-\\d{2}-\\d{2}" placeholder="Формат: 123-45-67" />
  <button type="submit">Проверить</button>
</form>
  `,
  resources: [
    "https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation",
    "https://developer.mozilla.org/en-US/docs/Web/HTML/Constraint_validation",
  ],
};
