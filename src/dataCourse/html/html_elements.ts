export const html_el_1 = {
  id: "html_el_1",
  title: "Блочные и строчные элементы",
  content: `
  ## Элементы и теги в HTML
  
  HTML-документ состоит из **элементов**, задаваемых с помощью **тегов** — специальных конструкций вида \`<имя_тега>...</имя_тега>\`.
  
  Элементы делятся на два ключевых типа по своему поведению в потоке документа:
  
  - **Блочные элементы** (block-level elements)
  - **Строчные элементы** (inline elements)
  
  ---
  
  ## Что такое тег?
  
  **Тег** — это основная строительная единица HTML. Он сообщает браузеру, как интерпретировать или визуализировать определённый фрагмент контента.
  
  Пример простейшего тега:
  
  \`\`\`html
  <p>Привет, мир!</p>
  \`\`\`
  
  Разбор:
  
  - \`<p>\` — открывающий тег
  - \`</p>\` — закрывающий тег
  - \`Привет, мир!\` — содержимое элемента
  
  Есть также **самозакрывающиеся теги**, например: \`<img />\`, \`<input />\`, \`<br />\`.
  
  ---
  
  ## Блочные элементы
  
  Блочные элементы **всегда начинаются с новой строки** и по умолчанию занимают **всю доступную ширину** своего родителя.
  
  Они используются для **структурирования** страницы — деления на логические блоки.
  
  Примеры:
  
  - \`<div>\` — универсальный контейнер
  - \`<section>\` — логический раздел
  - \`<article>\` — отдельная единица контента
  - \`<header>\`, \`<footer>\`, \`<main>\`, \`<aside>\`
  - \`<p>\` — абзац
  - \`<h1>\` — \`<h6>\` — заголовки
  - \`<ul>\`, \`<ol>\`, \`<li>\` — списки
  - \`<form>\`, \`<table>\`
  
  Пример:
  
  \`\`\`html
  <div>
    <h1>Заголовок</h1>
    <p>Это абзац текста.</p>
  </div>
  \`\`\`
  
  Комментарий: \`<div>\` — блочный элемент, содержит другие блочные элементы. Они все выводятся с новой строки.
  
  ---
  
  ## Строчные элементы
  
  Строчные (inline) элементы **не создают переноса строки** и располагаются **внутри текста**. Используются для **форматирования** или **интерактивных вставок**.
  
  Примеры:
  
  - \`<span>\` — универсальный строчный контейнер
  - \`<a>\` — ссылка
  - \`<strong>\`, \`<em>\`, \`<b>\`, \`<i>\` — форматирование текста
  - \`<label>\`, \`<input>\`, \`<select>\`, \`<textarea>\`
  - \`<img>\`, \`<abbr>\`, \`<code>\`
  
  Пример:
  
  \`\`\`html
  <p>Текст с <strong>жирным</strong> и <em>курсивом</em>.</p>
  \`\`\`
  
  Комментарий: строчные элементы встроены внутрь потока текста и не влияют на его структуру.
  
  ---
  
  ## Важно помнить
  
  - HTML5 допускает вложенность строчных и блочных элементов, но **семантически** лучше сохранять чёткую структуру.
  - Некоторые теги являются **обязательными** в определённых контекстах, например \`<li>\` только внутри \`<ul>\` или \`<ol>\`.
  - Валидация разметки помогает выявить ошибки вложенности.
  
  ---
  
  ## Вывод
  
  - **Блочные элементы** создают структуру и визуальные блоки на странице
  - **Строчные элементы** дополняют содержимое внутри текста без изменения его структуры
  - Понимание различий между этими типами важно для правильной вёрстки, семантики и адаптивного дизайна
  `.trim(),

  codeExample: `
<!-- Блочные элементы -->
<div>
  <h1>Заголовок</h1>
  <p>Первый абзац</p>
  <p>Второй абзац</p>
</div>

<!-- Строчные элементы -->
<p>
  Это <strong>важный</strong> текст, а это <em>курсив</em>.
  Перейти на <a href="https://example.com">сайт</a>.
</p>

<!-- Смешанное использование -->
<div>
  <p>Текст с <span style="color: red;">выделенным словом</span>.</p>
</div>
  `.trim(),

  resources: ["https://puzzleweb.ru/html/types_el.php"],
};

export const html_el_2 = {
  id: "html_el_2",
  title: "Заголовки, параграфы, списки",
  content: `
HTML предоставляет готовые элементы для структурирования текстового контента: **заголовки**, **абзацы** и **списки**. Они позволяют логически разделять и структурировать информацию на странице.

## Заголовки: \`<h1>\` – \`<h6>\`

Заголовки используются для обозначения важности и иерархии разделов на странице.

- \`<h1>\` — главный заголовок страницы. Используется один раз и отражает основную тему документа.
- \`<h2>\` — заголовок второго уровня, обозначает раздел внутри <h1>.
- \`<h3>\` — заголовок третьего уровня, используется для подразделов внутри <h2>.
- \`<h4>\` — заголовок четвёртого уровня, более глубокая вложенность (внутри <h3>).
- \`<h5>\` — заголовок пятого уровня, редко используется, но может быть полезен при сложной структуре.
- \`<h6>\` — заголовок шестого уровня, самый низкий уровень, самый маленький по размеру.

\`\`\`html
<h1>Заголовок страницы</h1>
<h2>Раздел</h2>
<h3>Подраздел</h3>
\`\`\`

*Совет: не пропускай уровни (не ставь \`<h3>\` сразу после \`<h1>\`). Это важно для SEO и доступности.*

---

## Абзацы: \`<p>\`

Абзацы используются для обычного текста и разделяют логические блоки информации.

\`\`\`html
<p>Это первый абзац. Он содержит обычный текст.</p>
<p>Это второй абзац. Теги <strong>можно комбинировать</strong> внутри абзаца.</p>
\`\`\`

*Абзацы автоматически отделяются вертикальными отступами.*

---

## Списки: \`<ul>\`, \`<ol>\`, \`<li>\`

HTML поддерживает два типа списков:

- **Маркированный список** — \`<ul>\` (unordered list)
- **Нумерованный список** — \`<ol>\` (ordered list)
- Каждый элемент списка обозначается тегом \`<li>\` (list item)

\`\`\`html
<!-- Маркированный список -->
<ul>
  <li>Элемент 1</li>
  <li>Элемент 2</li>
</ul>

<!-- Нумерованный список -->
<ol>
  <li>Шаг 1</li>
  <li>Шаг 2</li>
</ol>
\`\`\`

*Списки могут быть вложенными: \`<ul>\` внутри \`<li>\` и наоборот.*

---

## Важно помнить:

- Заголовки — это **структура страницы**, не просто визуальное оформление.
- Абзацы — для **обычного текста**.
- Списки — для **перечислений** (внутри \`<li>\` можно использовать другие теги, включая заголовки, ссылки и параграфы).

---

## Вывод:

| Тег    | Назначение                       |
|--------|----------------------------------|
| \`<h1>–<h6>\` | Заголовки от самого важного до наименее |
| \`<p>\`       | Абзац текста                  |
| \`<ul>\`      | Маркированный список         |
| \`<ol>\`      | Нумерованный список          |
| \`<li>\`      | Пункт списка                 |

Эти элементы — основа **текстовой структуры** любой веб-страницы.
  `.trim(),

  codeExample: `
<h1>Обо мне</h1>

<p>Меня зовут Алекс. Я frontend-разработчик с опытом работы в HTML, CSS и JavaScript.</p>

<h2>Навыки</h2>
<ul>
  <li>HTML5</li>
  <li>CSS3</li>
  <li>JavaScript (ES6+)</li>
</ul>

<h2>План развития</h2>
<ol>
  <li>Углубить знание TypeScript</li>
  <li>Изучить React на уровне Senior</li>
  <li>Создать pet-проект и выложить на GitHub</li>
</ol>
  `.trim(),
};

export const html_el_3 = {
  id: "html_el_3",
  title: "Теги форматирования текста",
  content: `
HTML предоставляет набор **тегов форматирования**, с помощью которых можно выделять текст визуально и семантически. Некоторые из них придают **визуальный стиль**, другие — **семантическое значение**, что важно для доступности (a11y) и SEO.

## Визуальное vs семантическое форматирование

| Тег     | Визуальный эффект   | Семантика            |
|---------|---------------------|-----------------------|
| \`<b>\`     | Жирный текст          | Нет (чисто визуальный) |
| \`<strong>\`| Жирный + важно        | Да (важное содержание) |
| \`<i>\`     | Курсив               | Нет (например, стилизация) |
| \`<em>\`    | Курсив + акцент       | Да (логическое выделение) |
| \`<u>\`     | Подчёркнутый текст   | Нет (визуальное подчёркивание) |

---

## Семантика имеет значение

- \`<strong>\` сообщает: “Это **важно**” → поисковики и скринридеры реагируют соответствующим образом.
- \`<em>\` сообщает: “Это **подчёркнутая смысловая интонация**”.
- \`<b>\` и \`<i>\` — просто делают текст жирным или курсивным **без смысловой нагрузки**.

---

## Примеры использования

\`\`\`html
<p>
  Этот <b>текст жирный</b>, а этот <strong>семантически важный</strong>.
</p>

<p>
  <i>i — просто курсив</i>, но <em>em — акцент, интонация</em>.
</p>

<p>
  <u>Подчёркнутый текст</u> может использоваться для ссылок или стилистических целей.
</p>
\`\`\`

---

## Когда использовать какой тег?

- \`<strong>\` — для **важных предупреждений**, акцентов:  
  “<strong>Опасно:</strong> данные будут удалены навсегда.”
- \`<em>\` — для **интонационных акцентов**:  
  “Я <em>действительно</em> это сделал.”
- Не злоупотребляй \`<b>\`, \`<i>\` и \`<u>\` — используй их только если тебе **нужен только стиль**, а не смысл.

---

## Вложенные акценты

\`\`\`html
<p><strong><em>Очень важный акцент!</em></strong></p>
\`\`\`

*Работает, но стоит избегать чрезмерной вложенности.*

---

## Вывод:

| Тег        | Для чего использовать            |
|------------|----------------------------------|
| \`<b>\`        | Для визуального выделения без семантики |
| \`<strong>\`   | Для **важных** фраз или предупреждений |
| \`<i>\`        | Для стилизованных слов (латиница, названия) |
| \`<em>\`       | Для смысловых акцентов, интонации |
| \`<u>\`        | Для подчеркивания, редко используется напрямую |

Использование **семантически верных тегов** делает ваш HTML более доступным, логичным и понятным как для браузеров, так и для пользователей.
  `.trim(),

  codeExample: `
<p>
  <strong>Важно:</strong> сохраните изменения перед выходом.
</p>

<p>
  Я <em>уверен</em>, что это работает.
</p>

<p>
  Название переменной: <i>userName</i>
</p>

<p>
  <b>Визуально жирный</b>, но <strong>семантически жирный</strong>.
</p>

<p>
  <u>Подчеркнутое</u> слово.
</p>
  `.trim(),
};
export const html_el_4 = {
  id: "html_el_4",
  title: "Теги strong, em, mark, small, sub, sup",
  content: `
  ## Форматирующие текст теги в HTML
  
  HTML предоставляет специальные теги для **выделения и акцентирования текста**, при этом каждый из них несёт **семантическую нагрузку** — то есть обозначает не только стиль, но и **смысл** выделения.
  
  ---
  
  ### \`<strong>\` — важный акцент (жирный)
  
  - Используется для выделения **особо важного текста**
  - Семантически означает: "это действительно важно"
  - По умолчанию отображается **жирным шрифтом**
  
  **Пример:**
  
  \`\`\`html
  <p>Пожалуйста, <strong>не закрывайте</strong> вкладку во время загрузки.</p>
  \`\`\`
  
  ---
  
  ### \`<em>\` — смысловое ударение (курсив)
  
  - Используется для **логического акцента** или интонационного выделения
  - По умолчанию отображается **курсивом**
  - Может использоваться внутри абзацев, заголовков, цитат
  
  **Пример:**
  
  \`\`\`html
  <p>Я <em>очень</em> хочу изучить HTML.</p>
  \`\`\`
  
  ---
  
  ### \`<mark>\` — подсветка текста
  
  - Подсвечивает текст, как будто он **выделен маркером**
  - Часто используется в поиске или при фильтрации
  - Делает выделение визуально заметным
  
  **Пример:**
  
  \`\`\`html
  <p>Результаты поиска по запросу: <mark>HTML</mark></p>
  \`\`\`
  
  ---
  
  ### \`<small>\` — второстепенный, мелкий текст
  
  - Показывает менее важную информацию, например:
    - сноски
    - юридические данные
    - комментарии к полям
  - По умолчанию отображается **уменьшенным шрифтом**
  
  **Пример:**
  
  \`\`\`html
  <p>© 2025 Все права защищены. <small>Условия использования</small></p>
  \`\`\`
  
  ---
  
  ### \`<sub>\` — подстрочный текст
  
  - Используется в научной, химической и технической разметке
  - Располагает текст **ниже базовой линии**
  
  **Пример:**
  
  \`\`\`html
  <p>Формула воды: H<sub>2</sub>O</p>
  \`\`\`
  
  ---
  
  ### \`<sup>\` — надстрочный текст
  
  - Используется для написания **степеней**, математических выражений и сносок
  - Располагает текст **выше базовой линии**
  
  **Пример:**
  
  \`\`\`html
  <p>Площадь квадрата: S = a<sup>2</sup></p>
  \`\`\`
  
  ---
  
  ## Почему это важно
  
  - Эти теги несут **семантику**, а не просто стиль
  - Они помогают:
    - **визуально акцентировать** важные участки текста
    - сделать HTML **доступнее** для ассистивных технологий (например, screen reader'ов)
    - улучшить **восприятие** пользователем
  
  ---
  
  ## Вывод
  
  Используй:
  
  - \`<strong>\` для важности
  - \`<em>\` для смыслового ударения
  - \`<mark>\` для подсветки
  - \`<small>\` для сносок
  - \`<sub>\` и \`<sup>\` для научной разметки
  
  Это не просто визуальные эффекты — это **смысловая структура**, которая улучшает читаемость, доступность и поддержку кода.
  `.trim(),

  codeExample: `
<p><strong>Внимание:</strong> это важное сообщение.</p>
<p>Он <em>очень</em> старается.</p>
<p>Найдено: <mark>42 совпадения</mark></p>
<p><small>Мелкий примечательный текст</small></p>
<p>H<sub>2</sub>O — вода</p>
<p>10<sup>6</sup> = миллион</p>
  `,
  resources: [
    "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong",
    "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/em",
    "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/mark",
    "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small",
    "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sub",
    "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sup",
  ],
};

export const html_el_5 = {
  id: "html_el_5",
  title: "Цитаты: blockquote, q, cite",
  content: `
  ## Цитаты и ссылки на источники в HTML
  
  HTML предоставляет специальные теги для **корректного оформления цитат** и **указания авторства или источника**. Это помогает сохранить **семантику**, улучшить **доступность** и корректно структурировать текст.
  
  ---
  
  ### \`<blockquote>\` — блочная цитата
  
  - Используется для **длинных цитат**
  - Отображается **отдельным блоком**, обычно с отступом
  - Может включать ссылку на источник с помощью \`<cite>\` внутри
  
  **Пример:**
  
  \`\`\`html
  <blockquote>
    "Разум — это не сосуд, который нужно наполнить, а огонь, который нужно зажечь."
    <cite>Плутарх</cite>
  </blockquote>
  \`\`\`
  
  Можно также указать атрибут \`cite\` с URL:
  
  \`\`\`html
  <blockquote cite="https://example.com/article">
    Текст цитаты...
  </blockquote>
  \`\`\`
  
  ---
  
  ### \`<q>\` — короткая встроенная цитата
  
  - Используется для **кратких цитат внутри текста**
  - Автоматически добавляет кавычки
  - Отличается от \`<blockquote>\` тем, что **не разрывает абзац**
  
  **Пример:**
  
  \`\`\`html
  <p>Он сказал: <q>Мы начинаем в 9:00</q>.</p>
  \`\`\`
  
  ---
  
  ### \`<cite>\` — источник или автор
  
  - Применяется для **указания источника** цитаты, статьи, книги, музыкального произведения и т.д.
  - Чаще всего используется **внутри \`<blockquote>\`**, но может применяться и отдельно
  
  **Пример:**
  
  \`\`\`html
  <cite>Война и мир</cite>
  \`\`\`
  
  **Пример в связке:**
  
  \`\`\`html
  <blockquote>
    "Если хочешь быть счастливым — будь им."
    <cite>Лев Толстой</cite>
  </blockquote>
  \`\`\`
  
  ---
  
  ## Когда и зачем использовать
  
  - Для оформления **внутреннего контента**, особенно в блогах, статьях и документации
  - При ссылке на **авторитетный источник**
  - Для **семантики и доступности**: скринридеры правильно интерпретируют цитаты и источники
  
  ---
  
  ## Вывод
  
  - Используй \`<blockquote>\` для длинных цитат, чтобы они отделялись визуально
  - Применяй \`<q>\` для кратких цитат прямо внутри текста
  - Указывай \`<cite>\` для обозначения автора или источника — это хорошая практика как в плане семантики, так и доступности
  
  Корректное использование этих тегов делает HTML-код **структурированным, читабельным и профессиональным**.
  `.trim(),

  codeExample: `
<blockquote cite="https://example.com/quote">
  <p>Инвестируй в знания — это приносит наибольший доход.</p>
</blockquote>

<p>Как говорил Стив Джобс: <q>Будь голодным. Будь безрассудным.</q></p>

<p><cite>— Бенджамин Франклин</cite></p>
  `,
  resources: [
    "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote",
    "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q",
    "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/cite",
  ],
};

export const html_el_6 = {
  id: "html_el_6",
  title: "Разделители: hr и br",
  content: `
  ## Разделители и переносы строк в HTML
  
  В некоторых случаях нужно **разделить контент визуально** или выполнить **принудительный перенос строки**. Для этого HTML предоставляет специальные теги: \`<hr>\` и \`<br>\`.
  
  ---
  
  ### \`<hr>\` — горизонтальная линия
  
  - Создаёт **визуальный разделитель** между блоками контента
  - Чаще всего отображается как **тонкая горизонтальная линия**
  - Используется для **смыслового разделения** тем, разделов, цитат и т.д.
  - Является **самозакрывающимся тегом**
  
  **Пример:**
  
  \`\`\`html
  <p>Введение в HTML</p>
  <hr />
  <p>Следующий раздел: Работа с формами</p>
  \`\`\`
  
  **Когда использовать:**
  
  - Для разделения статей или логических блоков
  - В карточках, модальных окнах, письмах и шаблонах
  - При создании отчётов или документации
  
  ---
  
  ### \`<br>\` — разрыв строки
  
  - Выполняет **принудительный перенос строки**, но не создаёт новый абзац
  - Часто используется внутри поэтического текста, адресов, цитат, заголовков
  - Также применяется при форматировании текстов с жёсткими переносами
  
  **Пример:**
  
  \`\`\`html
  <p>Улица Ленина, д. 10<br />г. Москва<br />Россия</p>
  \`\`\`
  
  **Важно:** не злоупотреблять \`<br>\` — в большинстве случаев можно использовать CSS или структурные теги.
  
  ---
  
  ## Когда применять
  
  - \`<hr>\` — когда нужно **визуально отделить** логические блоки без лишней вложенности
  - \`<br>\` — когда **контекст требует переноса строки**, например:
    - в адресах
    - в поэзии
    - в формах или шаблонах с фиксированной структурой
  
  ---
  
  ## Что НЕ стоит делать
  
  - Не использовать \`<br>\` для создания отступов — для этого есть CSS (\`margin\`, \`padding\`)
  - Не использовать \`<hr>\` вместо заголовков, списков и других структурных элементов
  
  ---
  
  ## Вывод
  
  - \`<hr>\` помогает **разделять** контент логически и визуально
  - \`<br>\` нужен для **переноса строки**, не создавая новый блок
  - Оба тега применяются **точечно**, когда нельзя обойтись стандартными структурами или стилями
  `.trim(),

  codeExample: `
<p>Добро пожаловать на сайт!</p>
<hr />
<p>Следующая секция — полезные ссылки.</p>

<p>Адрес:<br />г. Москва, ул. Примерная, д.1</p>
  `,
  resources: [
    "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr",
    "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/br",
  ],
};
