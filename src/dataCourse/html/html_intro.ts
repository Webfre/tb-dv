export const html_intro1 = {
  id: "html_intro_1",
  title: "Что такое HTML",
  content: `  
  HTML (HyperText Markup Language) — это **язык разметки гипертекста**, который используется для создания и структурирования контента на веб-страницах. Это основной строительный блок веба: с него начинается создание любой страницы в интернете.
  
  HTML не является языком программирования. Это язык разметки, с помощью которого задаётся **структура и семантика** содержимого: какие элементы на странице являются заголовками, абзацами, изображениями, списками, ссылками и так далее.
    
  ---
    
  ### Что такое «разметка»?
  
  Разметка — это способ описания **структуры документа** с использованием специальных элементов, называемых **тегами**. Каждый тег заключён в угловые скобки, например \`<p>\` или \`<a>\`.
  
  Некоторые распространённые теги:
  - \`<h1>\`–\`<h6>\` — заголовки разных уровней
  - \`<p>\` — абзац
  - \`<a>\` — ссылка
  - \`<img>\` — изображение
  - \`<form>\`, \`<input>\` — формы и поля ввода
  
    ---

  ### HTML в веб-разработке
  
  HTML — это **первый уровень frontend-стека**, на котором строится любая веб-страница:
  
  1. **HTML** — отвечает за структуру и смысловую разметку контента  
  2. **CSS** — управляет внешним видом и оформлением  
  3. **JavaScript** — добавляет интерактивность и динамическое поведение
  
      ---
  ### Зачем нужен HTML?
  
  Без HTML невозможно:
  - Показать структуру контента на веб-странице
  - Сделать страницу доступной для всех пользователей, включая людей с особыми потребностями
  - Оптимизировать сайт для поисковых систем (SEO)
  - Подключить CSS и JavaScript (они применяются к HTML-элементам)
  
    ---

  ### Особенности HTML
  
  HTML:
  - **Обязателен** для создания веб-страниц
  - **Семантический** — помогает браузерам, поисковикам и скринридерам понимать структуру и смысл контента
  - **Прост** в изучении — идеально подходит для начинающих
  - **Работает во всех браузерах** и платформах без дополнительной настройки
  
    ---

  ### Структура HTML-документа
  
  HTML-документ — это текстовый файл с расширением \`.html\`. Он начинается с декларации \`<!DOCTYPE html>\` и содержит два главных раздела:
  
  - \`<head>\` — служебная информация (кодировка, заголовок, стили, скрипты и др.)
  - \`<body>\` — основное содержимое, видимое пользователю
  
    ---

  ### Вывод
  
  HTML — это **скелет любой веб-страницы**. Без него невозможно начать работу во frontend-разработке. Понимание HTML — это фундамент, на котором строятся стили (CSS) и логика поведения (JavaScript). Даже сложные современные интерфейсы начинаются с простой разметки HTML.
  `.trim(),

  codeExample: `
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <title>Моя первая страница</title>
  </head>
  <body>
    <h1>Привет, мир!</h1>
    <p>Это мой первый HTML-документ.</p>
  </body>
</html>
  `.trim(),

  resources: [
    "https://developer.mozilla.org/ru/docs/Web/HTML", // MDN Web Docs
  ],

  attachments: ["/downloads/my_first_page.html"],
};

export const html_intro2 = {
  id: "html_intro_2",
  title: "История HTML: от 1.0 до HTML5",
  content: `
  ## Этапы развития HTML
  
  HTML прошёл длинный путь с момента своего появления в начале 1990-х годов. Он превратился из простого языка с базовыми возможностями в полноценный стандарт для создания семантической, мультимедийной и интерактивной структуры веб-приложений. Его создателем является Тим Бернерс-Ли (Tim Berners-Lee), британский учёный, который также изобрёл Всемирную паутину (WWW).
  
  ---
  ### HTML 1.0 — 1993 год
  
  - Первый официальный стандарт, выпущенный организацией IETF.
  - Поддерживал базовые элементы: заголовки, параграфы, списки, ссылки, изображения и таблицы.
  - Очень ограниченный функционал, не было поддержки стилей, скриптов и форм.
  - Использовался в основном для научных и технических публикаций.
  
    ---
  ### HTML 2.0 — ноябрь 1995
  
  - Разработка под руководством IETF HTML Working Group.
  - Цель — стандартизировать существующие де-факто практики.
  - Добавлены: формы, символы (entities), улучшена работа с таблицами.
  - Стал основой для дальнейшего развития HTML.
  
    ---
  ### HTML 3.2 — январь 1997
  
  - Принят консорциумом W3C (World Wide Web Consortium).
  - Поддержка таблиц, скриптов (в том числе JavaScript), апплетов на Java и начальной формы CSS.
  - Этап активной конкуренции браузеров (Internet Explorer и Netscape), что привело к несовместимости и нестабильной верстке.
  
    ---
  ### HTML 4.01 — декабрь 1999
  
  - Последняя "статичная" версия HTML перед переходом к XHTML.
  - Три режима документа: Strict, Transitional, Frameset.
  - Акцент на разделение структуры и представления: рекомендовано использовать CSS для оформления.
  - Поддержка атрибутов доступности (a11y).
  - Надолго стал основным стандартом в промышленной разработке.
  
    ---
  ### XHTML 1.0 — январь 2000
  
  - Попытка объединить строгую структуру XML с HTML.
  - Требовал закрытия всех тегов и строгого синтаксиса.
  - Проблема: слабая поддержка в браузерах и сложность перехода от HTML 4.
  - Проект оказался слишком строгим для большинства практических случаев и постепенно был свёрнут.
  
    ---
  ## HTML5 — современный стандарт (2014)
  
  HTML5 — это не просто новая версия, а переосмысление HTML как платформы для веб-приложений.
  
  - Совместная разработка W3C и WHATWG (Web Hypertext Application Technology Working Group).
  - Официальная спецификация опубликована в 2014 году.
  - Основной упор: поддержка мультимедиа, доступности, работы без плагинов и улучшенная семантика.
  
    ---
  **Ключевые нововведения:**
  
  - Семантические теги: \`<header>\`, \`<footer>\`, \`<article>\`, \`<section>\`, \`<nav>\`
  - Медиа-теги: \`<audio>\`, \`<video>\`
  - Графика и анимация: \`<canvas>\`, поддержка SVG
  - Улучшенная работа с формами (валидация на клиенте)
  - Web API: LocalStorage, Geolocation, WebSockets, Web Workers, Drag-and-Drop
  - Поддержка offline-режима через AppCache и Service Workers
  
  HTML5 стал ядром современных SPA и PWA-приложений, позволив отказаться от Flash и других сторонних технологий.
  
    ---
  ## Вывод
  
  История HTML показывает, как развивался веб и его потребности: от простых документов к сложным приложениям. Знание истории позволяет понимать ограничения старых технологий, избегать устаревших решений и эффективно использовать современные возможности HTML как платформы для фронтенд-разработки.
  `.trim(),

  resources: ["https://ru.wikipedia.org/wiki/HTML5"],
};

export const html_intro3 = {
  id: "html_intro_3",
  title: "Связь HTML с CSS и JavaScript",
  content: `
  ## HTML, CSS и JavaScript — основа frontend-разработки
  
  HTML — это **структурный каркас веб-страницы**, но сам по себе он не определяет внешний вид или поведение страницы. Чтобы интерфейс стал красивым и интерактивным, в игру вступают два ключевых инструмента: **CSS** и **JavaScript**.
  
  ---
  
  ## CSS (Cascading Style Sheets)
  
  CSS отвечает за **внешнее оформление элементов**, созданных с помощью HTML. Он управляет:
  
  - цветом текста и фона
  - шрифтами, отступами, размерами
  - позиционированием блоков (flexbox, grid, position)
  - адаптивностью (media queries)
  - эффектами и анимациями (transitions, keyframes)
  - темами и переменными (CSS custom properties)
  
  **Пример:**
  
  \`\`\`html
  <button id="myBtn">Нажми меня</button>
  \`\`\`

  \`\`\`css
  #myBtn {
    background-color: teal;
    color: white;
    padding: 10px 20px;
    border-radius: 6px;
    border: none;
    cursor: pointer;
  }
  \`\`\`
  ---
  
  ## JavaScript
  
  JavaScript (JS) — это **язык программирования**, который добавляет **динамическое поведение** веб-странице. Он позволяет:
  
  - реагировать на действия пользователя (клики, ввод текста, прокрутка)
  - изменять содержимое страницы без перезагрузки (DOM-манипуляции)
  - отправлять и получать данные с сервера (AJAX, Fetch API)
  - хранить данные на клиенте (LocalStorage, SessionStorage)
  - создавать одностраничные приложения (SPA) с помощью React, Vue, Angular
  - реализовать бизнес-логику и валидацию форм
  
  **Пример:**
### HTML
  \`\`\`
 <form id="contactForm">
  <label for="name">Имя:</label><br />
  <input type="text" id="name" name="name" required /><br /><br />

  <label for="email">Email:</label><br />
  <input type="email" id="email" name="email" required /><br /><br />

  <button type="submit">Отправить</button>
</form>
  \`\`\`

### JavaScript

  \`\`\`
ф function checkName() {
  const name = document.getElementById('name').value;
  if (name.trim() === '') {
    alert('Введите имя!');
  } else {
    alert('Спасибо, ' + name + '!');
  }
}
  \`\`\`
  
  ---
  
  ## Как HTML, CSS и JavaScript работают вместе
  
  ### HTML
  
  Создаёт структуру страницы:
  
  \`\`\`html
  <button id="myBtn">Нажми меня</button>
  \`\`\`
  
  ### CSS
  
  Отвечает за внешний вид:
  
  \`\`\`css
  #myBtn {
    background-color: teal;
    color: white;
    padding: 10px 20px;
    border-radius: 6px;
    border: none;
    cursor: pointer;
  }
  \`\`\`
  
  ### JavaScript
  
  Добавляет интерактивность:
  
  \`\`\`js
  document.getElementById("myBtn").addEventListener("click", () => {
    alert("Привет!");
  });
  \`\`\`
  
  ---
  
  ## Что важно понимать
  
  - **HTML** описывает: что показать  
  - **CSS** — как это должно выглядеть  
  - **JavaScript** — что должно происходить при взаимодействии
  
  Эти технологии образуют так называемый **Frontend-треугольник**. Хорошая архитектура предполагает **разделение ответственности** между ними:
  
  - HTML — структура (контент)
  - CSS — презентация (визуальный стиль)
  - JavaScript — логика (поведение)
  
  ---
  
  ## Вывод
  
  Современная frontend-разработка невозможна без согласованной работы HTML, CSS и JavaScript. Они дополняют друг друга и используются в каждом интерфейсе — от простых лендингов до сложных SPA и PWA.
  
  - SPA (Single Page Application)
  Одностраничное приложение, в котором всё работает на одной HTML-странице.
  Новые данные подгружаются через JavaScript без перезагрузки.
   Примеры: Gmail, Trello, GitHub.

  - PWA (Progressive Web App)
  Прогрессивное веб-приложение, которое работает как мобильное:
  может устанавливаться на устройство, работать офлайн, отправлять push-уведомления.
   Примеры: Twitter Lite, Spotify Web.

  `.trim(),

  codeExample: `
<!-- HTML -->
<button id="myBtn">Нажми меня</button>

<!-- CSS -->
<style>
  #myBtn {
    background-color: teal;
    color: white;
    padding: 10px 20px;
    border-radius: 6px;
    cursor: pointer;
  }
</style>

<!-- JavaScript -->
<script>
  document.getElementById("myBtn").addEventListener("click", () => {
    alert("Привет!");
  });
</script>
  `.trim(),

  resources: [
    "https://developer.mozilla.org/ru/docs/Learn/Getting_started_with_the_web/JavaScript_basics",
    "https://developer.mozilla.org/ru/docs/Web/API/Document_Object_Model",
    "https://htmlbook.ru/css",
    "https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide",
  ],
};
