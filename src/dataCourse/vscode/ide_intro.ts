export const ide_intro_1 = {
  id: "ide_intro_1",
  title: "Что такое рабочее окружение разработчика",
  content: `
Рабочее окружение frontend-разработчика — это **набор программ и инструментов**, которые позволяют эффективно писать, тестировать и поддерживать код. Настроенное окружение повышает продуктивность, ускоряет разработку и снижает количество ошибок.

### Зачем нужно настраивать окружение?

- Автоматизирует повседневные задачи (форматирование, сборка, запуск)
- Упрощает отладку и тестирование кода
- Обеспечивает единые стандарты в команде (кодстайл, линтинг)
- Повышает комфорт и скорость работы

---

### Основные компоненты окружения

1. **IDE/Редактор кода**  
   Чаще всего — [VS Code](https://code.visualstudio.com). Позволяет редактировать, подсвечивать, автодополнять и проверять код.

2. **Node.js и npm (или yarn/pnpm)**  
   Нужны для запуска JavaScript/TypeScript вне браузера и управления зависимостями.

3. **Терминал (CLI)**  
   Для запуска команд: установка пакетов, запуск dev-сервера, сборка проекта и т.д.

4. **Git и GitHub / GitLab**  
   Для контроля версий, командной работы и хранения кода в облаке.

5. **Инструменты форматирования и анализа кода**  
   Например: ESLint, Prettier, Stylelint и др.

6. **Сборщики и дев-серверы**  
   Webpack, Vite, CRA — для сборки и локального запуска проектов.

---

### Пример базового окружения

- VS Code с расширениями (ESLint, Prettier, GitLens)
- Node.js (включает npm)
- Git с доступом к GitHub
- Установленный менеджер пакетов: npm, yarn или pnpm
- Базовая структура проекта с \`package.json\`, \`.gitignore\`, \`README.md\`

---

### Вывод

Рабочее окружение — это **ваша база как разработчика**. Его настройка — первый шаг к комфортной и профессиональной работе. Раз настроив всё правильно, вы сэкономите сотни часов в будущем.
  `.trim(),

  codeExample: `
# Пример базовой команды инициализации проекта
mkdir my-app
cd my-app
npm init -y
code .
  `.trim(),

  resources: [
    "https://code.visualstudio.com/docs",
    "https://nodejs.org",
    "https://git-scm.com/book/ru/v2",
  ],
};

export const ide_intro_2 = {
  id: "ide_intro_2",
  title: "Установка Node.js и npm",
  content: `
 ### Что такое Node.js и npm?
 
 - **Node.js** — это среда выполнения JavaScript вне браузера (например, на сервере).
 - **npm (Node Package Manager)** — это менеджер пакетов, который позволяет устанавливать библиотеки и инструменты (например, React, Express, Webpack и др.).
 
 Node и npm — это **базовая часть окружения** frontend- и fullstack-разработчика.
 
 ---
 
 ## Скачивание Node.js
 
  Перейдите на официальный сайт:  
  [https://nodejs.org/](https://nodejs.org/)
 
 Выберите LTS-версию (рекомендуется для большинства проектов).
 
 ---
 
 ## Установка на Windows
 
 1. Перейдите на [https://nodejs.org](https://nodejs.org) и скачайте LTS-версию для Windows (.msi).
 2. Запустите установщик.
 3. Следуйте инструкциям (оставьте все настройки по умолчанию).
 4. После установки откройте **PowerShell** или **Командную строку** и введите:
    \`\`\`
    node -v
    npm -v
    \`\`\`
    Вы должны увидеть версии Node.js и npm.
 
 ---
 
 ## Установка на macOS
 
 ### Способ 1: через официальный сайт
 1. Скачайте LTS-версию с [https://nodejs.org](https://nodejs.org) (файл .pkg).
 2. Запустите установку.
 3. После завершения откройте **Терминал** и введите:
    \`\`\`
    node -v
    npm -v
    \`\`\`
    Если появились версии — всё установлено.
 
 ### Способ 2: через Homebrew (для опытных)
 Если у вас установлен Homebrew:
 \`\`\`
 brew install node
 \`\`\`
 
 ---
 
 ## Проверка установки
 
 Команды:
 \`\`\`
 node -v     // Показывает версию Node.js
 npm -v      // Показывает версию npm
 \`\`\`
 
 Пример вывода:
 \`\`\`
 v18.17.1
 9.8.1
 \`\`\`
 
 ---
 
 ## Советы
 
 - **Обновление Node.js**: проще всего переустановить с сайта или использовать nvm (Node Version Manager).
 - Если используете **nvm**, можно легко переключаться между версиями Node (актуально для macOS/Linux).
 - **npm init** — команда для создания нового проекта.
 
 ---
 
 ### Вывод
 
 Node.js и npm — это фундаментальная часть любой frontend-разработки.  
 С их помощью вы устанавливаете инструменты, запускаете сборщики, запускаете dev-серверы, и многое другое.
 
 Установка занимает всего пару минут — и вы готовы начать разработку!
   `.trim(),

  codeExample: `
 <!-- Пример: проверка Node и npm -->
 > node -v
 v18.17.1
 
 > npm -v
 9.8.1
 
 <!-- Создание нового проекта -->
 > mkdir my-app && cd my-app
 > npm init -y
   `.trim(),
};

export const ide_intro_3 = {
  id: "ide_intro_3",
  title: "Обзор необходимых инструментов: установка Git",
  content: `
 ### Что такое Git?
 
 **Git** — это система контроля версий.  
 Она позволяет **сохранять историю изменений кода**, возвращаться к прошлым версиям и **работать в команде без конфликтов**.
 
 Представьте, что Git — это **машина времени для кода**:
 - сохраняет каждое изменение,
 - позволяет "откатиться назад",
 - помогает работать в команде и не терять прогресс.
 
 ---
 
 ### Зачем нужен Git frontend-разработчику?
 
 - Хранить и отслеживать изменения в коде
 - Работать с другими разработчиками над одним проектом
 - Делать безопасные изменения (в ветках)
 - Разворачивать проект с GitHub или GitLab
 
 ---
 
 ##  Установка Git
 
 Перейдите на официальный сайт:  
  [https://git-scm.com/](https://git-scm.com/)
 
 ---
 
 ### Установка на Windows
 
 1. Зайдите на [https://git-scm.com/](https://git-scm.com/)
 2. Нажмите кнопку **"Download for Windows"**.
 3. Запустите установщик:
    - оставьте настройки по умолчанию (можно просто нажимать "Далее"),
    - убедитесь, что отмечен пункт **Git Bash** (терминал Git).
 4. После установки откройте **Git Bash** и введите:
    \`\`\`
    git --version
    \`\`\`
    Если видите версию — всё готово!
 
 ---
 
 ### Установка на macOS
 
 1. Самый простой способ — установить через **Homebrew**:
    \`\`\`
    brew install git
    \`\`\`
 2. Или при попытке ввести \`git\` в терминале — macOS предложит установить Xcode tools (можно согласиться).
 
 Проверьте:
 \`\`\`
 git --version
 \`\`\`
 
 ---
 
 ### Настройка Git (один раз)
 
 После установки введите в терминале:
 
 \`\`\`
 git config --global user.name "Ваше имя"
 git config --global user.email "ваш@email.com"
 \`\`\`
 
 Это нужно для того, чтобы ваши коммиты (сохранения) имели автора.
 
 ---
 
 ### Вывод
 
 Git — это **обязательный инструмент** для любого разработчика.  
 Он помогает не потерять работу, отслеживать изменения и работать в команде.  
 Установите Git один раз — и он будет сопровождать вас на каждом проекте!
   `.trim(),

  codeExample: `
 # Проверка установки Git
 $ git --version
 git version 2.42.0
 
 # Настройка имени и почты
 $ git config --global user.name "Frontend Dev"
 $ git config --global user.email "dev@example.com"
 
 # Инициализация проекта
 $ mkdir my-site && cd my-site
 $ git init
   `.trim(),
};

export const ide_intro_4 = {
  id: "ide_intro_4",
  title: "Установка VS Code и начальная конфигурация",
  content: `
 ### Что такое VS Code?
 
 **Visual Studio Code (VS Code)** — это популярный бесплатный редактор кода от Microsoft.  
 Он лёгкий, быстрый, с огромным количеством расширений и идеально подходит для фронтенд-разработки.
 
 ---
 
 ### Скачивание и установка
 
  Скачайте с официального сайта:  
  [https://code.visualstudio.com/](https://code.visualstudio.com/)
 
 ---
 
 ### Установка на Windows
 
 1. Зайдите на сайт и скачайте **Stable build** для Windows (.exe).
 2. Запустите установщик:
    - Оставьте всё по умолчанию
    - Отметьте чекбокс **"Добавить VS Code в PATH"**
    - Завершите установку
 
 Теперь можно запускать редактор из меню "Пуск" или через команду \`code\` в терминале.
 
 ---
 
 ### Установка на macOS
 
 1. Скачайте .zip-архив с сайта [https://code.visualstudio.com/](https://code.visualstudio.com/)
 2. Распакуйте и перенесите VS Code в папку **Программы (Applications)**
 3. Чтобы запускать из терминала, откройте VS Code → \`⌘⇧P\` → введите:
    \`Shell Command: Install 'code' command in PATH\`
 
 ---
 
 ### Рекомендованные настройки
 
 В настройках (файл settings.json) можно включить:
 
 \`\`\`json
 {
   "editor.tabSize": 2,
   "editor.formatOnSave": true,
   "files.autoSave": "onWindowChange",
   "editor.fontFamily": "Fira Code, monospace",
   "editor.fontLigatures": true
 }
 \`\`\`
 
 ---
 
 ### Горячие клавиши (Windows / macOS)
 
 | Действие             | Windows        | macOS          |
 |----------------------|----------------|----------------|
 | Открыть терминал     | Ctrl + \`      | ⌃ + \`         |
 | Поиск команды        | Ctrl + Shift + P | ⌘ + ⇧ + P     |
 | Форматировать файл   | Shift + Alt + F | ⇧ + ⌥ + F      |
 | Переключить панель   | Ctrl + B       | ⌘ + B          |
 
 ---
 
 ### Вывод
 
 VS Code — это главный рабочий инструмент frontend-разработчика.  
 Он прост в установке, гибок в настройке и невероятно мощный при использовании расширений.  
 Установите его один раз — и каждый проект будет под контролем.
   `.trim(),
};

export const ide_intro_5 = {
  id: "ide_intro_5",
  title: "Полезные расширения для VS Code",
  content: `
 ### Зачем нужны расширения?
 
 Расширения (extensions) — это **дополнительные инструменты**, которые делают работу в VS Code быстрее, удобнее и продуктивнее.  
 Они помогают с автодополнением, форматированием, Git, отладкой, визуализацией и многим другим.
 
 ---
 
 ### Как установить расширения
 
 1. Открой VS Code
 2. Перейди в раздел **Extensions** (или нажми \`Ctrl+Shift+X\`)
 3. Введи название расширения
 4. Нажми **Install**
 
 ---
 
 ### Рекомендуемые расширения
 
 #### Умный код
 - **Auto Close Tag** — автоматически закрывает HTML/JSX теги
 - **Auto Rename Tag** — переименовывает сразу открывающий и закрывающий теги
 - **Auto Import** — импортирует модули по ходу написания
 - **All Autocomplete** — дополняет код с учётом всех открытых файлов
 - **JavaScript (ES6) code snippets** — шаблоны кода JS/React
 
 #### Вёрстка и стили
 - **HTML CSS Support** — добавляет поддержку CSS в HTML
 - **CSS Navigation** — позволяет переходить по классам
 - **Easy LESS** — поддержка LESS
 - **BEM Helper** — помогает писать классы по методологии БЭМ
 
 #### Инструменты
 - **Prettier - Code formatter** — автоформатирование кода
 - **Prettier ESLint** — интеграция Prettier с ESLint
 - **ESLint** — проверка и исправление кода по правилам
 - **Code Runner** — быстрое выполнение кода в редакторе
 - **Live Server** — запускает локальный сервер с автоперезагрузкой
 
 #### Git и контроль версий
 - **GitLens — Git supercharged** — мощные инструменты Git
 - **Git History** — история коммитов
 - **GitHub Theme** — приятное оформление в стиле GitHub
 
 #### UI и интерфейс
 - **Material Icon Theme** — красивые иконки файлов и папок
 - **indent-rainbow** — цветные отступы, легче читать код
 - **Todo Tree** — показывает TODO-комментарии в проекте
 - **Russian Language Pack for Visual Studio Code** — русификация интерфейса
 
 ---
 
 ### Рекомендации
 
 - Устанавливай только нужные расширения — лишние могут замедлять VS Code.
 - Используй сочетания **Prettier + ESLint** для чистого и читаемого кода.
 - Обязательно поставь **GitLens** — это must-have для любого проекта с Git.
 
 ---
 
 ### Вывод
 
 VS Code можно настроить **под себя и свой стек**.  
 С этими расширениями ты получаешь мощную IDE уровня профессиональной разработки — бесплатно и с первых минут.
 
 Настроив редактор один раз — ты каждый день экономишь часы.
   `.trim(),

  codeExample: `
{
  "workbench.colorTheme": "Oceanic Next (dimmed bg)",
  "workbench.iconTheme": "material-icon-theme",
  "eslint.validate": [
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact"
  ],
  "editor.formatOnSave": true,
  "javascript.suggest.autoImports": true,
  "[javascript]": {
    "editor.formatOnSave": true
  },
  "[javascriptreact]": {
    "editor.formatOnSave": true
  },
  "[typescript]": {
    "editor.formatOnSave": true
  },
  "[typescriptreact]": {
    "editor.formatOnSave": true
  },
  "editor.insertSpaces": true,
  "editor.tabSize": 2,
}
   `.trim(),
};
